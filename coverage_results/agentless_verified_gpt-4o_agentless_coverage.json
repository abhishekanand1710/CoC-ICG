{
    "per_instance_coverage": {
        "astropy__astropy-14309": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "astropy/io/fits/connect.py": [
                        "Deleted Line 71: return True",
                        "Added Line 68: return filepath.lower().endswith(",
                        "Deleted Line 70: ):",
                        "Added Line 70: )",
                        "Deleted Line 68: if filepath.lower().endswith("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-13579": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "astropy/wcs/wcsapi/wrappers/sliced_wcs.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-14096": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/coordinates/sky_coordinate.py": [
                        "def __getattr__(self, attr):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 6,
                        "percentage": 100.0
                    }
                }
            }
        },
        "astropy__astropy-13033": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/timeseries/core.py": [
                        "def _check_required_columns(self):"
                    ]
                },
                "missing_lines": {
                    "astropy/timeseries/core.py": [
                        "Added Line 64: return str(obj)",
                        "Added Line 60: return f\"'{obj}'\"",
                        "Added Line 59: if not hasattr(obj, \"__len__\"):",
                        "Added Line 58: def as_scalar_or_list_str(obj):",
                        "Added Line 61: elif len(obj) == 1:",
                        "Added Line 62: return f\"'{obj[0]}'\"",
                        "Added Line 87: \"as the first column{} but found {}\"",
                        "Added Line 63: else:",
                        "Added Line 86: raise ValueError(\"{} object is invalid - expected {} \"",
                        "Added Line 89: plural, as_scalar_or_list_str(self.colnames[:len(required_columns)])))",
                        "Added Line 88: .format(self.__class__.__name__, as_scalar_or_list_str(required_columns),"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 3,
                        "percentage": 21.428571428571427
                    }
                }
            }
        },
        "astropy__astropy-13398": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "astropy/coordinates/builtin_frames/__init__.py",
                    "astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py",
                    "astropy/coordinates/builtin_frames/itrs_observed_transforms.py"
                ],
                "missing_functions": {},
                "missing_lines": {
                    "astropy/coordinates/builtin_frames/itrs.py": [
                        "Added Line 60: substitute for the ILRS software in these respects.",
                        "Added Line 58: or `~astropy.coordinates.HADec` refraction corrections compute the change in the",
                        "Added Line 68: location = EarthLocationAttribute(default=EARTH_CENTER)",
                        "Added Line 35: This frame also includes frames that are defined *relative* to the center of the Earth,",
                        "Added Line 13: Other parameters",
                        "Added Line 57: effects of the Earth's gravatational field. Nor do the `~astropy.coordinates.AltAz`",
                        "Added Line 18: location : `~astropy.coordinates.EarthLocation`",
                        "Added Line 21: transformed to an `~astropy.coordinates.ITRS` frame. The default is the",
                        "Added Line 41: EarthLocation geocentric ITRS coordinates from the object's geocentric ITRS coordinates,",
                        "Added Line 6: from astropy.coordinates.attributes import (TimeAttribute,",
                        "Added Line 56: Note to ILRS ephemeris users: Astropy does not currently consider relativistic",
                        "Added Line 43: `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`. The other way around is",
                        "Added Line 44: to transform an observed `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`",
                        "Added Line 49: topocentric ITRS, observed `~astropy.coordinates.AltAz`, or observed",
                        "Added Line 22: centre of the Earth.",
                        "Added Line 26: @format_doc(base_doc, components=\"\", footer=doc_footer)",
                        "Added Line 61: ",
                        "Added Line 31: defined by a series of reference locations near the surface of the Earth (the ITRF).",
                        "Added Line 20: `~astropy.coordinates.EarthLocation` object or as anything that can be",
                        "Added Line 8: from .utils import DEFAULT_OBSTIME, EARTH_CENTER",
                        "Added Line 38: ",
                        "Deleted Line 7: from .utils import DEFAULT_OBSTIME",
                        "Added Line 15: obstime : `~astropy.time.Time`",
                        "Added Line 55: ",
                        "Added Line 47: ",
                        "Added Line 14: ----------------",
                        "Added Line 42: put the resulting vector into a topocentric ITRS frame and then transform to",
                        "Added Line 51: from the point of view of an observer at the geocenter and stellar aberration from the",
                        "Deleted Line 12: @format_doc(base_doc, components=\"\", footer=\"\")",
                        "Added Line 19: The location on the Earth.  This can be specified either as an",
                        "Added Line 50: `~astropy.coordinates.HADec` coordinates includes the difference between stellar aberration",
                        "Added Line 37: may see such non-geocentric coordinates referred to as \"topocentric\".",
                        "Added Line 48: On the other hand, using ``transform_to`` to transform geocentric ITRS coordinates to",
                        "Added Line 53: coordinates of the object include stellar aberration at the geocenter (e.g. certain ILRS",
                        "Added Line 25: ",
                        "Added Line 16: The time at which the observation is taken.  Used for determining the",
                        "Added Line 36: but that are offset (in both position and velocity) from the center of the Earth. You",
                        "Added Line 23: \"\"\"",
                        "Added Line 17: position of the Earth and its precession.",
                        "Added Line 34: ",
                        "Added Line 40: stellar aberration is not included. One can merely subtract the observing site's",
                        "Added Line 59: range due to the curved path of light through the atmosphere, so Astropy is no",
                        "Deleted Line 17: defined by a series of reference locations near the surface of the Earth.",
                        "Added Line 39: Topocentric ITRS frames are convenient for observations of near Earth objects where",
                        "Added Line 12: doc_footer = \"\"\"",
                        "Added Line 52: point of view of an observer on the surface of the Earth. If the geocentric ITRS",
                        "Added Line 46: ITRS coordinates to yield the object's geocentric ITRS coordinates.",
                        "Added Line 45: position to a topocentric ITRS frame and add the observing site's EarthLocation geocentric",
                        "Added Line 54: ephemerides), then this is the way to go."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 215,
                        "covered": 2,
                        "percentage": 0.9302325581395349
                    }
                }
            }
        },
        "astropy__astropy-12907": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "astropy__astropy-13453": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/io/ascii/html.py": [
                        "def write(self, table):"
                    ]
                },
                "missing_lines": {
                    "astropy/io/ascii/html.py": [
                        "Added Line 358: self.data._set_col_formats()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "astropy__astropy-13977": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/units/quantity.py": [
                        "def __array_ufunc__(self, function, method, *inputs, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "astropy/units/quantity.py": [
                        "Added Line 649: # If pre-allocated output is used, check it is suitable.",
                        "Deleted Line 657: # Special-case for initial argument for reductions like",
                        "Deleted Line 662: kwargs[\"initial\"] = self._to_own_unit(",
                        "Added Line 674: result = super().__array_ufunc__(function, method, *arrays, **kwargs)",
                        "Deleted Line 643: converters, unit = converters_and_unit(function, method, *inputs)",
                        "Deleted Line 663: kwargs[\"initial\"], check_precision=False, unit=unit",
                        "Added Line 659: # np.add.reduce.  This should be converted to the output unit as",
                        "Added Line 676: # means we're done.",
                        "Added Line 687: inputs_and_outputs = inputs + out_normalized",
                        "Added Line 643: try:",
                        "Added Line 665: )",
                        "Added Line 657: if method == \"reduce\" and \"initial\" in kwargs and unit is not None:",
                        "Added Line 685: except (TypeError, ValueError) as e:",
                        "Added Line 646: out = kwargs.get(\"out\", None)",
                        "Added Line 688: ignored_ufunc = (",
                        "Deleted Line 674: # If unit is None, a plain array is expected (e.g., comparisons), which",
                        "Deleted Line 675: # means we're done.",
                        "Added Line 697: return NotImplemented",
                        "Deleted Line 676: # We're also done if the result was None (for method 'at') or",
                        "Deleted Line 682: return self._result_as_quantity(result, unit, out)",
                        "Deleted Line 647: if out is not None:",
                        "Added Line 678: # NotImplemented, which can happen if other inputs/outputs override",
                        "Added Line 693: if not all(",
                        "Added Line 648: if out is not None:",
                        "Added Line 662: # for np.arctan2, though those are not necessarily useful!)",
                        "Deleted Line 672: # Call our superclass's __array_ufunc__",
                        "Added Line 694: getattr(type(io), \"__array_ufunc__\", None) in ignored_ufunc",
                        "Deleted Line 659: # well, which is typically the same as the input unit (but can",
                        "Added Line 689: None,",
                        "Added Line 684: ",
                        "Added Line 652: out = out[0]",
                        "Added Line 658: # Special-case for initial argument for reductions like",
                        "Deleted Line 667: arrays = []",
                        "Added Line 664: kwargs[\"initial\"], check_precision=False, unit=unit",
                        "Added Line 680: if unit is None or result is None or result is NotImplemented:",
                        "Deleted Line 649: # This also returns array view, to ensure we don't loop back.",
                        "Added Line 644: converters, unit = converters_and_unit(function, method, *inputs)",
                        "Added Line 667: # Same for inputs, but here also convert if necessary.",
                        "Added Line 654: # Ensure output argument remains a tuple.",
                        "Added Line 686: out_normalized = kwargs.get(\"out\", tuple())",
                        "Added Line 650: # This also returns array view, to ensure we don't loop back.",
                        "Deleted Line 651: out = out[0]",
                        "Added Line 681: return result",
                        "Added Line 677: # We're also done if the result was None (for method 'at') or",
                        "Deleted Line 679: if unit is None or result is None or result is NotImplemented:",
                        "Added Line 655: kwargs[\"out\"] = (out_array,) if function.nout == 1 else out_array",
                        "Deleted Line 650: if function.nout == 1:",
                        "Added Line 647: # Avoid loop back by turning any Quantity output into array views.",
                        "Added Line 683: return self._result_as_quantity(result, unit, out)",
                        "Added Line 695: for io in inputs_and_outputs",
                        "Deleted Line 652: out_array = check_output(out, unit, inputs, function=function)",
                        "Added Line 651: if function.nout == 1:",
                        "Deleted Line 645: out = kwargs.get(\"out\", None)",
                        "Deleted Line 648: # If pre-allocated output is used, check it is suitable.",
                        "Added Line 679: # __array_ufunc__; hopefully, they can then deal with us.",
                        "Deleted Line 655: ",
                        "Added Line 699: raise e",
                        "Deleted Line 680: return result",
                        "Deleted Line 673: result = super().__array_ufunc__(function, method, *arrays, **kwargs)",
                        "Deleted Line 661: # for np.arctan2, though those are not necessarily useful!)",
                        "Deleted Line 666: # Same for inputs, but here also convert if necessary.",
                        "Added Line 691: type(self).__array_ufunc__,",
                        "Deleted Line 660: # in principle be different: unitless for np.equal, radian",
                        "Deleted Line 653: # Ensure output argument remains a tuple.",
                        "Deleted Line 636: result : `~astropy.units.Quantity`",
                        "Added Line 660: # well, which is typically the same as the input unit (but can",
                        "Deleted Line 677: # NotImplemented, which can happen if other inputs/outputs override",
                        "Deleted Line 665: ",
                        "Added Line 663: kwargs[\"initial\"] = self._to_own_unit(",
                        "Deleted Line 671: ",
                        "Added Line 653: out_array = check_output(out, unit, inputs, function=function)",
                        "Added Line 656: ",
                        "Deleted Line 654: kwargs[\"out\"] = (out_array,) if function.nout == 1 else out_array",
                        "Deleted Line 646: # Avoid loop back by turning any Quantity output into array views.",
                        "Added Line 690: np.ndarray.__array_ufunc__,",
                        "Added Line 661: # in principle be different: unitless for np.equal, radian",
                        "Added Line 636: result : `~astropy.units.Quantity` or `NotImplemented`",
                        "Deleted Line 678: # __array_ufunc__; hopefully, they can then deal with us.",
                        "Added Line 645: ",
                        "Added Line 696: ):",
                        "Deleted Line 656: if method == \"reduce\" and \"initial\" in kwargs and unit is not None:",
                        "Deleted Line 658: # np.add.reduce.  This should be converted to the output unit as",
                        "Deleted Line 681: ",
                        "Added Line 682: ",
                        "Added Line 698: else:",
                        "Added Line 675: # If unit is None, a plain array is expected (e.g., comparisons), which"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 95,
                        "covered": 9,
                        "percentage": 9.473684210526317
                    }
                }
            }
        },
        "astropy__astropy-14182": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/io/ascii/rst.py": [
                        "def get_fixedwidth_params(self, line):"
                    ]
                },
                "missing_lines": {
                    "astropy/io/ascii/rst.py": [
                        "Added Line 84: ",
                        "Added Line 82: lines = [lines[idx]] + lines + [lines[idx]]",
                        "Added Line 58: wave response",
                        "Added Line 77: super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)",
                        "Added Line 87: return super().read(table)",
                        "Added Line 57: ===== ========",
                        "Added Line 41: >>> from astropy.table import QTable",
                        "Deleted Line 47: ==== ===== ======",
                        "Deleted Line 45: 1    2.3  Hello",
                        "Added Line 56: >>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=['name', 'unit'])",
                        "Added Line 81: idx = len(self.header.header_rows)",
                        "Added Line 44: >>> tbl = QTable({\"wave\": [350, 950] * u.nm, \"response\": [0.7, 1.2] * u.count})",
                        "Added Line 43: >>> import sys",
                        "Added Line 49: 350.0      0.7",
                        "Added Line 85: def read(self, table):",
                        "Deleted Line 44: ==== ===== ======",
                        "Deleted Line 61: super().__init__(delimiter_pad=None, bookend=False)",
                        "Added Line 55: ",
                        "Added Line 47: wave response",
                        "Deleted Line 42: ==== ===== ======",
                        "Deleted Line 43: Col1  Col2  Col3",
                        "Deleted Line 46: 2    4.5  Worlds",
                        "Added Line 42: >>> import astropy.units as u",
                        "Added Line 51: ===== ========",
                        "Added Line 62: 950.0      1.2",
                        "Deleted Line 30: start_line = 3",
                        "Added Line 50: 950.0      1.2",
                        "Added Line 48: ===== ========",
                        "Added Line 53: Like other fixed-width formats, when writing a table you can provide ``header_rows``",
                        "Added Line 86: self.data.start_line = 2 + len(self.header.header_rows)",
                        "Added Line 46: ===== ========",
                        "Added Line 59: nm       ct",
                        "Added Line 76: def __init__(self, header_rows=None):",
                        "Deleted Line 65: lines = [lines[1]] + lines + [lines[1]]",
                        "Added Line 63: ===== ========",
                        "Added Line 52: ",
                        "Added Line 45: >>> tbl.write(sys.stdout,  format=\"ascii.rst\")",
                        "Added Line 54: to specify a list of table rows to output as the header.  For example::"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 41,
                        "covered": 3,
                        "percentage": 7.317073170731707
                    }
                }
            }
        },
        "astropy__astropy-13236": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/table/table.py": [
                        "def _convert_data_to_col(self, data, copy=True, default_name=None, dtype=None, n"
                    ]
                },
                "missing_lines": {
                    "astropy/table/table.py": [
                        "Deleted Line 1245: and isinstance(data, np.ndarray) and len(data.dtype) > 1):",
                        "Deleted Line 1243: # mixin class",
                        "Deleted Line 1242: # Structured ndarray gets viewed as a mixin unless already a valid",
                        "Deleted Line 1248: ",
                        "Deleted Line 1244: if (not isinstance(data, Column) and not data_is_mixin"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "astropy__astropy-14369": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "astropy/units/format/cds.py",
                    "astropy/units/format/cds_parsetab.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 65,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-14995": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "astropy/nddata/mixins/ndarithmetic.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-14365": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/io/ascii/qdp.py": [
                        "def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):"
                    ]
                },
                "missing_lines": {
                    "astropy/io/ascii/qdp.py": [
                        "Deleted Line 71: _line_type_re = re.compile(_type_re)",
                        "Added Line 309: if v.upper() == \"NO\":",
                        "Deleted Line 309: if v == \"NO\":",
                        "Added Line 71: _line_type_re = re.compile(_type_re, re.IGNORECASE)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-7166": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/utils/misc.py": [
                        "def is_public_member(key):"
                    ]
                },
                "missing_lines": {
                    "astropy/utils/misc.py": [
                        "Added Line 527: if ((inspect.isfunction(val) or inspect.isdatadescriptor(val)) and",
                        "Deleted Line 30: ",
                        "Deleted Line 9: ",
                        "Deleted Line 7: ",
                        "Deleted Line 8: ",
                        "Added Line 529: val.__doc__ is None):",
                        "Deleted Line 533: val.__doc__ is None):",
                        "Deleted Line 532: is_public_member(key) and",
                        "Added Line 528: is_public_member(key) and"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 1,
                        "percentage": 10.0
                    }
                }
            }
        },
        "astropy__astropy-7336": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/units/decorators.py": [
                        "def wrapper(*func_args, **func_kwargs):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "astropy__astropy-7671": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "astropy/utils/introspection.py": [
                        "Added Line 144: # of the version number. Match the dotted numbers only. Regex taken",
                        "Added Line 150: ",
                        "Added Line 146: expr = '^([1-9]\\\\d*!)?(0|[1-9]\\\\d*)(\\\\.(0|[1-9]\\\\d*))*'",
                        "Added Line 149: version = m.group(0)",
                        "Added Line 7: import re",
                        "Added Line 148: if m:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 3,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "astropy__astropy-14539": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/io/fits/diff.py": [
                        "def _diff(self):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "astropy__astropy-14598": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/io/fits/card.py": [
                        "def _split(self):"
                    ]
                },
                "missing_lines": {
                    "astropy/io/fits/card.py": [
                        "Added Line 69: _strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?$\")",
                        "Deleted Line 69: _strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?\")"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "astropy__astropy-7606": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/units/core.py": [
                        "def __eq__(self, other):",
                        "def _unrecognized_operator(self, *args, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "astropy/units/core.py": [
                        "Deleted Line 1713: other = Unit(other, parse_strict='silent')",
                        "Deleted Line 731: return False",
                        "Added Line 1718: return isinstance(other, type(self)) and self.name == other.name",
                        "Added Line 1717: ",
                        "Added Line 1714: other = Unit(other, parse_strict='silent')",
                        "Added Line 1715: except (ValueError, UnitsError, TypeError):",
                        "Added Line 1713: try:",
                        "Added Line 731: return NotImplemented",
                        "Deleted Line 1714: return isinstance(other, UnrecognizedUnit) and self.name == other.name",
                        "Added Line 1716: return NotImplemented"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-10097": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "astropy__astropy-14508": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "astropy/io/fits/card.py": [
                        "Added Line 1301: \"\"\"Format a floating number to make sure it is at most 20 characters.\"\"\"",
                        "Deleted Line 1301: \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"",
                        "Deleted Line 1319: ",
                        "Deleted Line 1322: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 20,
                        "percentage": 83.33333333333334
                    }
                }
            }
        },
        "django__django-10914": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/conf/global_settings.py": [
                        "def gettext_noop(s):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-10999": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/utils/dateparse.py": [
                        "Added Line 35: r'(?P<seconds>\\d+)'",
                        "Added Line 33: r'((?:(?P<hours>\\d+):)(?=\\d+:\\d+))?'",
                        "Deleted Line 34: r'(?P<seconds>-?\\d+)'",
                        "Deleted Line 33: r'(?:(?P<minutes>-?\\d+):)?'",
                        "Added Line 34: r'(?:(?P<minutes>\\d+):)?'"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "astropy__astropy-8872": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "astropy/units/quantity.py": [
                        "def __new__(cls, value, unit=None, dtype=None, copy=True, order=None,"
                    ]
                },
                "missing_lines": {
                    "astropy/units/quantity.py": [
                        "Deleted Line 300: value.dtype.fields):",
                        "Deleted Line 380: if dtype is None and (not (np.can_cast(np.float32, value.dtype)",
                        "Deleted Line 218: except that any input that cannot represent float (integer and bool)",
                        "Deleted Line 382: or value.dtype.kind == 'O'):",
                        "Added Line 219: to float by default.",
                        "Deleted Line 381: or value.dtype.fields)",
                        "Added Line 299: if value.dtype.kind in 'iu':",
                        "Added Line 218: except that any integer and (non-Quantity) object inputs are converted",
                        "Deleted Line 219: is converted to float.",
                        "Deleted Line 299: if not (np.can_cast(np.float32, value.dtype) or"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 1,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "django__django-10973": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/backends/postgresql/client.py": [
                        "def runshell_db(cls, conn_params):"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/postgresql/client.py": [
                        "Deleted Line 13: return txt.replace('\\\\', '\\\\\\\\').replace(':', '\\\\:')",
                        "Added Line 32: subprocess_env['PGPASSWORD'] = str(passwd)",
                        "Deleted Line 14: ",
                        "Added Line 30: subprocess_env = os.environ.copy()",
                        "Added Line 31: if passwd:",
                        "Deleted Line 12: \"\"\"",
                        "Deleted Line 15: ",
                        "Deleted Line 37: temp_pgpass = None",
                        "Deleted Line 11: Escape a fragment of a PostgreSQL .pgpass file.",
                        "Added Line 36: subprocess.run(args, check=True, env=subprocess_env)",
                        "Deleted Line 10: \"\"\"",
                        "Deleted Line 9: def _escape_pgpass(txt):",
                        "Deleted Line 40: if passwd:",
                        "Deleted Line 5: from django.core.files.temp import NamedTemporaryFile"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 37,
                        "covered": 23,
                        "percentage": 62.16216216216216
                    }
                }
            }
        },
        "django__django-11066": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/contenttypes/management/__init__.py": [
                        "def _rename(self, apps, schema_editor, old_model, new_model):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-11099": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/contrib/auth/validators.py": [
                        "Added Line 10: regex = r'^[\\w.@+-]+\\Z'",
                        "Added Line 20: regex = r'^[\\w.@+-]+\\Z'"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "astropy__astropy-8707": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "astropy/io/fits/card.py"
                ],
                "missing_functions": {
                    "astropy/io/fits/header.py": [
                        "def fromstring(cls, data, sep=''):"
                    ]
                },
                "missing_lines": {
                    "astropy/io/fits/header.py": [
                        "Added Line 342: bytes that might appear in malformatted FITS files).",
                        "Added Line 341: allowed in FITS headers but latin-1 allows us to retain any invalid",
                        "Added Line 368: ... NAXIS   =                    0 / number of array dimensions",
                        "Added Line 396: # encoded data in a FITS header that's OK because it shouldn't be",
                        "Added Line 406: END = 'END'",
                        "Added Line 359: If you want to create a `Header` from printed text it's not necessary",
                        "Added Line 393: if isinstance(data, bytes):",
                        "Added Line 404: else:",
                        "Added Line 361: with the full 80 byte card length.  Rather, each \"card\" can end in a",
                        "Deleted Line 377: if next_image[:8] == 'CONTINUE':",
                        "Added Line 350: ",
                        "Added Line 357: True",
                        "Added Line 365: >>> hdr = Header.fromstring(\\\"\\\"\\\"\\\\",
                        "Deleted Line 380: cards.append(Card.fromstring(''.join(image)))",
                        "Added Line 354: >>> from astropy.io.fits import Header",
                        "Added Line 366: ... SIMPLE  =                    T / conforms to FITS standard",
                        "Added Line 338: data : str or bytes",
                        "Added Line 375: >>> len(hdr)",
                        "Added Line 394: # FITS supports only ASCII, but decode as latin1 and just take all",
                        "Added Line 427: if next_image[:8] == CONTINUE:",
                        "Added Line 349: to create a new `Header` from it by copy/pasting.",
                        "Deleted Line 387: if next_image.split(sep)[0].rstrip() == 'END':",
                        "Added Line 340: they will be decoded using latin-1 (only plain ASCII characters are",
                        "Added Line 369: ... EXTEND  =                    T",
                        "Deleted Line 383: if next_image == END_CARD:",
                        "Added Line 405: CONTINUE = 'CONTINUE'",
                        "Added Line 38: 'Header.totextfile', 'Header.set', 'Header.update']",
                        "Added Line 353: ",
                        "Added Line 374: 8",
                        "Added Line 351: Examples",
                        "Added Line 367: ... BITPIX  =                    8 / array data type",
                        "Added Line 370: ... \\\"\\\"\\\", sep='\\\\n')",
                        "Added Line 373: >>> hdr['BITPIX']",
                        "Added Line 437: if next_image.split(sep)[0].rstrip() == END:",
                        "Added Line 409: ",
                        "Added Line 339: String or bytes containing the entire header.  In the case of bytes",
                        "Deleted Line 395: cards.append(Card.fromstring(''.join(image)))",
                        "Added Line 358: ",
                        "Added Line 445: cards.append(Card.fromstring(empty.join(image)))",
                        "Added Line 402: sep = sep.encode('latin1')",
                        "Added Line 403: empty = b''",
                        "Added Line 37: __doctest_skip__ = ['Header', 'Header.comments', 'Header.fromtextfile',",
                        "Deleted Line 343: file).",
                        "Deleted Line 37: __doctest_skip__ = ['Header', 'Header.*']",
                        "Added Line 348: printed as text (e.g. with newlines after each card) and you want",
                        "Added Line 372: True",
                        "Added Line 397: # there in the first place--accepting it here still gives us the",
                        "Added Line 364: ",
                        "Added Line 430: cards.append(Card.fromstring(empty.join(image)))",
                        "Added Line 352: --------",
                        "Added Line 371: >>> hdr['SIMPLE']",
                        "Added Line 347: file).  In general this is only used in cases where a header was",
                        "Added Line 401: end_card = END_CARD.encode('ascii')",
                        "Added Line 362: newline and does not have to be padded out to a full card length as",
                        "Added Line 360: to have the exact binary structure as it would appear in a FITS file,",
                        "Added Line 408: empty = ''",
                        "Added Line 433: if next_image == end_card:",
                        "Added Line 398: # opportunity to display warnings later during validation",
                        "Added Line 399: CONTINUE = b'CONTINUE'",
                        "Added Line 407: end_card = END_CARD",
                        "Deleted Line 337: data : str",
                        "Added Line 355: >>> hdr = Header({'SIMPLE': True})",
                        "Added Line 356: >>> Header.fromstring(hdr.tostring()) == hdr",
                        "Added Line 395: # bytes for now; if it results in mojibake due to e.g. UTF-8",
                        "Added Line 376: 4",
                        "Deleted Line 338: String containing the entire header.",
                        "Added Line 400: END = b'END'",
                        "Added Line 363: long as it \"looks like\" a FITS header:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 75,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11119": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/template/engine.py": [
                        "def render_to_string(self, template_name, context=None):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-11141": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/loader.py": [
                        "def load_disk(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/loader.py": [
                        "Added Line 99: self.migrated_apps.add(app_config.label)",
                        "Added Line 100: else:",
                        "Added Line 98: if migration_names or self.ignore_no_migrations:",
                        "Added Line 101: self.unmigrated_apps.add(app_config.label)",
                        "Deleted Line 99: self.migrated_apps.add(app_config.label)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 5,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-10880": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/aggregates.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11133": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/http/response.py": [
                        "def make_bytes(self, value):"
                    ]
                },
                "missing_lines": {
                    "django/http/response.py": [
                        "Deleted Line 232: if isinstance(value, bytes):",
                        "Added Line 232: if isinstance(value, (bytes, memoryview)):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11095": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/options.py": [
                        "def __str__(self):",
                        "def get_fieldsets(self, request, obj=None):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/options.py": [
                        "Added Line 330: def get_inlines(self, request, obj):",
                        "Added Line 331: \"\"\"Hook for specifying custom inlines.\"\"\"",
                        "Added Line 333: ",
                        "Added Line 332: return self.inlines",
                        "Added Line 589: for inline_class in self.get_inlines(request, obj):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "django__django-11087": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/deletion.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 30,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11206": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/utils/numberformat.py": [
                        "Added Line 30: ",
                        "Added Line 33: # decimal places, consider it equal to '0'."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 6,
                        "percentage": 75.0
                    }
                }
            }
        },
        "django__django-10554": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/query.py"
                ],
                "missing_functions": {
                    "django/db/models/sql/compiler.py": [
                        "def get_order_by(self):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 7,
                        "percentage": 63.63636363636363
                    }
                }
            }
        },
        "django__django-11239": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/backends/postgresql/client.py": [
                        "def runshell_db(cls, conn_params):"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/postgresql/client.py": [
                        "Added Line 22: sslcert = conn_params.get('sslcert', '')",
                        "Added Line 39: if sslrootcert:",
                        "Added Line 44: subprocess_env['PGSSLKEY'] = str(sslkey)",
                        "Added Line 42: subprocess_env['PGSSLCERT'] = str(sslcert)",
                        "Added Line 20: sslmode = conn_params.get('sslmode', '')",
                        "Added Line 38: subprocess_env['PGSSLMODE'] = str(sslmode)",
                        "Added Line 21: sslrootcert = conn_params.get('sslrootcert', '')",
                        "Added Line 41: if sslcert:",
                        "Added Line 23: sslkey = conn_params.get('sslkey', '')",
                        "Added Line 43: if sslkey:",
                        "Added Line 40: subprocess_env['PGSSLROOTCERT'] = str(sslrootcert)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 1,
                        "percentage": 8.333333333333332
                    }
                }
            }
        },
        "django__django-11163": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-11276": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/utils/html.py": [
                        "def is_email_simple(value):",
                        "def trim_url(x, limit=trim_url_limit):",
                        "def trim_punctuation(lead, middle, trail):",
                        "def escape(text):"
                    ]
                },
                "missing_lines": {
                    "django/utils/html.py": [
                        "Deleted Line 29: ord('<'): '&lt;',",
                        "Deleted Line 31: ord('\"'): '&quot;',",
                        "Deleted Line 270: ",
                        "Deleted Line 267: \"\"\"",
                        "Deleted Line 27: _html_escapes = {",
                        "Deleted Line 268: return text.replace('&amp;', '&').replace('&lt;', '<').replace(",
                        "Deleted Line 332: url = smart_urlquote(unescape(middle))",
                        "Deleted Line 264: If input URL is HTML-escaped, unescape it so that it can be safely fed",
                        "Added Line 279: middle_unescaped = html.unescape(middle)",
                        "Deleted Line 33: }",
                        "Added Line 3: import html",
                        "Deleted Line 269: '&gt;', '>').replace('&quot;', '\"').replace('&#39;', \"'\")",
                        "Deleted Line 30: ord('>'): '&gt;',",
                        "Added Line 318: url = smart_urlquote('http://%s' % html.unescape(middle))",
                        "Deleted Line 263: \"\"\"",
                        "Deleted Line 265: to smart_urlquote. For example:",
                        "Deleted Line 32: ord(\"'\"): '&#39;',",
                        "Deleted Line 34: ",
                        "Deleted Line 28: ord('&'): '&amp;',",
                        "Deleted Line 295: middle_unescaped = unescape(middle)",
                        "Added Line 39: return mark_safe(html.escape(str(text)))",
                        "Deleted Line 266: http://example.com?x=1&amp;y=&lt;2&gt; => http://example.com?x=1&y=<2>",
                        "Deleted Line 262: def unescape(text):",
                        "Added Line 316: url = smart_urlquote(html.unescape(middle))",
                        "Deleted Line 334: url = smart_urlquote('http://%s' % unescape(middle))"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 26,
                        "covered": 1,
                        "percentage": 3.8461538461538463
                    }
                }
            }
        },
        "django__django-11138": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/oracle/operations.py",
                    "django/db/backends/sqlite3/base.py",
                    "django/db/backends/sqlite3/operations.py"
                ],
                "missing_functions": {
                    "django/db/backends/mysql/operations.py": [
                        "def date_trunc_sql(self, lookup_type, field_name):"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/mysql/operations.py": [
                        "Added Line 72: if settings.USE_TZ and self.connection.timezone_name != tzname:",
                        "Deleted Line 72: if settings.USE_TZ:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 69,
                        "covered": 2,
                        "percentage": 2.898550724637681
                    }
                }
            }
        },
        "django__django-11179": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/deletion.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11299": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/query.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11451": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-11149": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/options.py": [
                        "def get_queryset(self, request):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/options.py": [
                        "Added Line 2123: for field in opts.fields:",
                        "Added Line 2150: return self._has_any_perms_for_target_model(request, ['change'])",
                        "Deleted Line 2126: # which doesn't have its own individual permissions. The user needs",
                        "Deleted Line 2134: # We're checking the rights to an auto-created intermediate model,",
                        "Deleted Line 2117: # which doesn't have its own individual permissions. The user needs",
                        "Added Line 2134: # Auto-created intermediate models don't have their own",
                        "Added Line 2115: \"\"\"",
                        "Added Line 2157: return self._has_any_perms_for_target_model(request, ['view', 'change'])",
                        "Added Line 2135: # permissions. The user needs to have the change permission for the",
                        "Deleted Line 2144: # The model was auto-created as intermediary for a many-to-many",
                        "Added Line 2126: break",
                        "Deleted Line 2152: request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))",
                        "Deleted Line 2146: for field in opts.fields:",
                        "Deleted Line 2125: # We're checking the rights to an auto-created intermediate model,",
                        "Deleted Line 2147: if field.remote_field and field.remote_field.model != self.parent_model:",
                        "Added Line 2114: def _has_any_perms_for_target_model(self, request, perms):",
                        "Added Line 2149: # Same comment as has_add_permission().",
                        "Added Line 2155: # Same comment as has_add_permission(). The 'change' permission",
                        "Added Line 2156: # also implies the 'view' permission.",
                        "Added Line 2130: )",
                        "Deleted Line 2143: opts = self.opts",
                        "Added Line 2116: This method is called only when the ModelAdmin's model is for an",
                        "Added Line 2122: # Find the target model of an auto-created many-to-many relationship.",
                        "Deleted Line 2145: # Many-relationship; find the target model.",
                        "Deleted Line 2148: opts = field.remote_field.model._meta",
                        "Deleted Line 2149: break",
                        "Added Line 2131: ",
                        "Added Line 2124: if field.remote_field and field.remote_field.model != self.parent_model:",
                        "Deleted Line 2116: # We're checking the rights to an auto-created intermediate model,",
                        "Added Line 2117: ManyToManyField's implicit through model (if self.opts.auto_created).",
                        "Added Line 2121: opts = self.opts",
                        "Added Line 2125: opts = field.remote_field.model._meta",
                        "Added Line 2143: # Same comment as has_add_permission().",
                        "Deleted Line 2135: # which doesn't have its own individual permissions. The user needs",
                        "Deleted Line 2153: )",
                        "Added Line 2144: return self._has_any_perms_for_target_model(request, ['change'])",
                        "Deleted Line 2151: request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) or",
                        "Deleted Line 2150: return ("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 56,
                        "covered": 18,
                        "percentage": 32.142857142857146
                    }
                }
            }
        },
        "django__django-11477": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/urls/resolvers.py": [
                        "def match(self, path):"
                    ]
                },
                "missing_lines": {
                    "django/urls/resolvers.py": [
                        "Deleted Line 156: kwargs = match.groupdict()",
                        "Added Line 156: kwargs = {k: v for k, v in match.groupdict().items() if v is not None}"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11292": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/base.py": [
                        "def create_parser(self, prog_name, subcommand, **kwargs):",
                        "def execute(self, *args, **options):",
                        "class DjangoHelpFormatter(HelpFormatter):"
                    ]
                },
                "missing_lines": {
                    "django/core/management/base.py": [
                        "Added Line 98: '--no-color', '--force-color', '--skip-checks',",
                        "Added Line 226: base_stealth_options = ('stderr', 'stdout')",
                        "Deleted Line 98: '--no-color', '--force-color',",
                        "Added Line 293: )",
                        "Added Line 365: if self.requires_system_checks and not options['skip_checks']:",
                        "Deleted Line 360: if self.requires_system_checks and not options.get('skip_checks'):",
                        "Deleted Line 226: base_stealth_options = ('skip_checks', 'stderr', 'stdout')"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 4,
                        "percentage": 36.36363636363637
                    }
                }
            }
        },
        "django__django-11333": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/urls/base.py"
                ],
                "missing_functions": {
                    "django/urls/resolvers.py": [
                        "def __repr__(self):"
                    ]
                },
                "missing_lines": {
                    "django/urls/resolvers.py": [
                        "Added Line 69: return _get_cached_resolver(urlconf)",
                        "Deleted Line 66: @functools.lru_cache(maxsize=None)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 4,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-11265": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/sql/query.py": [
                        "def split_exclude(self, filter_expr, can_reuse, names_with_path):",
                        "def trim_start(self, names_with_path):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/sql/query.py": [
                        "Deleted Line 2144: # miss those rows that have nothing on the outer side.",
                        "Added Line 2150: if first_join.join_type != LOUTER and not first_join.filtered_relation:",
                        "Added Line 2147: # - INNER JOINs from filtered relations because we would miss their",
                        "Added Line 2148: #   filters.",
                        "Added Line 2146: #   the outer side,",
                        "Deleted Line 2143: # (that is, self). We can't do this for LEFT JOINs because we would",
                        "Added Line 2144: # (that is, self). We can't do this for:",
                        "Added Line 2145: # - LEFT JOINs because we would miss those rows that have nothing on",
                        "Deleted Line 2145: if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type != LOUTER:",
                        "Added Line 2149: first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 1,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "django__django-11532": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/core/mail/utils.py",
                    "django/core/validators.py",
                    "django/utils/encoding.py",
                    "django/utils/html.py"
                ],
                "missing_functions": {
                    "django/core/mail/message.py": [
                        "def sanitize_address(addr, encoding):"
                    ]
                },
                "missing_lines": {
                    "django/core/mail/message.py": [
                        "Deleted Line 108: domain = domain.encode('idna').decode('ascii')",
                        "Deleted Line 106: domain.encode('ascii')",
                        "Deleted Line 105: try:",
                        "Deleted Line 107: except UnicodeEncodeError:",
                        "Added Line 19: from django.utils.encoding import force_str, punycode",
                        "Added Line 105: domain = punycode(domain)",
                        "Deleted Line 19: from django.utils.encoding import force_str"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 26,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11211": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/fields/__init__.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11400": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/fields/__init__.py",
                    "django/db/models/fields/reverse_related.py"
                ],
                "missing_functions": {
                    "django/contrib/admin/filters.py": [
                        "def has_output(self):",
                        "def choices(self, changelist):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/filters.py": [
                        "Deleted Line 200: ordering = related_admin.get_ordering(request)",
                        "Added Line 197: \"\"\"",
                        "Added Line 199: \"\"\"",
                        "Added Line 205: def field_choices(self, field, request, model_admin):",
                        "Added Line 428: ordering = self.field_admin_ordering(field, request, model_admin)",
                        "Added Line 206: ordering = self.field_admin_ordering(field, request, model_admin)",
                        "Added Line 429: return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)",
                        "Added Line 198: Return the model admin's ordering for related field, if provided.",
                        "Added Line 196: def field_admin_ordering(self, field, request, model_admin):",
                        "Deleted Line 197: ordering = ()",
                        "Added Line 203: return ()",
                        "Added Line 204: ",
                        "Deleted Line 196: def field_choices(self, field, request, model_admin):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 26,
                        "covered": 2,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "django__django-11433": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/forms/models.py": [
                        "Added Line 53: form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and",
                        "Deleted Line 51: if (f.has_default() and",
                        "Added Line 55: ):",
                        "Added Line 54: cleaned_data.get(f.name) in form[f.name].field.empty_values"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 3,
                        "percentage": 42.857142857142854
                    }
                }
            }
        },
        "django__django-11749": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/__init__.py": [
                        "def get_actions(parser):"
                    ]
                },
                "missing_lines": {
                    "django/core/management/__init__.py": [
                        "Added Line 145: )",
                        "Added Line 142: for opt in parser_actions if ("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 8,
                        "percentage": 80.0
                    }
                }
            }
        },
        "django__django-11728": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/admindocs/utils.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11790": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/auth/forms.py": [
                        "def __init__(self, request=None, *args, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/auth/forms.py": [
                        "Added Line 196: self.fields['username'].widget.attrs['maxlength'] = username_max_length",
                        "Deleted Line 194: self.fields['username'].max_length = self.username_field.max_length or 254",
                        "Added Line 194: username_max_length = self.username_field.max_length or 254"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-11603": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/aggregates.py": [
                        "def _get_repr_options(self):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-11490": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/sql/compiler.py": [
                        "def get_combinator_sql(self, combinator, all):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/sql/compiler.py": [
                        "Added Line 429: compiler.query = compiler.query.clone()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11740": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/autodetector.py": [
                        "def generate_altered_fields(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/autodetector.py": [
                        "Added Line 975: ),",
                        "Added Line 943: dependencies.extend(self._get_dependencies_for_foreign_key(new_field))",
                        "Added Line 915: dependencies = []",
                        "Added Line 976: dependencies=dependencies,",
                        "Deleted Line 973: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/checks.py": [
                        "def _check_list_display_item(self, obj, item, label):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/checks.py": [
                        "Deleted Line 725: field = obj.model._meta.get_field(item)",
                        "Added Line 724: field = obj.model._meta.get_field(item)",
                        "Added Line 725: except FieldDoesNotExist:",
                        "Deleted Line 735: )",
                        "Added Line 740: ]",
                        "Deleted Line 733: obj=obj.__class__,",
                        "Deleted Line 730: return [",
                        "Added Line 731: \"The value of '%s' refers to '%s', which is not a \"",
                        "Added Line 739: )",
                        "Deleted Line 726: except FieldDoesNotExist:",
                        "Deleted Line 731: checks.Error(",
                        "Added Line 737: obj=obj.__class__,",
                        "Added Line 730: checks.Error(",
                        "Deleted Line 736: ]"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 42,
                        "covered": 28,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "django__django-11734": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/fields/__init__.py",
                    "django/db/models/fields/related_lookups.py",
                    "django/db/models/sql/query.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11815": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/db/migrations/serializer.py": [
                        "Added Line 125: {'import %s' % module},",
                        "Added Line 124: '%s.%s[%r]' % (module, enum_class.__name__, self.value.name),",
                        "Deleted Line 125: return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports",
                        "Deleted Line 124: imports = {'import %s' % module, *v_imports}",
                        "Added Line 126: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-11848": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/utils/http.py": [
                        "Added Line 183: # interpreted as representing the past.",
                        "Added Line 186: year += current_century"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 8,
                        "percentage": 80.0
                    }
                }
            }
        },
        "django__django-11555": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/compiler.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11820": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/base.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11964": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/enums.py": [
                        "def values(cls):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/enums.py": [
                        "Added Line 66: Use value when cast to str, so that Choices set as model instance",
                        "Added Line 68: \"\"\"",
                        "Added Line 69: return str(self.value)",
                        "Added Line 67: attributes are rendered as expected in templates and similar contexts."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 4,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-12039": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/backends/ddl_references.py": [
                        "def __init__(self, table, columns, quote_name, col_suffixes=()):",
                        "def col_str(column, idx):"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/ddl_references.py": [
                        "Added Line 123: col = '{} {}'.format(col, suffix)",
                        "Added Line 122: if suffix:",
                        "Added Line 121: suffix = self.col_suffixes[idx]",
                        "Added Line 92: pass",
                        "Deleted Line 87: return self.quote_name(column) + self.col_suffixes[idx]",
                        "Added Line 86: col = self.quote_name(column)",
                        "Deleted Line 117: col = '{} {}'.format(col, self.col_suffixes[idx])",
                        "Added Line 89: if suffix:",
                        "Added Line 93: return col",
                        "Deleted Line 89: return self.quote_name(column)",
                        "Added Line 88: suffix = self.col_suffixes[idx]",
                        "Added Line 90: col = '{} {}'.format(col, suffix)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11880": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/fields.py": [
                        "def __deepcopy__(self, memo):"
                    ]
                },
                "missing_lines": {
                    "django/forms/fields.py": [
                        "Added Line 202: result.error_messages = self.error_messages.copy()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11951": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/query.py": [
                        "def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/query.py": [
                        "Added Line 1212: max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)",
                        "Deleted Line 1212: batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))",
                        "Added Line 1213: batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11885": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/admin/utils.py"
                ],
                "missing_functions": {
                    "django/db/models/deletion.py": [
                        "def collect(self, objs, source=None, nullable=False, collect_related=True,",
                        "def add(self, objs, source=None, nullable=False, reverse_dependency=False):",
                        "def __init__(self, using):",
                        "def can_fast_delete(self, objs, from_field=None):",
                        "def add_field_update(self, field, value, objs):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/deletion.py": [
                        "Added Line 249: for related_model, related_fields in model_fast_deletes.items():",
                        "Deleted Line 242: ))",
                        "Added Line 162: def get_del_batches(self, objs, fields):",
                        "Added Line 252: sub_objs = self.related_objects(related_model, related_fields, batch)",
                        "Deleted Line 105: source._meta.concrete_model, set()).add(model._meta.concrete_model)",
                        "Deleted Line 218: # Preserve parent reverse relationships if keep_parents=True.",
                        "Deleted Line 238: if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):",
                        "Added Line 247: if sub_objs:",
                        "Added Line 1: import operator",
                        "Deleted Line 234: # deferring when some relationships are select_related",
                        "Added Line 70: self.data = defaultdict(set)",
                        "Added Line 250: batches = self.get_del_batches(new_objs, related_fields)",
                        "Deleted Line 254: Get a QuerySet of objects related to `objs` via the relation `related`.",
                        "Deleted Line 68: self.data = {}",
                        "Deleted Line 225: for batch in batches:",
                        "Added Line 228: related_model = related.related_model",
                        "Deleted Line 235: # as interactions between both features are hard to",
                        "Deleted Line 241: for rel in get_candidate_relations_to_delete(related_model._meta)",
                        "Deleted Line 246: for field in model._meta.private_fields:",
                        "Deleted Line 256: return related.related_model._base_manager.using(self.using).filter(",
                        "Deleted Line 236: # get right. This should only happen in the rare",
                        "Deleted Line 237: # cases where .related_objects is overridden anyway.",
                        "Deleted Line 224: batches = self.get_del_batches(new_objs, field)",
                        "Deleted Line 93: instances = self.data.setdefault(model, set())",
                        "Deleted Line 217: for related in get_candidate_relations_to_delete(model._meta):",
                        "Added Line 256: # It's something like generic foreign key.",
                        "Deleted Line 140: model = type(objs)",
                        "Deleted Line 6: from django.db.models import signals, sql",
                        "Added Line 235: # Non-referenced fields can be deferred if no signal receivers",
                        "Added Line 225: field = related.field",
                        "Added Line 71: # {model: {(field, value): {instances}}}",
                        "Added Line 266: for related_field in related_fields",
                        "Added Line 254: for field in model._meta.private_fields:",
                        "Added Line 240: # the rare cases where .related_objects is overridden anyway.",
                        "Deleted Line 214: if collect_related:",
                        "Added Line 236: # are connected for the related model as they'll never be",
                        "Deleted Line 104: self.dependencies.setdefault(",
                        "Deleted Line 117: model, {}).setdefault(",
                        "Deleted Line 251: ",
                        "Added Line 237: # exposed to the user. Skip field deferring when some",
                        "Added Line 8: from django.db.models import query_utils, signals, sql",
                        "Deleted Line 220: continue",
                        "Deleted Line 250: self.collect(sub_objs, source=model, nullable=True)",
                        "Added Line 264: predicate = reduce(operator.or_, (",
                        "Deleted Line 228: self.fast_deletes.append(sub_objs)",
                        "Added Line 223: if keep_parents and related.model in parents:",
                        "Added Line 243: (rf.attname for rf in rel.field.foreign_related_fields)",
                        "Added Line 107: self.dependencies[source._meta.concrete_model].add(model._meta.concrete_model)",
                        "Added Line 217: ",
                        "Added Line 166: field_names = [field.name for field in fields]",
                        "Deleted Line 118: (field, value), set()).update(objs)",
                        "Deleted Line 162: def get_del_batches(self, objs, field):",
                        "Deleted Line 247: if hasattr(field, 'bulk_related_objects'):",
                        "Deleted Line 243: sub_objs = sub_objs.only(*tuple(referenced_fields))",
                        "Added Line 244: for rel in get_candidate_relations_to_delete(related_model._meta)",
                        "Added Line 267: ))",
                        "Deleted Line 249: sub_objs = field.bulk_related_objects(new_objs, self.using)",
                        "Added Line 262: Get a QuerySet of the related model to objs via related fields.",
                        "Added Line 241: if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):",
                        "Deleted Line 240: (rf.attname for rf in rel.field.foreign_related_fields)",
                        "Added Line 268: return related_model._base_manager.using(self.using).filter(predicate)",
                        "Deleted Line 216: parents = set(model._meta.get_parent_list())",
                        "Deleted Line 223: continue",
                        "Deleted Line 232: # receivers are connected for the related model as",
                        "Deleted Line 248: # It's something like generic foreign key.",
                        "Added Line 229: if self.can_fast_delete(related_model, from_field=field):",
                        "Added Line 96: instances = self.data[model]",
                        "Added Line 140: model = objs._meta.model",
                        "Deleted Line 229: else:",
                        "Added Line 245: ))",
                        "Added Line 238: # relationships are select_related as interactions between both",
                        "Deleted Line 257: **{\"%s__in\" % related.field.name: objs}",
                        "Deleted Line 69: self.field_updates = {}  # {model: {(field, value): {instances}}}",
                        "Added Line 3: from functools import partial, reduce",
                        "Added Line 2: from collections import Counter, defaultdict",
                        "Added Line 234: sub_objs = self.related_objects(related_model, [field], batch)",
                        "Deleted Line 231: # Non-referenced fields can be deferred if no signal",
                        "Added Line 259: ",
                        "Deleted Line 227: if self.can_fast_delete(sub_objs, from_field=field):",
                        "Added Line 242: referenced_fields = set(chain.from_iterable(",
                        "Deleted Line 244: if sub_objs:",
                        "Added Line 72: self.field_updates = defaultdict(partial(defaultdict, set))",
                        "Added Line 257: sub_objs = field.bulk_related_objects(new_objs, self.using)",
                        "Added Line 168: connections[self.using].ops.bulk_batch_size(field_names, objs), 1)",
                        "Added Line 251: for batch in batches:",
                        "Added Line 227: continue",
                        "Deleted Line 245: field.remote_field.on_delete(self, field, sub_objs, self.using)",
                        "Added Line 239: # features are hard to get right. This should only happen in",
                        "Added Line 260: def related_objects(self, related_model, related_fields, objs):",
                        "Deleted Line 233: # they'll never be exposed to the user. Skip field",
                        "Added Line 253: self.fast_deletes.append(sub_objs)",
                        "Added Line 265: query_utils.Q(**{'%s__in' % related_field.name: objs})",
                        "Added Line 82: self.dependencies = defaultdict(set)  # {model: {models}}",
                        "Deleted Line 239: referenced_fields = set(chain.from_iterable(",
                        "Added Line 226: if field.remote_field.on_delete == DO_NOTHING:",
                        "Added Line 222: # Preserve parent reverse relationships if keep_parents=True.",
                        "Added Line 248: field.remote_field.on_delete(self, field, sub_objs, self.using)",
                        "Added Line 255: if hasattr(field, 'bulk_related_objects'):",
                        "Deleted Line 79: self.dependencies = {}  # {model: {models}}",
                        "Deleted Line 215: if keep_parents:",
                        "Deleted Line 1: from collections import Counter",
                        "Deleted Line 221: field = related.field",
                        "Added Line 216: return",
                        "Deleted Line 167: connections[self.using].ops.bulk_batch_size([field.name], objs), 1)",
                        "Deleted Line 230: related_model = related.related_model",
                        "Deleted Line 222: if field.remote_field.on_delete == DO_NOTHING:",
                        "Deleted Line 252: def related_objects(self, related, objs):",
                        "Added Line 221: for related in get_candidate_relations_to_delete(model._meta):",
                        "Deleted Line 219: if keep_parents and related.model in parents:",
                        "Added Line 233: for batch in batches:",
                        "Added Line 224: continue",
                        "Deleted Line 258: )",
                        "Deleted Line 116: self.field_updates.setdefault(",
                        "Added Line 219: parents = set(model._meta.get_parent_list())",
                        "Added Line 118: self.field_updates[model][field, value].update(objs)",
                        "Added Line 232: batches = self.get_del_batches(new_objs, [field])",
                        "Added Line 258: self.collect(sub_objs, source=model, nullable=True)",
                        "Added Line 215: if not collect_related:",
                        "Added Line 246: sub_objs = sub_objs.only(*tuple(referenced_fields))",
                        "Added Line 230: model_fast_deletes[related_model].append(field)",
                        "Added Line 218: if keep_parents:",
                        "Added Line 231: continue",
                        "Added Line 220: model_fast_deletes = defaultdict(list)",
                        "Deleted Line 226: sub_objs = self.related_objects(related, batch)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    },
                    "lines": {
                        "total": 130,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12050": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/query.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 19,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12155": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/admindocs/views.py"
                ],
                "missing_functions": {
                    "django/contrib/admindocs/utils.py": [
                        "def get_view_name(view_func):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admindocs/utils.py": [
                        "Deleted Line 29: Uniformly trim leading/trailing whitespace from docstrings.",
                        "Deleted Line 31: Based on https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation",
                        "Added Line 6: from inspect import cleandoc",
                        "Added Line 32: if not docstring:",
                        "Deleted Line 27: def trim_docstring(docstring):",
                        "Deleted Line 36: lines = docstring.expandtabs().splitlines()",
                        "Deleted Line 38: trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]",
                        "Deleted Line 33: if not docstring or not docstring.strip():",
                        "Deleted Line 39: return \"\\n\".join(trimmed).strip()",
                        "Deleted Line 46: docstring = trim_docstring(docstring)",
                        "Deleted Line 30: ",
                        "Deleted Line 32: \"\"\"",
                        "Added Line 34: docstring = cleandoc(docstring)",
                        "Deleted Line 34: return ''",
                        "Deleted Line 28: \"\"\"",
                        "Deleted Line 41: ",
                        "Added Line 33: return '', '', {}",
                        "Deleted Line 40: ",
                        "Deleted Line 35: # Convert tabs to spaces and split into lines"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 23,
                        "covered": 1,
                        "percentage": 4.3478260869565215
                    }
                }
            }
        },
        "django__django-11999": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/fields/__init__.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12125": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/serializer.py": [
                        "def serialize(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/serializer.py": [
                        "Added Line 272: return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}",
                        "Deleted Line 272: return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12143": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/options.py": [
                        "def change_view(self, request, object_id, form_url='', extra_context=None):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/options.py": [
                        "Added Line 1635: r'{}-\\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name)",
                        "Added Line 1636: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-12304": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/enums.py": [
                        "def __new__(metacls, classname, bases, classdict):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/enums.py": [
                        "Added Line 34: cls.do_not_call_in_templates = True"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12262": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/template/library.py": [
                        "Deleted Line 264: if param not in params and param not in unhandled_kwargs and varkw is None:",
                        "Added Line 264: if param not in params and param not in kwonly and varkw is None:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12276": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/widgets.py": [
                        "def value_from_datadict(self, data, files, name):"
                    ]
                },
                "missing_lines": {
                    "django/forms/widgets.py": [
                        "Added Line 392: ",
                        "Deleted Line 456: ",
                        "Deleted Line 454: def use_required_attribute(self, initial):",
                        "Deleted Line 455: return super().use_required_attribute(initial) and not initial",
                        "Added Line 391: return super().use_required_attribute(initial) and not initial",
                        "Added Line 390: def use_required_attribute(self, initial):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12308": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/contrib/admin/utils.py": [
                        "Added Line 404: except TypeError:",
                        "Added Line 405: return display_for_value(value, empty_value_display)",
                        "Added Line 403: return field.get_prep_value(value)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-12419": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/conf/global_settings.py": [
                        "def gettext_noop(s):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-12193": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/forms/widgets.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12209": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/base.py": [
                        "def _save_table(self, raw=False, cls=None, force_insert=False,"
                    ]
                },
                "missing_lines": {
                    "django/db/models/base.py": [
                        "Added Line 852: not raw and"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12741": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/core/management/commands/flush.py"
                ],
                "missing_functions": {
                    "django/db/backends/base/operations.py": [
                        "def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/base/operations.py": [
                        "Added Line 406: using=self.connection.alias,",
                        "Added Line 408: ):",
                        "Added Line 407: savepoint=self.connection.features.can_rollback_ddl,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 4,
                        "percentage": 44.44444444444444
                    }
                }
            }
        },
        "django__django-12406": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/fields/related.py"
                ],
                "missing_functions": {},
                "missing_lines": {
                    "django/forms/models.py": [
                        "Added Line 1194: if (",
                        "Deleted Line 16: HiddenInput, MultipleHiddenInput, SelectMultiple,",
                        "Added Line 1199: else:",
                        "Deleted Line 1187: **kwargs):",
                        "Added Line 1195: (required and initial is not None) or",
                        "Deleted Line 1192: ",
                        "Added Line 1197: ):",
                        "Deleted Line 1189: self.empty_label = None",
                        "Deleted Line 1190: else:",
                        "Added Line 1198: self.empty_label = None",
                        "Added Line 1200: self.empty_label = empty_label",
                        "Deleted Line 1191: self.empty_label = empty_label",
                        "Added Line 1187: blank=False, **kwargs):",
                        "Added Line 16: HiddenInput, MultipleHiddenInput, RadioSelect, SelectMultiple,",
                        "Added Line 1196: (isinstance(self.widget, RadioSelect) and not blank)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 1,
                        "percentage": 5.88235294117647
                    }
                }
            }
        },
        "django__django-12273": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/base.py": [
                        "def _get_pk_val(self, meta=None):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/base.py": [
                        "Added Line 574: setattr(self, parent_link.target_field.attname, value)",
                        "Added Line 573: if parent_link and parent_link != self._meta.pk:",
                        "Added Line 572: for parent_link in self._meta.parents.values():"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12713": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/options.py": [
                        "def formfield_for_manytomany(self, db_field, request, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/options.py": [
                        "Added Line 265: )",
                        "Added Line 270: )",
                        "Added Line 266: elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:",
                        "Added Line 268: db_field.verbose_name,",
                        "Added Line 263: self.admin_site,",
                        "Added Line 269: db_field.name in self.filter_vertical",
                        "Added Line 264: using=db,",
                        "Deleted Line 262: ",
                        "Added Line 267: kwargs['widget'] = widgets.FilteredSelectMultiple("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 30,
                        "covered": 21,
                        "percentage": 70.0
                    }
                }
            }
        },
        "django__django-12708": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/backends/base/schema.py": [
                        "def alter_index_together(self, model, old_index_together, new_index_together):"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/base/schema.py": [
                        "Added Line 401: )",
                        "Deleted Line 396: self._delete_composed_index(model, fields, {'index': True}, self.sql_delete_index)",
                        "Added Line 396: self._delete_composed_index(",
                        "Added Line 398: fields,",
                        "Added Line 399: {'index': True, 'unique': False},",
                        "Added Line 397: model,",
                        "Added Line 400: self.sql_delete_index,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12754": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/autodetector.py": [
                        "def generate_created_models(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/autodetector.py": [
                        "Added Line 569: new_base_model_state = self.to_state.models.get((base_app_label, base_name))",
                        "Added Line 571: removed_base_fields = set(old_base_model_state.fields).difference(",
                        "Added Line 575: dependencies.append((base_app_label, base_name, removed_base_field, False))",
                        "Added Line 573: ).intersection(model_state.fields)",
                        "Added Line 570: if old_base_model_state and new_base_model_state:",
                        "Added Line 572: new_base_model_state.fields,",
                        "Added Line 568: old_base_model_state = self.from_state.models.get((base_app_label, base_name))",
                        "Added Line 567: # a field with the same name.",
                        "Added Line 574: for removed_base_field in removed_base_fields:",
                        "Added Line 566: # Depend on the removal of base fields if the new model has"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12663": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/query.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12858": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/base.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12774": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/query.py": [
                        "def in_bulk(self, id_list=None, *, field_name='pk'):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/query.py": [
                        "Added Line 700: not opts.get_field(field_name).unique and",
                        "Added Line 701: field_name not in unique_fields",
                        "Added Line 702: ):",
                        "Added Line 699: field_name != 'pk' and"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 8,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "django__django-12325": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/options.py"
                ],
                "missing_functions": {
                    "django/db/models/base.py": [
                        "def __new__(cls, name, bases, attrs, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/base.py": [
                        "Deleted Line 205: if isinstance(field, OneToOneField):",
                        "Added Line 205: if isinstance(field, OneToOneField) and field.remote_field.parent_link:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13089": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/cache/backends/db.py": [
                        "def _cull(self, db, cursor, now):"
                    ]
                },
                "missing_lines": {
                    "django/core/cache/backends/db.py": [
                        "Added Line 275: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 8,
                        "percentage": 88.88888888888889
                    }
                }
            }
        },
        "django__django-13121": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/mysql/operations.py",
                    "django/db/backends/sqlite3/operations.py",
                    "django/db/models/expressions.py"
                ],
                "missing_functions": {
                    "django/db/backends/base/operations.py": [
                        "def date_extract_sql(self, lookup_type, field_name):"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/base/operations.py": [
                        "Deleted Line 103: \"\"\"",
                        "Deleted Line 106: raise NotImplementedError('subclasses of BaseDatabaseOperations may require a date_interval_sql() method')",
                        "Deleted Line 105: \"\"\"",
                        "Deleted Line 107: ",
                        "Deleted Line 102: def date_interval_sql(self, timedelta):",
                        "Deleted Line 104: Implement the date interval functionality for expressions."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 70,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12965": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/compiler.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13023": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/__init__.py": [
                        "def to_python(self, value):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/__init__.py": [
                        "Deleted Line 1504: except decimal.InvalidOperation:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-13012": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/expressions.py": [
                        "def set_source_expressions(self, exprs):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/expressions.py": [
                        "Added Line 868: ",
                        "Added Line 866: def get_group_by_cols(self, alias=None):",
                        "Added Line 867: return self.expression.get_group_by_cols(alias=alias)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13109": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/related.py": [
                        "def validate(self, value, model_instance):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-13028": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/sql/query.py": [
                        "def check_related_objects(self, field, value, opts):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/sql/query.py": [
                        "Added Line 1128: hasattr(expression, 'resolve_expression') and",
                        "Added Line 1129: not getattr(expression, 'filterable', True)",
                        "Added Line 1130: ):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-13195": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/messages/storage/cookie.py",
                    "django/contrib/sessions/middleware.py"
                ],
                "missing_functions": {
                    "django/http/response.py": [
                        "def set_signed_cookie(self, key, value, salt='', **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/http/response.py": [
                        "Added Line 215: # the secure flag and:",
                        "Deleted Line 215: # with __Host- or __Secure- and the cookie doesn't use the secure flag.",
                        "Added Line 224: expires='Thu, 01 Jan 1970 00:00:00 GMT', samesite=samesite,",
                        "Added Line 216: # - the cookie name starts with \"__Host-\" or \"__Secure-\", or",
                        "Added Line 217: # - the samesite is \"none\".",
                        "Added Line 213: def delete_cookie(self, key, path='/', domain=None, samesite=None):",
                        "Added Line 219: key.startswith(('__Secure-', '__Host-')) or",
                        "Deleted Line 216: secure = key.startswith(('__Secure-', '__Host-'))",
                        "Deleted Line 214: # Most browsers ignore the Set-Cookie header if the cookie name starts",
                        "Added Line 218: secure = (",
                        "Deleted Line 213: def delete_cookie(self, key, path='/', domain=None):",
                        "Added Line 221: )",
                        "Deleted Line 219: expires='Thu, 01 Jan 1970 00:00:00 GMT',",
                        "Added Line 214: # Browsers can ignore the Set-Cookie header if the cookie doesn't use"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 1,
                        "percentage": 4.545454545454546
                    }
                }
            }
        },
        "django__django-13033": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/sql/compiler.py": [
                        "def find_ordering_name(self, name, opts, alias=None, default_order='ASC',"
                    ]
                },
                "missing_lines": {
                    "django/db/models/sql/compiler.py": [
                        "Deleted Line 730: if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':",
                        "Added Line 732: opts.ordering and",
                        "Added Line 734: name != 'pk'",
                        "Added Line 730: if (",
                        "Added Line 735: ):",
                        "Added Line 731: field.is_relation and",
                        "Added Line 733: getattr(field, 'attname', None) != pieces[-1] and"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13279": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/sessions/backends/base.py": [
                        "def decode(self, session_data):",
                        "def _hash(self, value):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/sessions/backends/base.py": [
                        "Added Line 127: def _legacy_encode(self, session_dict):",
                        "Added Line 132: ",
                        "Added Line 128: # RemovedInDjango40Warning.",
                        "Added Line 129: serialized = self.serializer().dumps(session_dict)",
                        "Added Line 130: hash = self._hash(serialized)",
                        "Added Line 131: return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 3,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-13128": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/expressions.py": [
                        "def compile(self, side, compiler, connection):",
                        "def set_source_expressions(self, exprs):",
                        "def as_sql(self, compiler, connection):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/expressions.py": [
                        "Added Line 477: return TemporalSubtraction(self.lhs, self.rhs).resolve_expression(",
                        "Added Line 468: rhs_type = rhs.output_field.get_internal_type()",
                        "Deleted Line 458: ):",
                        "Added Line 471: if 'DurationField' in {lhs_type, rhs_type} and lhs_type != rhs_type:",
                        "Deleted Line 454: if (",
                        "Deleted Line 446: try:",
                        "Added Line 462: if not isinstance(self, (DurationExpression, TemporalSubtraction)):",
                        "Deleted Line 453: rhs_type = None",
                        "Added Line 478: query, allow_joins, reuse, summarize, for_save,",
                        "Added Line 472: return DurationExpression(self.lhs, self.connector, self.rhs).resolve_expression(",
                        "Added Line 476: if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:",
                        "Added Line 463: try:",
                        "Added Line 479: )",
                        "Deleted Line 479: c.lhs = c.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)",
                        "Added Line 466: lhs_type = None",
                        "Deleted Line 480: c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)",
                        "Added Line 482: c.lhs = lhs",
                        "Added Line 465: except (AttributeError, FieldError):",
                        "Added Line 483: c.rhs = rhs",
                        "Deleted Line 455: not connection.features.has_native_duration_field and",
                        "Deleted Line 447: lhs_type = self.lhs.output_field.get_internal_type()",
                        "Deleted Line 448: except FieldError:",
                        "Added Line 467: try:",
                        "Deleted Line 456: 'DurationField' in {lhs_type, rhs_type} and",
                        "Deleted Line 452: except FieldError:",
                        "Deleted Line 450: try:",
                        "Added Line 501: return super().as_sql(compiler, connection)",
                        "Added Line 500: if connection.features.has_native_duration_field:",
                        "Deleted Line 462: return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)",
                        "Deleted Line 459: return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)",
                        "Deleted Line 451: rhs_type = self.rhs.output_field.get_internal_type()",
                        "Deleted Line 457: lhs_type != rhs_type",
                        "Added Line 475: datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}",
                        "Added Line 474: )",
                        "Deleted Line 449: lhs_type = None",
                        "Added Line 473: query, allow_joins, reuse, summarize, for_save,",
                        "Deleted Line 460: datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}",
                        "Added Line 460: lhs = self.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)",
                        "Added Line 464: lhs_type = lhs.output_field.get_internal_type()",
                        "Added Line 470: rhs_type = None",
                        "Added Line 469: except (AttributeError, FieldError):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 43,
                        "covered": 2,
                        "percentage": 4.651162790697675
                    }
                }
            }
        },
        "django__django-13297": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/views/generic/base.py": [
                        "def access_value(key=key, value=value):"
                    ]
                },
                "missing_lines": {
                    "django/views/generic/base.py": [
                        "Added Line 14: from django.utils.functional import lazy",
                        "Deleted Line 14: from django.utils.functional import SimpleLazyObject",
                        "Added Line 180: context_kwargs[key] = lazy(access_value, type(value))()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-13343": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/files.py": [
                        "def deconstruct(self):",
                        "def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **k"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/files.py": [
                        "Added Line 233: self._storage_callable = self.storage",
                        "Added Line 232: # Hold a reference to the callable for deconstruct()."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-13158": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/query.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13344": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/sessions/middleware.py",
                    "django/middleware/cache.py",
                    "django/middleware/security.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 32,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13212": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/forms/fields.py"
                ],
                "missing_functions": {
                    "django/core/validators.py": [
                        "def __init__(self, message=None, code=None, allowlist=None, *, whitelist=None):",
                        "def __call__(self, value):",
                        "def validate_ipv46_address(value):",
                        "def __init__(self, max_digits, decimal_places):",
                        "def __init__(self, message=None, code=None):",
                        "def validate_ipv4_address(value):",
                        "def __init__(self, schemes=None, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/core/validators.py": [
                        "Deleted Line 463: params={'max': self.max_digits},",
                        "Deleted Line 290: raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')",
                        "Deleted Line 275: raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')",
                        "Added Line 476: params={'max': (self.max_digits - self.decimal_places), 'value': value},",
                        "Added Line 463: params={'max': self.max_digits, 'value': value},",
                        "Added Line 441: raise ValidationError(self.messages['invalid'], code='invalid', params={'value': value})",
                        "Deleted Line 476: params={'max': (self.max_digits - self.decimal_places)},",
                        "Deleted Line 469: params={'max': self.decimal_places},",
                        "Added Line 513: 'value': value,",
                        "Deleted Line 280: raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')",
                        "Added Line 135: raise ValidationError(self.message, code=self.code, params={'value': value})",
                        "Deleted Line 135: raise ValidationError(self.message, code=self.code)",
                        "Deleted Line 512: 'allowed_extensions': ', '.join(self.allowed_extensions)",
                        "Added Line 512: 'allowed_extensions': ', '.join(self.allowed_extensions),",
                        "Added Line 280: raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid', params={'value': value})",
                        "Added Line 554: raise ValidationError(self.message, code=self.code, params={'value': value})",
                        "Added Line 118: raise ValidationError(self.message, code=self.code, params={'value': value})",
                        "Deleted Line 118: raise ValidationError(self.message, code=self.code)",
                        "Added Line 275: raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})",
                        "Deleted Line 441: raise ValidationError(self.messages['invalid'])",
                        "Added Line 290: raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid', params={'value': value})",
                        "Added Line 469: params={'max': self.decimal_places, 'value': value},"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 44,
                        "covered": 15,
                        "percentage": 34.090909090909086
                    }
                }
            }
        },
        "django__django-13363": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 4,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-13112": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/fields/related.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13410": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/files/locks.py": [
                        "def unlock(f):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 11,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-13315": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/models.py": [
                        "def model_to_dict(instance, fields=None, exclude=None):"
                    ]
                },
                "missing_lines": {
                    "django/forms/models.py": [
                        "Added Line 100: from django.db.models import Exists, OuterRef, Q",
                        "Added Line 110: Exists(formfield.queryset.model._base_manager.filter(complex_filter)),",
                        "Added Line 107: complex_filter &= Q(pk=OuterRef('pk'))",
                        "Added Line 106: complex_filter = Q(**limit_choices_to)",
                        "Added Line 108: # Use Exists() to avoid potential duplicates.",
                        "Added Line 109: formfield.queryset = formfield.queryset.filter(",
                        "Added Line 105: if not isinstance(complex_filter, Q):",
                        "Deleted Line 102: if limit_choices_to is not None:",
                        "Added Line 104: complex_filter = limit_choices_to",
                        "Added Line 111: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 2,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "django__django-13512": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/admin/utils.py",
                    "django/forms/fields.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13513": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/views/debug.py": [
                        "def explicit_or_implicit_cause(exc_value):",
                        "def _get_lines_from_file(self, filename, lineno, context_lines, loader=None, mod"
                    ]
                },
                "missing_lines": {
                    "django/views/debug.py": [
                        "Deleted Line 463: # If the traceback for current exception is consumed, try the",
                        "Deleted Line 471: return frames",
                        "Added Line 434: ",
                        "Added Line 472: }",
                        "Added Line 459: 'exc_cause': exc_cause,",
                        "Added Line 427: frames.extend(self.get_exception_traceback_frames(exc_value, tb))",
                        "Deleted Line 399: explicit = getattr(exc_value, '__cause__', None)",
                        "Deleted Line 461: })",
                        "Added Line 436: exc_cause = self._get_explicit_or_implicit_cause(exc_value)",
                        "Added Line 431: self.get_exception_traceback_frames(exc_value, exc_value.__traceback__),",
                        "Added Line 458: yield {",
                        "Deleted Line 447: frames.append({",
                        "Added Line 435: def get_exception_traceback_frames(self, exc_value, tb):",
                        "Added Line 432: )",
                        "Deleted Line 469: tb = tb.tb_next",
                        "Added Line 437: exc_cause_explicit = getattr(exc_value, '__cause__', True)",
                        "Deleted Line 448: 'exc_cause': explicit_or_implicit_cause(exc_value),",
                        "Deleted Line 467: tb = exc_value.__traceback__",
                        "Deleted Line 470: ",
                        "Added Line 409: exc_value = self._get_explicit_or_implicit_cause(exc_value)",
                        "Deleted Line 464: # other exception.",
                        "Added Line 403: def get_traceback_frames(self):",
                        "Deleted Line 397: def get_traceback_frames(self):",
                        "Added Line 397: def _get_explicit_or_implicit_cause(self, exc_value):",
                        "Added Line 429: exc_value = exceptions.pop()",
                        "Added Line 430: frames.extend(",
                        "Added Line 428: while exceptions:",
                        "Deleted Line 466: exc_value = exceptions.pop()",
                        "Deleted Line 462: ",
                        "Deleted Line 409: exc_value = explicit_or_implicit_cause(exc_value)",
                        "Deleted Line 468: else:",
                        "Deleted Line 465: if not tb.tb_next and exceptions:",
                        "Deleted Line 398: def explicit_or_implicit_cause(exc_value):",
                        "Added Line 433: return frames",
                        "Deleted Line 449: 'exc_cause_explicit': getattr(exc_value, '__cause__', True),",
                        "Added Line 473: tb = tb.tb_next",
                        "Added Line 399: suppress_context = getattr(exc_value, '__suppress_context__', None)",
                        "Added Line 460: 'exc_cause_explicit': exc_cause_explicit,",
                        "Added Line 398: explicit = getattr(exc_value, '__cause__', None)",
                        "Added Line 400: implicit = getattr(exc_value, '__context__', None)",
                        "Deleted Line 401: implicit = getattr(exc_value, '__context__', None)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 44,
                        "covered": 3,
                        "percentage": 6.8181818181818175
                    }
                }
            }
        },
        "django__django-13551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/auth/tokens.py": [
                        "def _make_hash_value(self, user, timestamp):",
                        "def _make_token_with_timestamp(self, user, timestamp, legacy=False):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/auth/tokens.py": [
                        "Added Line 82: that's sure to change after a password reset to produce a token that is",
                        "Added Line 99: return f'{user.pk}{user.password}{login_timestamp}{timestamp}{email}'",
                        "Added Line 98: email = getattr(user, email_field, '') or ''",
                        "Added Line 83: invalidated when it's used:",
                        "Deleted Line 82: after a password reset to produce a token that invalidated when it's",
                        "Deleted Line 83: used:",
                        "Added Line 81: Hash the user's primary key, email (if available), and some user state",
                        "Deleted Line 81: Hash the user's primary key and some user state that's sure to change"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-13516": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/base.py": [
                        "def __init__(self, out, ending='\\n'):"
                    ]
                },
                "missing_lines": {
                    "django/core/management/base.py": [
                        "Added Line 146: ",
                        "Added Line 144: if hasattr(self._out, 'flush'):",
                        "Added Line 145: self._out.flush()",
                        "Added Line 143: def flush(self):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13449": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/expressions.py": [
                        "def as_sql(self, compiler, connection, template=None):",
                        "def desc(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/expressions.py": [
                        "Added Line 1336: if isinstance(self.output_field, fields.DecimalField):",
                        "Added Line 1339: source_expressions = copy.get_source_expressions()",
                        "Added Line 1340: source_expressions[0].output_field = fields.FloatField()",
                        "Added Line 1335: def as_sqlite(self, compiler, connection):",
                        "Added Line 1341: copy.set_source_expressions(source_expressions)",
                        "Added Line 1343: return self.as_sql(compiler, connection)",
                        "Added Line 1337: # Casting to numeric must be outside of the window expression.",
                        "Added Line 1256: class Window(SQLiteNumericMixin, Expression):",
                        "Deleted Line 1256: class Window(Expression):",
                        "Added Line 1342: return super(Window, copy).as_sqlite(compiler, connection)",
                        "Added Line 1338: copy = self.copy()",
                        "Added Line 1344: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13346": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/json.py": [
                        "class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual",
                        "def as_sqlite(self, compiler, connection):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/json.py": [
                        "Added Line 381: class KeyTransformIn(lookups.In):",
                        "Added Line 396: rhs_params = ()",
                        "Added Line 382: def process_rhs(self, compiler, connection):",
                        "Added Line 393: json.dumps({'value': value}),",
                        "Added Line 404: ",
                        "Added Line 390: function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'",
                        "Added Line 383: rhs, rhs_params = super().process_rhs(compiler, connection)",
                        "Added Line 389: value = json.loads(value)",
                        "Added Line 385: func = ()",
                        "Added Line 394: ))",
                        "Added Line 506: KeyTransform.register_lookup(KeyTransformIn)",
                        "Added Line 384: if not connection.features.has_native_json_field:",
                        "Added Line 392: function,",
                        "Added Line 402: return rhs, rhs_params",
                        "Added Line 391: func.append(\"%s('%s', '$.value')\" % (",
                        "Added Line 403: ",
                        "Added Line 400: func = (\"JSON_EXTRACT(%s, '$')\",) * len(rhs_params)",
                        "Added Line 397: elif connection.vendor == 'mysql' and connection.mysql_is_mariadb:",
                        "Added Line 387: func = []",
                        "Added Line 401: rhs = rhs % func",
                        "Added Line 399: elif connection.vendor in {'sqlite', 'mysql'}:",
                        "Added Line 395: func = tuple(func)",
                        "Added Line 398: func = (\"JSON_UNQUOTE(JSON_EXTRACT(%s, '$'))\",) * len(rhs_params)",
                        "Added Line 388: for value in rhs_params:",
                        "Added Line 386: if connection.vendor == 'oracle':"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13568": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/contrib/auth/checks.py": [
                        "Deleted Line 55: if not cls._meta.get_field(cls.USERNAME_FIELD).unique:",
                        "Added Line 56: constraint.fields == (cls.USERNAME_FIELD,)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 3,
                        "percentage": 60.0
                    }
                }
            }
        },
        "django__django-13406": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/query.py": [
                        "def query(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/query.py": [
                        "Added Line 214: self._iterable_class = ValuesIterable",
                        "Added Line 213: if value.values_select:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13401": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/__init__.py": [
                        "def clone(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/__init__.py": [
                        "Added Line 532: ):",
                        "Added Line 540: (other.model._meta.app_label, other.model._meta.model_name)",
                        "Added Line 531: not hasattr(self, 'model') and not hasattr(other, 'model')",
                        "Added Line 538: return (",
                        "Added Line 520: self.creation_counter == other.creation_counter and",
                        "Added Line 537: # creation_counter's are equal, compare only models.",
                        "Added Line 549: ))",
                        "Added Line 547: self.model._meta.app_label if hasattr(self, 'model') else None,",
                        "Added Line 548: self.model._meta.model_name if hasattr(self, 'model') else None,",
                        "Added Line 541: )",
                        "Added Line 546: self.creation_counter,",
                        "Added Line 533: return self.creation_counter < other.creation_counter",
                        "Added Line 539: (self.model._meta.app_label, self.model._meta.model_name) <",
                        "Added Line 521: getattr(self, 'model', None) == getattr(other, 'model', None)",
                        "Added Line 536: else:",
                        "Added Line 530: self.creation_counter != other.creation_counter or",
                        "Added Line 527: # Order by creation_counter first for backward compatibility.",
                        "Added Line 545: return hash((",
                        "Added Line 535: return not hasattr(self, 'model')  # Order no-model fields first",
                        "Added Line 522: )",
                        "Added Line 534: elif hasattr(self, 'model') != hasattr(other, 'model'):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 26,
                        "covered": 5,
                        "percentage": 19.230769230769234
                    }
                }
            }
        },
        "django__django-13670": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/utils/dateformat.py": [
                        "def W(self):"
                    ]
                },
                "missing_lines": {
                    "django/utils/dateformat.py": [
                        "Deleted Line 328: \"Year, 2 digits; e.g. '99'\"",
                        "Added Line 328: \"\"\"Year, 2 digits with leading zeros; e.g. '99'.\"\"\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-13658": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/__init__.py": [
                        "def execute(self):"
                    ]
                },
                "missing_lines": {
                    "django/core/management/__init__.py": [
                        "Added Line 352: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 6,
                        "percentage": 85.71428571428571
                    }
                }
            }
        },
        "django__django-13417": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/query.py": [
                        "def ordered(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/query.py": [
                        "Added Line 1228: self.query.default_ordering and",
                        "Added Line 1230: # A default ordering doesn't affect GROUP BY queries.",
                        "Added Line 1229: self.query.get_meta().ordering and",
                        "Added Line 1232: ):",
                        "Added Line 1231: not self.query.group_by"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-13741": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/auth/forms.py": [
                        "def __init__(self, *args, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/auth/forms.py": [
                        "Deleted Line 62: # Always return initial because the widget doesn't",
                        "Deleted Line 64: return initial",
                        "Deleted Line 65: ",
                        "Deleted Line 166: def clean_password(self):",
                        "Deleted Line 171: ",
                        "Deleted Line 167: # Regardless of what the user provides, return the initial value.",
                        "Deleted Line 170: return self.initial.get('password')",
                        "Deleted Line 68: ",
                        "Deleted Line 61: def bound_data(self, data, initial):",
                        "Deleted Line 67: return False",
                        "Deleted Line 168: # This is done here, rather than on the field, because the",
                        "Deleted Line 169: # field does not have access to the initial value",
                        "Deleted Line 66: def has_changed(self, initial, data):",
                        "Deleted Line 63: # render an input field."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 1,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "django__django-13786": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/operations/models.py": [
                        "def reduce(self, operation, app_label):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/operations/models.py": [
                        "Added Line 148: options=options,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 5,
                        "percentage": 83.33333333333334
                    }
                }
            }
        },
        "django__django-13794": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/utils/functional.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13807": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/backends/sqlite3/base.py": [
                        "def check_constraints(self, table_names=None):"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/sqlite3/base.py": [
                        "Added Line 347: self.ops.quote_name(table_name),",
                        "Added Line 331: 'PRAGMA foreign_key_check(%s)'",
                        "Added Line 339: 'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)",
                        "Added Line 333: ).fetchall()",
                        "Added Line 332: % self.ops.quote_name(table_name)",
                        "Deleted Line 342: primary_key_column_name, column_name, table_name",
                        "Added Line 345: self.ops.quote_name(primary_key_column_name),",
                        "Added Line 346: self.ops.quote_name(column_name),"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 3,
                        "percentage": 27.27272727272727
                    }
                }
            }
        },
        "django__django-13590": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/sql/query.py": [
                        "def resolve_lookup_value(self, value, can_reuse, allow_joins):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/sql/query.py": [
                        "Deleted Line 1080: return type(value)(",
                        "Added Line 1085: if hasattr(type_, '_make'):  # namedtuple",
                        "Added Line 1084: type_ = type(value)",
                        "Added Line 1087: return type_(values)",
                        "Added Line 1086: return type_(*values)",
                        "Added Line 1080: values = ("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13809": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/commands/runserver.py": [
                        "def add_arguments(self, parser):",
                        "def inner_run(self, *args, **options):"
                    ]
                },
                "missing_lines": {
                    "django/core/management/commands/runserver.py": [
                        "Added Line 123: self.check(display_num_errors=True)",
                        "Added Line 122: self.stdout.write('Performing system checks...\\n\\n')",
                        "Added Line 121: if not options['skip_checks']:",
                        "Added Line 57: )",
                        "Added Line 56: help='Skip system checks.',",
                        "Added Line 55: '--skip-checks', action='store_true',",
                        "Added Line 54: parser.add_argument("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "django__django-13810": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/handlers/base.py": [
                        "def load_middleware(self, is_async=False):"
                    ]
                },
                "missing_lines": {
                    "django/core/handlers/base.py": [
                        "Added Line 67: handler = adapted_handler"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 5,
                        "percentage": 83.33333333333334
                    }
                }
            }
        },
        "django__django-13569": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/functions/math.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13820": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/loader.py": [
                        "def load_disk(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/loader.py": [
                        "Deleted Line 94: self.unmigrated_apps.add(app_config.label)",
                        "Added Line 96: # __file__ and don't use a list for __path__. See",
                        "Added Line 99: getattr(module, '__file__', None) is None and",
                        "Added Line 97: # https://docs.python.org/3/reference/import.html#namespace-packages",
                        "Added Line 100: not isinstance(module.__path__, list)",
                        "Deleted Line 91: # Empty directories are namespaces.",
                        "Deleted Line 95: continue",
                        "Added Line 102: self.unmigrated_apps.add(app_config.label)",
                        "Added Line 98: if (",
                        "Added Line 103: continue",
                        "Added Line 95: # Empty directories are namespaces. Namespace packages have no",
                        "Deleted Line 92: # getattr() needed on PY36 and older (replace w/attribute access).",
                        "Added Line 101: ):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 1,
                        "percentage": 7.142857142857142
                    }
                }
            }
        },
        "django__django-13821": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/db/backends/sqlite3/base.py": [
                        "Added Line 69: 'SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version",
                        "Added Line 70: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 4,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "django__django-13837": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/utils/autoreload.py": [
                        "Added Line 223: # __spec__ is set when the server was started with the `-m` option,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 9,
                        "percentage": 90.0
                    }
                }
            }
        },
        "django__django-14089": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/utils/datastructures.py": [
                        "def discard(self, item):"
                    ]
                },
                "missing_lines": {
                    "django/utils/datastructures.py": [
                        "Added Line 28: def __reversed__(self):",
                        "Added Line 30: ",
                        "Added Line 29: return reversed(self.dict)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14011": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/sqlite3/features.py"
                ],
                "missing_functions": {},
                "missing_lines": {
                    "django/core/servers/basehttp.py": [
                        "Added Line 105: super().close_request(request)",
                        "Added Line 96: connections[alias] = conn",
                        "Added Line 97: super().process_request_thread(request, client_address)",
                        "Added Line 92: if self.connections_override:",
                        "Added Line 95: for alias, conn in self.connections_override.items():",
                        "Added Line 93: # Override this thread's database connections with the ones",
                        "Added Line 104: self._close_connections()",
                        "Added Line 99: def _close_connections(self):",
                        "Added Line 106: ",
                        "Added Line 102: ",
                        "Added Line 19: from django.db import connections",
                        "Added Line 94: # provided by the parent thread.",
                        "Added Line 100: # Used for mocking in tests.",
                        "Added Line 103: def close_request(self, request):",
                        "Added Line 98: ",
                        "Added Line 101: connections.close_all()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 7,
                        "percentage": 29.166666666666668
                    }
                }
            }
        },
        "django__django-13925": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/base.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14053": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/staticfiles/storage.py": [
                        "def post_process(self, paths, dry_run=False, **options):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/staticfiles/storage.py": [
                        "Added Line 236: if name not in adjustable_paths or isinstance(processed, Exception):",
                        "Added Line 229: ",
                        "Deleted Line 229: # Do a single pass first. Post-process all files once, then repeat for",
                        "Deleted Line 230: # adjustable files.",
                        "Added Line 237: yield name, hashed_name, processed",
                        "Added Line 247: processed_adjustable_paths[name] = (name, hashed_name, processed)",
                        "Added Line 238: else:",
                        "Added Line 261: ",
                        "Added Line 259: # Yield adjustable files with final, hashed name.",
                        "Added Line 232: ",
                        "Added Line 246: # Overwrite since hashed_name may be newer.",
                        "Added Line 230: # Adjustable files to yield at end, keyed by the original path.",
                        "Added Line 239: processed_adjustable_paths[name] = (name, hashed_name, processed)",
                        "Added Line 260: yield from processed_adjustable_paths.values()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 19,
                        "covered": 5,
                        "percentage": 26.31578947368421
                    }
                }
            }
        },
        "django__django-13933": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/models.py": [
                        "def to_python(self, value):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 6,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-14017": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/query_utils.py": [
                        "def __init__(self, *args, _connector=None, _negated=False, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/query_utils.py": [
                        "Deleted Line 43: if not isinstance(other, Q):",
                        "Added Line 43: if not(isinstance(other, Q) or getattr(other, 'conditional', False) is True):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14034": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/forms/boundfield.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13964": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/base.py": [
                        "def _prepare_related_fields_for_save(self, operation_name):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-14155": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/urls/resolvers.py": [
                        "def __getitem__(self, index):"
                    ]
                },
                "missing_lines": {
                    "django/urls/resolvers.py": [
                        "Deleted Line 62: return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (",
                        "Added Line 64: else:",
                        "Deleted Line 64: self.app_names, self.namespaces, self.route,",
                        "Added Line 66: return (",
                        "Added Line 68: 'app_names=%r, namespaces=%r, route=%r)' % (",
                        "Added Line 62: if isinstance(self.func, functools.partial):",
                        "Added Line 69: func, self.args, self.kwargs, self.url_name,",
                        "Added Line 63: func = repr(self.func)",
                        "Added Line 65: func = self._func_path",
                        "Added Line 67: 'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 3,
                        "percentage": 23.076923076923077
                    }
                }
            }
        },
        "django__django-14311": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/utils/autoreload.py": [
                        "Added Line 228: if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:",
                        "Added Line 226: if getattr(__main__, '__spec__', None) is not None:",
                        "Added Line 229: name = spec.parent",
                        "Added Line 230: else:",
                        "Added Line 232: args += ['-m', name]",
                        "Added Line 231: name = spec.name",
                        "Deleted Line 226: if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "django__django-14140": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/query_utils.py": [
                        "def deconstruct(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/query_utils.py": [
                        "Deleted Line 94: kwargs = {'_connector': self.connector}",
                        "Deleted Line 93: if self.connector != self.default:",
                        "Deleted Line 90: kwargs = {child[0]: child[1]}",
                        "Deleted Line 91: else:",
                        "Added Line 87: args = tuple(self.children)",
                        "Deleted Line 87: args, kwargs = (), {}",
                        "Added Line 90: kwargs['_connector'] = self.connector",
                        "Deleted Line 92: args = tuple(self.children)",
                        "Added Line 89: if self.connector != self.default:",
                        "Deleted Line 89: child = self.children[0]"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 2,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "django__django-14315": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/base/client.py"
                ],
                "missing_functions": {
                    "django/db/backends/postgresql/client.py": [
                        "def settings_to_cmd_args_env(cls, settings_dict, parameters):"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/postgresql/client.py": [
                        "Deleted Line 54: return args, env",
                        "Added Line 54: return args, (env or None)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14007": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/compiler.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 21,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14373": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/utils/dateformat.py": [
                        "def y(self):"
                    ]
                },
                "missing_lines": {
                    "django/utils/dateformat.py": [
                        "Deleted Line 316: \"Year, 4 digits; e.g. '1999'\"",
                        "Added Line 316: \"\"\"Year, 4 digits with leading zeros; e.g. '1999'.\"\"\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-14170": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/base/operations.py"
                ],
                "missing_functions": {
                    "django/db/models/lookups.py": [
                        "class IRegex(Regex):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/lookups.py": [
                        "Added Line 548: )",
                        "Added Line 547: year, iso_year=iso_year,",
                        "Added Line 546: bounds = connection.ops.year_lookup_bounds_for_datetime_field(",
                        "Added Line 550: bounds = connection.ops.year_lookup_bounds_for_date_field(",
                        "Added Line 543: iso_year = isinstance(self.lhs, ExtractIsoYear)",
                        "Deleted Line 544: bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)",
                        "Deleted Line 546: bounds = connection.ops.year_lookup_bounds_for_date_field(year)",
                        "Added Line 542: from django.db.models.functions import ExtractIsoYear"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 38,
                        "covered": 2,
                        "percentage": 5.263157894736842
                    }
                }
            }
        },
        "django__django-14349": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/validators.py": [
                        "def __init__(self, schemes=None, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/core/validators.py": [
                        "Added Line 95: unsafe_chars = frozenset('\\t\\r\\n')"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "django__django-14122": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/sql/compiler.py": [
                        "def get_group_by(self, select, order_by):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 11,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-14376": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/mysql/client.py"
                ],
                "missing_functions": {
                    "django/db/backends/mysql/base.py": [
                        "def get_connection_params(self):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 4,
                        "percentage": 30.76923076923077
                    }
                }
            }
        },
        "django__django-14493": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/staticfiles/storage.py": [
                        "def post_process(self, paths, dry_run=False, **options):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/staticfiles/storage.py": [
                        "Added Line 263: substitutions = False"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14404": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/admin/sites.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14500": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/executor.py": [
                        "def unapply_migration(self, state, migration, fake=False):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/executor.py": [
                        "Deleted Line 258: self.recorder.record_unapplied(migration.app_label, migration.name)",
                        "Deleted Line 253: # For replacement migrations, record individual statuses",
                        "Deleted Line 257: else:",
                        "Added Line 253: # For replacement migrations, also record individual statuses."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-14534": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/boundfield.py": [
                        "def template_name(self):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-14238": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/__init__.py": [
                        "def __instancecheck__(self, instance):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-14539": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/utils/html.py": [
                        "def trim_punctuation(lead, middle, trail):"
                    ]
                },
                "missing_lines": {
                    "django/utils/html.py": [
                        "Added Line 287: trail = middle[-punctuation_count:] + trail",
                        "Added Line 288: middle = middle[:-punctuation_count]",
                        "Added Line 286: punctuation_count = len(middle_unescaped) - len(stripped)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-14608": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/formsets.py": [
                        "def full_clean(self):"
                    ]
                },
                "missing_lines": {
                    "django/forms/formsets.py": [
                        "Added Line 384: e.error_list,",
                        "Deleted Line 383: self._non_form_errors = self.error_class(e.error_list)",
                        "Added Line 383: self._non_form_errors = self.error_class(",
                        "Added Line 385: error_class='nonform'",
                        "Added Line 386: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-14752": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/views/autocomplete.py": [
                        "def get(self, request, *args, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/views/autocomplete.py": [
                        "Added Line 14: Return a JsonResponse with search results as defined in",
                        "Added Line 39: results list.",
                        "Added Line 42: ",
                        "Deleted Line 14: Return a JsonResponse with search results of the form:",
                        "Added Line 30: self.serialize_result(obj, to_field_name)",
                        "Added Line 37: \"\"\"",
                        "Added Line 38: Convert the provided model object to a dictionary that is added to the",
                        "Added Line 41: return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}",
                        "Added Line 15: serialize_result(), by default:",
                        "Added Line 40: \"\"\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 2,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "django__django-14351": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/lookups.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14434": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/base/schema.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14580": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/migrations/serializer.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14631": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/forms/boundfield.py"
                ],
                "missing_functions": {
                    "django/forms/forms.py": [
                        "def has_changed(self):",
                        "def __repr__(self):",
                        "def _widget_data_value(self, widget, html_name):",
                        "def full_clean(self):"
                    ]
                },
                "missing_lines": {
                    "django/forms/forms.py": [
                        "Deleted Line 202: ",
                        "Deleted Line 458: data.append(name)",
                        "Added Line 147: \"\"\"Yield (name, bf) pairs, where bf is a BoundField object.\"\"\"",
                        "Deleted Line 454: # Always assume data has changed if validation fails.",
                        "Added Line 393: for name, bf in self._bound_items():",
                        "Deleted Line 446: else:",
                        "Deleted Line 440: for name, field in self.fields.items():",
                        "Deleted Line 453: except ValidationError:",
                        "Deleted Line 201: return self._widget_data_value(field.widget, html_name)",
                        "Deleted Line 455: data.append(name)",
                        "Added Line 150: ",
                        "Deleted Line 390: for name, field in self.fields.items():",
                        "Added Line 213: field = bf.field",
                        "Deleted Line 445: initial_value = self[name].initial",
                        "Deleted Line 447: initial_prefixed_name = self.add_initial_prefix(name)",
                        "Added Line 152: \"\"\"Yield the form's fields as BoundField objects.\"\"\"",
                        "Added Line 148: for name in self.fields:",
                        "Deleted Line 209: for name, field in self.fields.items():",
                        "Deleted Line 448: hidden_widget = field.hidden_widget()",
                        "Deleted Line 442: if not field.show_hidden_initial:",
                        "Deleted Line 456: continue",
                        "Deleted Line 200: def _field_data_value(self, field, html_name):",
                        "Added Line 212: for name, bf in self._bound_items():",
                        "Added Line 439: return [name for name, bf in self._bound_items() if bf._has_changed()]",
                        "Deleted Line 452: )",
                        "Deleted Line 450: initial_value = field.to_python(",
                        "Added Line 149: yield name, self[name]",
                        "Deleted Line 439: data = []",
                        "Deleted Line 211: bf = self[name]",
                        "Deleted Line 443: # Use the BoundField's initial as this is the value passed to",
                        "Deleted Line 451: self._widget_data_value(hidden_widget, initial_prefixed_name)",
                        "Deleted Line 459: return data",
                        "Deleted Line 457: if field.has_changed(initial_value, data_value):",
                        "Deleted Line 449: try:",
                        "Deleted Line 441: data_value = self._field_data_value(field, self.add_prefix(name))",
                        "Deleted Line 444: # the widget.",
                        "Added Line 146: def _bound_items(self):",
                        "Added Line 395: value = bf.initial if field.disabled else bf.data",
                        "Added Line 398: value = field.clean(value, bf.initial)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 65,
                        "covered": 7,
                        "percentage": 10.76923076923077
                    }
                }
            }
        },
        "django__django-14787": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/utils/decorators.py": [
                        "def _wrapper(self, *args, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/utils/decorators.py": [
                        "Deleted Line 40: bound_method = partial(method.__get__(self, type(self)))",
                        "Added Line 40: bound_method = wraps(method)(partial(method.__get__(self, type(self))))"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14559": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/query.py": [
                        "def bulk_update(self, objs, fields, batch_size=None):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/query.py": [
                        "Deleted Line 544: return",
                        "Added Line 544: return 0",
                        "Added Line 566: rows_updated = 0"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 3,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-14672": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/reverse_related.py": [
                        "def __init__(self, field, to, related_name=None, related_query_name=None,"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/reverse_related.py": [
                        "Deleted Line 313: self.through_fields,",
                        "Added Line 313: make_hashable(self.through_fields),"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14725": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/models.py": [
                        "def save_m2m():",
                        "def inlineformset_factory(parent_model, model, form=ModelForm,"
                    ]
                },
                "missing_lines": {
                    "django/forms/models.py": [
                        "Added Line 881: absolute_max=None, can_delete_extra=True, renderer=None,",
                        "Added Line 903: FormSet.edit_only = edit_only",
                        "Added Line 1085: edit_only=False):",
                        "Added Line 882: edit_only=False):",
                        "Deleted Line 679: return self.save_existing_objects(commit) + self.save_new_objects(commit)",
                        "Added Line 1084: absolute_max=None, can_delete_extra=True, renderer=None,",
                        "Added Line 680: return self.save_existing_objects(commit)",
                        "Added Line 1118: 'edit_only': edit_only,",
                        "Added Line 682: return self.save_existing_objects(commit) + self.save_new_objects(commit)",
                        "Added Line 679: if self.edit_only:",
                        "Deleted Line 1079: absolute_max=None, can_delete_extra=True, renderer=None):",
                        "Added Line 681: else:",
                        "Deleted Line 878: absolute_max=None, can_delete_extra=True, renderer=None):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14771": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/utils/autoreload.py": [
                        "Added Line 223: if sys.implementation.name == 'cpython':",
                        "Added Line 224: args.extend(",
                        "Added Line 227: )",
                        "Added Line 226: for key, value in sys._xoptions.items()",
                        "Added Line 225: f'-X{key}' if value is True else f'-X{key}={value}'"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14792": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/utils/timezone.py": [
                        "Deleted Line 76: return str(timezone)",
                        "Added Line 78: \"\"\"",
                        "Added Line 75: \"\"\"",
                        "Deleted Line 75: \"\"\"Return the name of ``timezone``.\"\"\"",
                        "Added Line 79: return timezone.tzname(None) or str(timezone)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-14765": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/db/migrations/state.py": [
                        "Added Line 97: assert isinstance(real_apps, set)",
                        "Added Line 98: self.real_apps = real_apps",
                        "Deleted Line 97: self.real_apps = set()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 4,
                        "percentage": 57.14285714285714
                    }
                }
            }
        },
        "django__django-14999": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/operations/models.py": [
                        "def database_forwards(self, app_label, schema_editor, from_state, to_state):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/operations/models.py": [
                        "Added Line 327: return",
                        "Added Line 329: schema_editor.alter_db_table(new_model, old_db_table, new_db_table)",
                        "Deleted Line 327: new_model._meta.db_table,",
                        "Deleted Line 325: new_model,",
                        "Added Line 325: # Don't alter when a table name is not changed.",
                        "Added Line 324: new_db_table = new_model._meta.db_table",
                        "Added Line 323: old_db_table = old_model._meta.db_table",
                        "Deleted Line 324: schema_editor.alter_db_table(",
                        "Added Line 326: if old_db_table == new_db_table:",
                        "Deleted Line 328: )",
                        "Deleted Line 326: old_model._meta.db_table,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15037": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/core/management/commands/inspectdb.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14855": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/helpers.py": [
                        "def get_admin_url(self, remote_field, remote_obj):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 6,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15098": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15127": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/messages/apps.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15103": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/template/defaultfilters.py"
                ],
                "missing_functions": {
                    "django/utils/html.py": [
                        "def escapejs(value):"
                    ]
                },
                "missing_lines": {
                    "django/utils/html.py": [
                        "Added Line 72: if element_id:",
                        "Deleted Line 72: return format_html(",
                        "Added Line 76: template = '<script type=\"application/json\">{}</script>'",
                        "Added Line 78: return format_html(template, *args)",
                        "Deleted Line 75: )",
                        "Added Line 77: args = (mark_safe(json_str),)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 17,
                        "covered": 7,
                        "percentage": 41.17647058823529
                    }
                }
            }
        },
        "django__django-15022": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/options.py": [
                        "def construct_search(field_name):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/options.py": [
                        "Deleted Line 1041: queryset = queryset.filter(or_queries)",
                        "Added Line 1042: term_queries.append(or_queries)",
                        "Added Line 1034: term_queries = []",
                        "Added Line 1043: queryset = queryset.filter(models.Q(*term_queries))"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14915": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/models.py": [
                        "def __init__(self, value, instance):"
                    ]
                },
                "missing_lines": {
                    "django/forms/models.py": [
                        "Added Line 1170: return hash(self.value)",
                        "Added Line 1169: def __hash__(self):",
                        "Added Line 1171: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15104": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/autodetector.py": [
                        "def only_relation_agnostic_fields(self, fields):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15252": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/migrations/executor.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15278": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/backends/sqlite3/schema.py": [
                        "def delete_model(self, model, handle_autom2m=True):"
                    ]
                },
                "missing_lines": {
                    "django/db/backends/sqlite3/schema.py": [
                        "Added Line 327: if (",
                        "Added Line 328: # Primary keys and unique fields are not supported in ALTER TABLE",
                        "Added Line 329: # ADD COLUMN.",
                        "Deleted Line 329: # ALTER TABLE.",
                        "Deleted Line 327: # Fields with default values cannot by handled by ALTER TABLE ADD",
                        "Added Line 331: # Fields with default values cannot by handled by ALTER TABLE ADD",
                        "Added Line 332: # COLUMN statement because DROP DEFAULT is not supported in",
                        "Added Line 333: # ALTER TABLE.",
                        "Added Line 335: ):",
                        "Added Line 334: not field.null or self.effective_default(field) is not None",
                        "Deleted Line 328: # COLUMN statement because DROP DEFAULT is not supported in"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 2,
                        "percentage": 15.384615384615385
                    }
                }
            }
        },
        "django__django-15161": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/expressions.py": [
                        "def get_group_by_cols(self, alias=None):",
                        "def __repr__(self):",
                        "def relabeled_clone(self, relabels):",
                        "def copy(self):",
                        "def as_sql(self, *args, **kwargs):",
                        "def select_format(self, compiler, sql, params):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/expressions.py": [
                        "Added Line 1059: @deconstructible(path='django.db.models.Case')",
                        "Added Line 991: @deconstructible(path='django.db.models.When')",
                        "Added Line 1233: @deconstructible(path='django.db.models.OrderBy')",
                        "Added Line 958: @deconstructible(path='django.db.models.ExpressionWrapper')"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 2,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-15128": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/sql/query.py": [
                        "def combine(self, rhs, connector):",
                        "def change_aliases(self, change_map):",
                        "def prefix_gen():"
                    ]
                },
                "missing_lines": {
                    "django/db/models/sql/query.py": [
                        "Deleted Line 925: outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)",
                        "Deleted Line 593: # table on both sides.",
                        "Added Line 896: after this call. To prevent changing aliases use the exclude parameter.",
                        "Added Line 936: exclude = {}",
                        "Added Line 577: # as T4 -> T6 while combining two querysets. To prevent this, change an",
                        "Added Line 934: other_query.subq_aliases = other_query.subq_aliases.union(self.subq_aliases)",
                        "Added Line 575: # If lhs and rhs shares the same alias prefix, it is possible to have",
                        "Deleted Line 592: # Base table must be present in the query - this is the same",
                        "Added Line 916: if self.alias_prefix != other_query.alias_prefix:",
                        "Added Line 894: that the other query's aliases and this query's aliases will not",
                        "Added Line 856: # updated twice (e.g. T4 -> T5, T5 -> T6, so also T4 -> T6) depending",
                        "Added Line 576: # conflicting alias changes like T4 -> T5, T5 -> T6, which might end up",
                        "Added Line 578: # alias prefix of the rhs and update current aliases accordingly,",
                        "Added Line 857: # on their order in change_map.",
                        "Deleted Line 882: def bump_prefix(self, outer_query):",
                        "Added Line 582: rhs.bump_prefix(self, exclude={initial_alias})",
                        "Deleted Line 887: after this call.",
                        "Added Line 583: ",
                        "Added Line 581: initial_alias = self.get_initial_alias()",
                        "Deleted Line 907: if self.alias_prefix != outer_query.alias_prefix:",
                        "Added Line 940: if alias not in exclude",
                        "Deleted Line 885: that the outer query's aliases and this query's aliases will not",
                        "Added Line 891: def bump_prefix(self, other_query, exclude=None):",
                        "Added Line 579: # except if the alias is the base table since it must be present in the",
                        "Deleted Line 594: self.get_initial_alias()",
                        "Added Line 580: # query on both sides.",
                        "Added Line 935: if exclude is None:",
                        "Added Line 855: # If keys and values of change_map were to intersect, an alias might be"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 28,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15277": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 3,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15268": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/migrations/operations/models.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15315": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/__init__.py": [
                        "def __lt__(self, other):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 6,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15375": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/aggregates.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15380": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/autodetector.py": [
                        "def generate_renamed_fields(self):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15280": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/related_descriptors.py": [
                        "def get_prefetch_queryset(self, instances, queryset=None):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/related_descriptors.py": [
                        "Added Line 649: if not self.field.is_cached(rel_obj):",
                        "Added Line 651: setattr(rel_obj, self.field.name, instance)",
                        "Added Line 650: instance = instances_dict[rel_obj_attr(rel_obj)]",
                        "Deleted Line 650: setattr(rel_obj, self.field.name, instance)",
                        "Deleted Line 649: instance = instances_dict[rel_obj_attr(rel_obj)]"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15382": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/expressions.py": [
                        "def __invert__(self):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 19,
                        "covered": 19,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15503": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/fields/json.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 26,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15499": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/operations/models.py": [
                        "def reduce(self, operation, app_label):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/operations/models.py": [
                        "Added Line 183: managers=operation.managers,",
                        "Added Line 184: ),",
                        "Added Line 185: ]",
                        "Added Line 182: bases=self.bases,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 9,
                        "percentage": 69.23076923076923
                    }
                }
            }
        },
        "django__django-15525": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/core/serializers/base.py": [
                        "Added Line 340: obj._state.db = db",
                        "Added Line 341: natural_key = obj.natural_key()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-15467": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/options.py": [
                        "def formfield_for_foreignkey(self, db_field, request, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/options.py": [
                        "Added Line 274: )",
                        "Added Line 273: kwargs.get(\"empty_label\", _(\"None\")) if db_field.blank else None"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-15368": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/query.py": [
                        "def bulk_update(self, objs, fields, batch_size=None):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/query.py": [
                        "Deleted Line 20: from django.db.models.expressions import Case, Expression, F, Ref, Value, When",
                        "Added Line 20: from django.db.models.expressions import Case, F, Ref, Value, When"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-15561": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/base/schema.py",
                    "django/db/models/fields/__init__.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 35,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15572": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/template/autoreload.py": [
                        "def get_template_directories():"
                    ]
                },
                "missing_lines": {
                    "django/template/autoreload.py": [
                        "Added Line 28: if directory and not is_django_path(directory)",
                        "Deleted Line 20: items.update(cwd / to_path(dir) for dir in backend.engine.dirs)",
                        "Added Line 20: items.update(cwd / to_path(dir) for dir in backend.engine.dirs if dir)",
                        "Deleted Line 28: if not is_django_path(directory)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15629": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/base/schema.py",
                    "django/db/backends/oracle/features.py",
                    "django/db/backends/sqlite3/schema.py",
                    "django/db/models/fields/related.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 42,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15569": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/query_utils.py": [
                        "def _unregister_lookup(cls, lookup, lookup_name=None):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15851": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/postgresql/client.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15695": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/operations/models.py": [
                        "def database_forwards(self, app_label, schema_editor, from_state, to_state):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/operations/models.py": [
                        "Added Line 965: return",
                        "Added Line 963: # Don't alter when the index name is not changed.",
                        "Added Line 964: if old_index.name == self.new_name:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15741": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15563": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/compiler.py",
                    "django/db/models/sql/subqueries.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15732": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/backends/base/schema.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 32,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15863": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/template/defaultfilters.py": [
                        "Deleted Line 152: input_val = repr(text)",
                        "Added Line 152: input_val = str(text)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15731": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/manager.py": [
                        "def check(self, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/manager.py": [
                        "Added Line 3: from functools import wraps",
                        "Added Line 85: @wraps(method)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-15916": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/models.py": [
                        "def __init__(self, options=None):",
                        "def modelform_factory(",
                        "def __new__(mcs, name, bases, attrs):"
                    ]
                },
                "missing_lines": {
                    "django/forms/models.py": [
                        "Added Line 256: self.formfield_callback = getattr(options, \"formfield_callback\", None)",
                        "Deleted Line 267: ",
                        "Added Line 632: form_class_attrs = {\"Meta\": Meta}",
                        "Deleted Line 639: form_class_attrs = {\"Meta\": Meta, \"formfield_callback\": formfield_callback}",
                        "Deleted Line 262: if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):",
                        "Deleted Line 264: break",
                        "Deleted Line 260: base_formfield_callback = None",
                        "Deleted Line 263: base_formfield_callback = b.Meta.formfield_callback",
                        "Deleted Line 311: formfield_callback,",
                        "Deleted Line 265: ",
                        "Added Line 304: opts.formfield_callback,",
                        "Deleted Line 261: for b in bases:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 1,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "django__django-15554": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/sql/query.py": [
                        "def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):",
                        "def build_filtered_relation_q(",
                        "def transform(field, alias, *, name, previous):",
                        "def join(self, join, reuse=None):",
                        "def count_active_tables(self):",
                        "def build_filter(",
                        "def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/sql/query.py": [
                        "Added Line 1754: parameter and force the relation on the given connections.",
                        "Added Line 1849: reuse=reuse,",
                        "Added Line 1851: )",
                        "Added Line 1037: for a, j in self.alias_map.items()",
                        "Added Line 1737: alias,",
                        "Added Line 1038: if (reuse is None or a in reuse) and j == join",
                        "Deleted Line 1027: reuse_aliases = [",
                        "Added Line 1753: The 'reuse_with_filtered_relation' can be used to force 'can_reuse'",
                        "Added Line 1360: ",
                        "Added Line 1733: def setup_joins(",
                        "Deleted Line 1014: def join(self, join, reuse=None):",
                        "Added Line 1032: a for a, j in self.alias_map.items() if a in reuse and j.equals(join)",
                        "Added Line 1359: will be reused.",
                        "Deleted Line 1822: alias = self.join(connection, reuse=reuse)",
                        "Added Line 1030: if reuse_with_filtered_relation and reuse:",
                        "Added Line 1419: reuse_with_filtered_relation=reuse_with_filtered_relation,",
                        "Added Line 1036: a",
                        "Added Line 1846: reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None",
                        "Added Line 1025: ",
                        "Added Line 1739: allow_many=True,",
                        "Added Line 1741: ):",
                        "Deleted Line 1030: if (reuse is None or a in reuse) and j.equals(join)",
                        "Added Line 1014: def join(self, join, reuse=None, reuse_with_filtered_relation=False):",
                        "Deleted Line 1821: reuse = can_reuse if join.m2m else None",
                        "Deleted Line 1028: a",
                        "Deleted Line 1029: for a, j in self.alias_map.items()",
                        "Added Line 1734: self,",
                        "Added Line 1039: ]",
                        "Added Line 1850: reuse_with_filtered_relation=reuse_with_filtered_relation,",
                        "Added Line 1740: reuse_with_filtered_relation=False,",
                        "Added Line 1755: ",
                        "Deleted Line 1031: ]",
                        "Added Line 1034: else:",
                        "Deleted Line 1719: def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True):",
                        "Added Line 1033: ]",
                        "Added Line 1581: reuse_with_filtered_relation=True,",
                        "Added Line 1848: connection,",
                        "Added Line 1334: reuse_with_filtered_relation=False,",
                        "Added Line 1035: reuse_aliases = [",
                        "Added Line 1847: alias = self.join(",
                        "Added Line 1738: can_reuse=None,",
                        "Added Line 1024: FilteredRelation instances.",
                        "Added Line 1736: opts,",
                        "Added Line 1735: names,",
                        "Added Line 1031: reuse_aliases = [",
                        "Added Line 1023: The 'reuse_with_filtered_relation' parameter is used when computing",
                        "Added Line 1358: If 'reuse_with_filtered_relation' is True, then only joins in can_reuse"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 47,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15987": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/commands/loaddata.py": [
                        "def fixture_dirs(self):"
                    ]
                },
                "missing_lines": {
                    "django/core/management/commands/loaddata.py": [
                        "Deleted Line 370: if app_dir in fixture_dirs:",
                        "Added Line 370: if app_dir in [str(d) for d in fixture_dirs]:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16136": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/views/generic/base.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15930": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/expressions.py": [
                        "def as_sql(self, compiler, connection, template=None, **extra_context):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/expressions.py": [
                        "Added Line 1305: if condition_sql == \"\":",
                        "Added Line 1304: # that's always True.",
                        "Added Line 1306: condition_sql, condition_params = compiler.compile(Value(True))",
                        "Added Line 1303: # WHERE clause, but in a CASE WHEN expression they must use a predicate",
                        "Added Line 1302: # Filters that match everything are handled as empty strings in the"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16139": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/auth/forms.py": [
                        "def __init__(self, *args, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/auth/forms.py": [
                        "Added Line 168: )",
                        "Added Line 167: f\"../../{self.instance.pk}/password/\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-15814": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/sql/query.py": [
                        "def deferred_to_data(self, target):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-16116": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/commands/makemigrations.py": [
                        "def add_arguments(self, parser):",
                        "def handle(self, *app_labels, **options):"
                    ]
                },
                "missing_lines": {
                    "django/core/management/commands/makemigrations.py": [
                        "Added Line 76: ),",
                        "Added Line 254: if check_changes:",
                        "Added Line 74: \"Exit with a non-zero status if model changes are missing migrations \"",
                        "Deleted Line 73: help=\"Exit with a non-zero status if model changes are missing migrations.\",",
                        "Added Line 255: sys.exit(1)",
                        "Added Line 73: help=(",
                        "Added Line 75: \"and don't actually write them.\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "django__django-15973": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/migrations/autodetector.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16082": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/expressions.py": [
                        "def __hash__(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/expressions.py": [
                        "Added Line 536: Combinable.MOD,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16145": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/commands/runserver.py": [
                        "def inner_run(self, *args, **options):"
                    ]
                },
                "missing_lines": {
                    "django/core/management/commands/runserver.py": [
                        "Added Line 132: if self._raw_ipv6:",
                        "Added Line 135: addr = \"0.0.0.0\"",
                        "Added Line 134: elif self.addr == \"0\":",
                        "Added Line 137: addr = self.addr",
                        "Added Line 133: addr = f\"[{self.addr}]\"",
                        "Added Line 138: ",
                        "Added Line 136: else:",
                        "Added Line 157: \"addr\": addr,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 1,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "django__django-16100": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/options.py": [
                        "def changelist_view(self, request, extra_context=None):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/options.py": [
                        "Deleted Line 2017: self.save_model(request, obj, form, change=True)",
                        "Added Line 2017: obj = self.save_form(request, form, change=True)",
                        "Added Line 2023: self.log_change(request, obj, change_msg)",
                        "Deleted Line 2019: change_msg = self.construct_change_message(request, form, None)",
                        "Deleted Line 2014: for form in formset.forms:",
                        "Added Line 2024: changecount += 1",
                        "Deleted Line 2020: self.log_change(request, obj, change_msg)",
                        "Added Line 2019: self.save_related(request, form, formsets=[], change=True)",
                        "Added Line 2020: change_msg = self.construct_change_message(",
                        "Deleted Line 2016: obj = self.save_form(request, form, change=True)",
                        "Added Line 2021: request, form, None",
                        "Added Line 2022: )",
                        "Deleted Line 2015: if form.has_changed():",
                        "Added Line 2018: self.save_model(request, obj, form, change=True)",
                        "Deleted Line 2018: self.save_related(request, form, formsets=[], change=True)",
                        "Added Line 2014: with transaction.atomic(using=router.db_for_write(self.model)):",
                        "Added Line 2015: for form in formset.forms:",
                        "Deleted Line 2021: changecount += 1",
                        "Added Line 2016: if form.has_changed():",
                        "Deleted Line 2022: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16255": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/sitemaps/__init__.py": [
                        "def get_latest_lastmod(self):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/sitemaps/__init__.py": [
                        "Deleted Line 170: return max([self.lastmod(item) for item in self.items()])",
                        "Added Line 170: return max([self.lastmod(item) for item in self.items()], default=None)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16032": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/fields/related_lookups.py"
                ],
                "missing_functions": {
                    "django/db/models/sql/query.py": [
                        "def output_field(self):",
                        "def set_values(self, fields):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/sql/query.py": [
                        "Added Line 2382: self.has_select_fields = True",
                        "Deleted Line 269: self.select or self.annotation_select_mask or self.extra_select_mask",
                        "Deleted Line 266: @property",
                        "Deleted Line 267: def has_select_fields(self):",
                        "Deleted Line 268: return bool(",
                        "Deleted Line 271: ",
                        "Deleted Line 270: )",
                        "Added Line 201: has_select_fields = False"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15957": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/related_descriptors.py": [
                        "class Child(Model):",
                        "def get_prefetch_queryset(self, instances, queryset=None):",
                        "def __set__(self, instance, value):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/related_descriptors.py": [
                        "Added Line 68: from django.db.models import Q, Window, signals",
                        "Added Line 87: predicate = Q(**{f\"{field_name}__in\": instances})",
                        "Added Line 89: low_mark, high_mark = queryset.query.low_mark, queryset.query.high_mark",
                        "Added Line 1073: queryset._next_is_sticky(), self.query_field_name, instances",
                        "Added Line 96: window = Window(RowNumber(), partition_by=field_name, order_by=order_by)",
                        "Added Line 97: predicate &= GreaterThan(window, low_mark)",
                        "Added Line 741: queryset = _filter_prefetch_queryset(queryset, self.field.name, instances)",
                        "Added Line 92: for expr, _ in queryset.query.get_compiler(",
                        "Added Line 95: ]",
                        "Deleted Line 67: from django.db import connections, router, transaction",
                        "Added Line 70: from django.db.models.lookups import GreaterThan, LessThanOrEqual",
                        "Deleted Line 1054: query = {\"%s__in\" % self.query_field_name: instances}",
                        "Added Line 93: using=queryset._db or DEFAULT_DB_ALIAS",
                        "Deleted Line 68: from django.db.models import Q, signals",
                        "Added Line 90: order_by = [",
                        "Added Line 67: from django.db import DEFAULT_DB_ALIAS, connections, router, transaction",
                        "Deleted Line 721: query = {\"%s__in\" % self.field.name: instances}",
                        "Deleted Line 722: queryset = queryset.filter(**query)",
                        "Added Line 99: predicate &= LessThanOrEqual(window, high_mark)",
                        "Added Line 102: ",
                        "Added Line 69: from django.db.models.functions import RowNumber",
                        "Added Line 1072: queryset = _filter_prefetch_queryset(",
                        "Added Line 86: def _filter_prefetch_queryset(queryset, field_name, instances):",
                        "Added Line 94: ).get_order_by()",
                        "Added Line 1074: )",
                        "Added Line 88: if queryset.query.is_sliced:",
                        "Added Line 91: expr",
                        "Deleted Line 1055: queryset = queryset._next_is_sticky().filter(**query)",
                        "Deleted Line 1053: ",
                        "Added Line 100: queryset.query.clear_limits()",
                        "Added Line 103: ",
                        "Added Line 98: if high_mark is not None:",
                        "Added Line 101: return queryset.filter(predicate)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 33,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16429": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-16333": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/auth/forms.py": [
                        "def save(self, commit=True):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-16485": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/template/defaultfilters.py": [
                        "Deleted Line 171: if not m and p < 0:",
                        "Added Line 171: if not m and p <= 0:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16454": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/base.py": [
                        "def error(self, message):"
                    ]
                },
                "missing_lines": {
                    "django/core/management/base.py": [
                        "Added Line 9: from functools import partial",
                        "Added Line 76: parser_class = kwargs.get(\"parser_class\", type(self))",
                        "Added Line 78: kwargs[\"parser_class\"] = partial(",
                        "Added Line 82: return super().add_subparsers(**kwargs)",
                        "Added Line 80: called_from_command_line=self.called_from_command_line,",
                        "Added Line 77: if issubclass(parser_class, CommandParser):",
                        "Added Line 83: ",
                        "Added Line 81: )",
                        "Added Line 75: def add_subparsers(self, **kwargs):",
                        "Added Line 79: parser_class,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16493": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/files.py": [
                        "def deconstruct(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/files.py": [
                        "Deleted Line 299: kwargs[\"storage\"] = getattr(self, \"_storage_callable\", self.storage)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 4,
                        "percentage": 80.0
                    }
                }
            }
        },
        "django__django-16502": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/core/servers/basehttp.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 27,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16560": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/postgres/constraints.py"
                ],
                "missing_functions": {
                    "django/db/models/constraints.py": [
                        "def __init__(self, *args, name=None, violation_error_message=None):",
                        "def __repr__(self):",
                        "def remove_sql(self, model, schema_editor):",
                        "def deconstruct(self):",
                        "def __init__(",
                        "def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):",
                        "def clone(self):",
                        "def __eq__(self, other):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/constraints.py": [
                        "Added Line 84: if self.violation_error_code is not None:",
                        "Added Line 144: else \" violation_error_code=%r\" % self.violation_error_code",
                        "Added Line 27: # ):",
                        "Added Line 143: if self.violation_error_code is None",
                        "Deleted Line 296: return \"<%s:%s%s%s%s%s%s%s%s>\" % (",
                        "Deleted Line 91: super().__init__(name=name, violation_error_message=violation_error_message)",
                        "Added Line 241: name=name,",
                        "Added Line 130: raise ValidationError(",
                        "Added Line 131: self.get_violation_error_message(), code=self.violation_error_code",
                        "Added Line 335: if self.violation_error_code is None",
                        "Added Line 442: code=self.violation_error_code,",
                        "Added Line 240: super().__init__(",
                        "Added Line 105: violation_error_message=violation_error_message,",
                        "Added Line 21: violation_error_code = None",
                        "Deleted Line 216: super().__init__(name=name, violation_error_message=violation_error_message)",
                        "Added Line 142: \"\"",
                        "Added Line 334: \"\"",
                        "Added Line 337: ),",
                        "Added Line 422: raise ValidationError(",
                        "Added Line 96: ):",
                        "Added Line 85: kwargs[\"violation_error_code\"] = self.violation_error_code",
                        "Added Line 159: and self.violation_error_code == other.violation_error_code",
                        "Deleted Line 24: # def __init__(self, *, name, violation_error_message=None):",
                        "Added Line 443: )",
                        "Added Line 30: ):",
                        "Added Line 324: return \"<%s:%s%s%s%s%s%s%s%s%s>\" % (",
                        "Added Line 441: self.get_violation_error_message(),",
                        "Added Line 95: self, *, check, name, violation_error_code=None, violation_error_message=None",
                        "Added Line 440: raise ValidationError(",
                        "Added Line 38: if violation_error_code is not None:",
                        "Added Line 432: instance.unique_error_message(model, self.fields),",
                        "Added Line 336: else \" violation_error_code=%r\" % self.violation_error_code",
                        "Added Line 28: def __init__(",
                        "Added Line 104: violation_error_code=violation_error_code,",
                        "Added Line 141: (",
                        "Added Line 423: self.get_violation_error_message(),",
                        "Added Line 189: violation_error_code=None,",
                        "Added Line 243: violation_error_message=violation_error_message,",
                        "Deleted Line 395: instance.unique_error_message(model, self.fields)",
                        "Added Line 106: )",
                        "Added Line 102: super().__init__(",
                        "Added Line 137: return \"<%s: check=%s name=%s%s%s>\" % (",
                        "Deleted Line 85: def __init__(self, *, check, name, violation_error_message=None):",
                        "Added Line 94: def __init__(",
                        "Added Line 242: violation_error_code=violation_error_code,",
                        "Added Line 29: self, *args, name=None, violation_error_code=None, violation_error_message=None",
                        "Deleted Line 120: return \"<%s: check=%s name=%s%s>\" % (",
                        "Added Line 424: code=self.violation_error_code,",
                        "Added Line 132: )",
                        "Added Line 425: )",
                        "Added Line 39: self.violation_error_code = violation_error_code",
                        "Added Line 333: (",
                        "Added Line 103: name=name,",
                        "Added Line 145: ),",
                        "Added Line 244: )",
                        "Added Line 356: and self.violation_error_code == other.violation_error_code"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 85,
                        "covered": 6,
                        "percentage": 7.0588235294117645
                    }
                }
            }
        },
        "django__django-16256": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/contenttypes/fields.py"
                ],
                "missing_functions": {
                    "django/db/models/fields/related_descriptors.py": [
                        "def get_or_create(self, *, through_defaults=None, **kwargs):",
                        "def create(self, **kwargs):",
                        "def update_or_create(self, **kwargs):",
                        "def update_or_create(self, *, through_defaults=None, **kwargs):",
                        "class Child(Model):",
                        "def get_or_create(self, **kwargs):",
                        "def create(self, *, through_defaults=None, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/related_descriptors.py": [
                        "Added Line 827: aupdate_or_create.alters_data = True",
                        "Added Line 799: return await sync_to_async(self.create)(**kwargs)",
                        "Added Line 1213: through_defaults=through_defaults, **kwargs",
                        "Added Line 1236: aget_or_create.alters_data = True",
                        "Added Line 801: acreate.alters_data = True",
                        "Added Line 1257: ",
                        "Added Line 1231: async def aget_or_create(self, *, through_defaults=None, **kwargs):",
                        "Added Line 826: ",
                        "Added Line 1211: async def acreate(self, *, through_defaults=None, **kwargs):",
                        "Added Line 815: ",
                        "Added Line 1215: ",
                        "Added Line 1256: aupdate_or_create.alters_data = True",
                        "Added Line 1216: acreate.alters_data = True",
                        "Added Line 1232: return await sync_to_async(self.get_or_create)(",
                        "Added Line 67: ",
                        "Added Line 1212: return await sync_to_async(self.create)(",
                        "Added Line 824: async def aupdate_or_create(self, **kwargs):",
                        "Added Line 814: aget_or_create.alters_data = True",
                        "Added Line 1235: ",
                        "Added Line 1237: ",
                        "Added Line 811: async def aget_or_create(self, **kwargs):",
                        "Added Line 1234: )",
                        "Added Line 1233: through_defaults=through_defaults, **kwargs",
                        "Added Line 1253: through_defaults=through_defaults, **kwargs",
                        "Added Line 1252: return await sync_to_async(self.update_or_create)(",
                        "Added Line 813: ",
                        "Added Line 66: from asgiref.sync import sync_to_async",
                        "Added Line 1251: async def aupdate_or_create(self, *, through_defaults=None, **kwargs):",
                        "Added Line 798: async def acreate(self, **kwargs):",
                        "Added Line 1254: )",
                        "Added Line 828: ",
                        "Added Line 1217: ",
                        "Added Line 1255: ",
                        "Added Line 825: return await sync_to_async(self.update_or_create)(**kwargs)",
                        "Added Line 812: return await sync_to_async(self.get_or_create)(**kwargs)",
                        "Added Line 1214: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 55,
                        "covered": 2,
                        "percentage": 3.6363636363636362
                    }
                }
            }
        },
        "django__django-16527": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "django/contrib/admin/templatetags/admin_modify.py": [
                        "Deleted Line 103: and has_change_permission"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-16569": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/formsets.py": [
                        "def add_fields(self, form, index):"
                    ]
                },
                "missing_lines": {
                    "django/forms/formsets.py": [
                        "Added Line 494: self.can_delete_extra or (index is not None and index < initial_form_count)",
                        "Added Line 495: ):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-16631": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/contrib/auth/__init__.py"
                ],
                "missing_functions": {
                    "django/contrib/auth/base_user.py": [
                        "def get_session_auth_hash(self):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/auth/base_user.py": [
                        "Added Line 150: secret=secret,",
                        "Added Line 8: from django.conf import settings"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 33,
                        "covered": 7,
                        "percentage": 21.21212121212121
                    }
                }
            }
        },
        "django__django-16263": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/expressions.py",
                    "django/db/models/query_utils.py",
                    "django/db/models/sql/query.py",
                    "django/db/models/sql/where.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 93,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16801": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/models/fields/files.py": [
                        "def contribute_to_class(self, cls, name, **kwargs):",
                        "def update_dimension_fields(self, instance, force=False, *args, **kwargs):"
                    ]
                },
                "missing_lines": {
                    "django/db/models/fields/files.py": [
                        "Deleted Line 461: # the field is deferred.",
                        "Deleted Line 463: if not has_dimension_fields or self.attname not in instance.__dict__:",
                        "Added Line 445: if not cls._meta.abstract and (self.width_field or self.height_field):",
                        "Deleted Line 460: # Nothing to update if the field doesn't have dimension fields or if",
                        "Added Line 462: if self.attname not in instance.__dict__:",
                        "Deleted Line 462: has_dimension_fields = self.width_field or self.height_field",
                        "Added Line 461: # Nothing to update if the field is deferred."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "django__django-16595": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/operations/fields.py": [
                        "def migration_name_fragment(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/operations/fields.py": [
                        "Added Line 251: operation, (AlterField, RemoveField)",
                        "Added Line 252: ) and self.is_same_field_operation(operation):",
                        "Deleted Line 252: ):",
                        "Deleted Line 250: if isinstance(operation, RemoveField) and self.is_same_field_operation(",
                        "Added Line 250: if isinstance(",
                        "Deleted Line 251: operation"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16642": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/http/response.py": [
                        "def set_headers(self, filelike):"
                    ]
                },
                "missing_lines": {
                    "django/http/response.py": [
                        "Added Line 614: \"compress\": \"application/x-compress\",",
                        "Added Line 612: \"br\": \"application/x-brotli\","
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16612": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/sites.py": [
                        "def catch_all_view(self, request, url):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 4,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-16315": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/compiler.py"
                ],
                "missing_functions": {
                    "django/db/models/query.py": [
                        "def bulk_create(",
                        "def _check_bulk_create_options("
                    ]
                },
                "missing_lines": {
                    "django/db/models/query.py": [
                        "Added Line 789: update_fields = [self.model._meta.get_field(name) for name in update_fields]",
                        "Deleted Line 723: update_fields = [self.model._meta.get_field(name) for name in update_fields]",
                        "Deleted Line 737: ]",
                        "Deleted Line 789: opts.pk.name if name == \"pk\" else name for name in unique_fields",
                        "Added Line 785: self.model._meta.get_field(opts.pk.name if name == \"pk\" else name)",
                        "Added Line 788: if update_fields:",
                        "Added Line 786: for name in unique_fields",
                        "Deleted Line 735: unique_fields = ["
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 1,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "django__django-16877": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/template/defaultfilters.py": [
                        "def escape_filter(value):"
                    ]
                },
                "missing_lines": {
                    "django/template/defaultfilters.py": [
                        "Added Line 448: def escapeseq(value):",
                        "Added Line 455: ",
                        "Added Line 451: individually, as a string that should be auto-escaped. Return a list with",
                        "Added Line 452: the results.",
                        "Added Line 450: An \"escape\" filter for sequences. Mark each element in the sequence,",
                        "Added Line 447: @register.filter(is_safe=True)",
                        "Added Line 449: \"\"\"",
                        "Added Line 454: return [conditional_escape(obj) for obj in value]",
                        "Added Line 453: \"\"\"",
                        "Added Line 456: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-17029": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/apps/registry.py": [
                        "def clear_cache(self):"
                    ]
                },
                "missing_lines": {
                    "django/apps/registry.py": [
                        "Added Line 376: self.get_swappable_settings_name.cache_clear()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16819": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/operations/models.py": [
                        "def describe(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/operations/models.py": [
                        "Added Line 864: def reduce(self, operation, app_label):",
                        "Added Line 866: return []",
                        "Added Line 868: ",
                        "Added Line 865: if isinstance(operation, RemoveIndex) and self.index.name == operation.name:",
                        "Added Line 867: return super().reduce(operation, app_label)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16667": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/forms/widgets.py": [
                        "def value_from_datadict(self, data, files, name):"
                    ]
                },
                "missing_lines": {
                    "django/forms/widgets.py": [
                        "Added Line 1165: return \"0-0-0\"",
                        "Added Line 1164: except OverflowError:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16662": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/writer.py": [
                        "def as_string(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/writer.py": [
                        "Added Line 180: imports, key=lambda i: (i.split()[0] == \"from\", i.split()[1])",
                        "Added Line 181: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 3,
                        "percentage": 60.0
                    }
                }
            }
        },
        "django__django-16661": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/options.py": [
                        "def lookup_allowed(self, lookup, value):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/options.py": [
                        "Added Line 467: and field is not model._meta.auto_field",
                        "Added Line 466: and field not in model._meta.parents.values()",
                        "Added Line 468: and (",
                        "Deleted Line 465: # model anyways. For example, if you filter on employee__department__id,",
                        "Added Line 471: )",
                        "Deleted Line 464: # It is allowed to filter on values that would be found from local",
                        "Deleted Line 469: and field not in prev_field.path_infos[-1].target_fields",
                        "Added Line 470: or part not in getattr(prev_field, \"to_fields\", [])",
                        "Deleted Line 466: # then the id value would be found already from employee__department_id.",
                        "Added Line 469: model._meta.auto_field is None"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16901": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/where.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-9296": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/paginator.py": [
                        "def __init__(self, object_list, per_page, orphans=0,"
                    ]
                },
                "missing_lines": {
                    "django/core/paginator.py": [
                        "Added Line 37: def __iter__(self):",
                        "Added Line 38: for page_number in self.page_range:",
                        "Added Line 39: yield self.page(page_number)",
                        "Added Line 40: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16938": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/core/serializers/python.py",
                    "django/core/serializers/xml_serializer.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-7530": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/core/management/commands/makemigrations.py": [
                        "def handle(self, *app_labels, **options):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-16899": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/contrib/admin/checks.py": [
                        "def _check_readonly_fields_item(self, obj, field_name, label):"
                    ]
                },
                "missing_lines": {
                    "django/contrib/admin/checks.py": [
                        "Deleted Line 775: \"'%s', or an attribute of '%s'.\"",
                        "Added Line 775: \"an attribute of '%s', or an attribute of '%s'.\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 3,
                        "percentage": 60.0
                    }
                }
            }
        },
        "django__django-16950": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/forms/models.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-17087": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "django/db/migrations/serializer.py": [
                        "def serialize(self):"
                    ]
                },
                "missing_lines": {
                    "django/db/migrations/serializer.py": [
                        "Deleted Line 171: return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {",
                        "Added Line 171: return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-20859": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/legend.py": [
                        "def __init__("
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/legend.py": [
                        "Deleted Line 437: elif isinstance(parent, Figure):",
                        "Added Line 443: )",
                        "Deleted Line 363: from matplotlib.figure import Figure",
                        "Added Line 363: from matplotlib.figure import FigureBase",
                        "Added Line 437: elif isinstance(parent, FigureBase):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 3,
                        "percentage": 37.5
                    }
                }
            }
        },
        "django__django-17084": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "django/db/models/sql/query.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-22719": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/category.py": [
                        "def update(self, data):",
                        "def convert(value, unit, axis):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/category.py": [
                        "Added Line 233: if data.size and convertible:",
                        "Deleted Line 233: if convertible:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-14623": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/ticker.py",
                    "lib/mpl_toolkits/mplot3d/axes3d.py"
                ],
                "missing_functions": {
                    "lib/matplotlib/axes/_base.py": [
                        "def set_ylim(self, bottom=None, top=None, emit=True, auto=False,",
                        "def set_xlim(self, left=None, right=None, emit=True, auto=False,"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/axes/_base.py": [
                        "Added Line 3648: swapped = bottom > top",
                        "Added Line 3269: left, right = right, left",
                        "Added Line 3268: if swapped:",
                        "Added Line 3651: if swapped:",
                        "Added Line 3652: bottom, top = top, bottom",
                        "Added Line 3265: swapped = left > right"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 19,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-13989": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/axes/_axes.py": [
                        "def hist(self, x, bins=None, range=None, density=None, weights=None,"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-20488": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/image.py": [
                        "def _make_image(self, A, in_bbox, out_bbox, clip_bbox, magnification=1.0,"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/image.py": [
                        "Deleted Line 535: if isinstance(self.norm, mcolors.LogNorm):",
                        "Added Line 535: if isinstance(self.norm, mcolors.LogNorm) and s_vmin <= 0:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 4,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "matplotlib__matplotlib-21568": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/dates.py": [
                        "def _wrap_in_tex(text):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/dates.py": [
                        "Deleted Line 598: # Braces ensure dashes are not spaced like binary operators.",
                        "Deleted Line 599: ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'",
                        "Added Line 599: ret_text = ret_text.replace('-', '{-}').replace(':', '{:}')",
                        "Added Line 602: ret_text = '$\\\\mathdefault{' + ret_text + '}$'",
                        "Added Line 601: ret_text = ret_text.replace(' ', r'\\;')",
                        "Added Line 600: # To not concatenate space between numbers.",
                        "Added Line 598: # Braces ensure symbols are not spaced like binary operators."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-22865": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/colorbar.py": [
                        "def _add_solids(self, X, Y, C):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/colorbar.py": [
                        "Added Line 654: if self.drawedges:",
                        "Added Line 656: end_idx = len(X) if self._extend_upper() else -1",
                        "Deleted Line 654: self.dividers.set_segments(",
                        "Added Line 658: else:",
                        "Added Line 659: self.dividers.set_segments([])",
                        "Added Line 655: start_idx = 0 if self._extend_lower() else 1",
                        "Added Line 657: self.dividers.set_segments(np.dstack([X, Y])[start_idx:end_idx])",
                        "Deleted Line 655: np.dstack([X, Y])[1:-1] if self.drawedges else [])"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-22871": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/dates.py": [
                        "def format_ticks(self, values):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/dates.py": [
                        "Deleted Line 799: if len(np.unique(tickdate[:, level])) > 1:",
                        "Added Line 799: unique = np.unique(tickdate[:, level])",
                        "Deleted Line 800: if level < 2:",
                        "Added Line 800: if len(unique) > 1:",
                        "Added Line 802: if level < 2 and np.any(unique == 1):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "matplotlib__matplotlib-20826": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/axis.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23299": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/__init__.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-20676": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/widgets.py": [
                        "def new_axes(self, ax):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/widgets.py": [
                        "Added Line 2164: self._edge_handles = ToolLineHandles(self.ax, positions,",
                        "Added Line 2160: if self.direction == 'horizontal':",
                        "Added Line 2159: # Define initial position using the axis bounds to keep the same bounds",
                        "Added Line 2161: positions = self.ax.get_xbound()",
                        "Added Line 2162: else:",
                        "Added Line 2163: positions = self.ax.get_ybound()",
                        "Deleted Line 2159: self._edge_handles = ToolLineHandles(self.ax, self.extents,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24026": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "lib/matplotlib/stackplot.py": [
                        "Added Line 9: import itertools",
                        "Added Line 116: facecolor=next(colors), label=next(labels, None),",
                        "Added Line 76: else:",
                        "Deleted Line 113: facecolor=color, label=next(labels, None),",
                        "Deleted Line 122: facecolor=color, label=next(labels, None),",
                        "Added Line 10: ",
                        "Added Line 77: colors = (axes._get_lines.get_next_color() for _ in y)",
                        "Added Line 75: colors = itertools.cycle(colors)",
                        "Added Line 124: facecolor=next(colors),"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 4,
                        "percentage": 30.76923076923077
                    }
                }
            }
        },
        "matplotlib__matplotlib-24570": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 4,
                        "percentage": 100.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23476": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/figure.py": [
                        "def __getstate__(self):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/figure.py": [
                        "Added Line 3027: state[\"_dpi\"] = state.get('_original_dpi', state['_dpi'])",
                        "Added Line 3028: ",
                        "Added Line 3026: # discard any changes to the dpi due to pixel ratio changes"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23314": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/mpl_toolkits/mplot3d/axes3d.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23412": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/patches.py": [
                        "def draw(self, renderer):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/patches.py": [
                        "Added Line 590: with cbook._setattr_cm(self, _dash_pattern=(self._dash_pattern)), \\"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 4,
                        "percentage": 80.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24637": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/offsetbox.py": [
                        "def draw(self, renderer):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/offsetbox.py": [
                        "Added Line 1449: renderer.open_group(self.__class__.__name__, gid=self.get_gid())",
                        "Added Line 1457: renderer.close_group(self.__class__.__name__)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24870": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/tri/_tricontour.py"
                ],
                "missing_functions": {
                    "lib/matplotlib/contour.py": [
                        "def _autolev(self, N):",
                        "def _contour_args(self, args, kwargs):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/contour.py": [
                        "Added Line 1125: if args:",
                        "Added Line 1129: levels_arg = [0, .5, 1]",
                        "Added Line 1459: x, y, z_orig, *args = args",
                        "Deleted Line 1127: else:",
                        "Added Line 1127: elif np.issubdtype(z_dtype, bool):",
                        "Added Line 1456: z = ma.asarray(z)",
                        "Deleted Line 1478: z = ma.asarray(args[2], dtype=np.float64)",
                        "Deleted Line 1126: levels_arg = 7  # Default, hard-wired.",
                        "Added Line 1460: x, y, z = self._check_xyz(x, y, z_orig, kwargs)",
                        "Deleted Line 1454: x, y, z = self._check_xyz(args[:3], kwargs)",
                        "Added Line 1128: if self.filled:",
                        "Added Line 1473: def _check_xyz(self, x, y, z, kwargs):",
                        "Deleted Line 1450: z = ma.asarray(args[0], dtype=np.float64)",
                        "Deleted Line 1455: args = args[3:]",
                        "Added Line 1470: self._process_contour_level_args(args, z.dtype)",
                        "Added Line 1120: def _process_contour_level_args(self, args, z_dtype):",
                        "Deleted Line 1465: self._process_contour_level_args(args)",
                        "Deleted Line 1452: args = args[1:]",
                        "Deleted Line 1125: if len(args) == 0:",
                        "Deleted Line 1473: x, y = args[:2]",
                        "Added Line 1455: z, *args = args",
                        "Added Line 1482: z = ma.asarray(z)",
                        "Deleted Line 1120: def _process_contour_level_args(self, args):",
                        "Added Line 1130: else:",
                        "Deleted Line 1468: def _check_xyz(self, args, kwargs):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 33,
                        "covered": 3,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "matplotlib__matplotlib-25122": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "lib/matplotlib/mlab.py": [
                        "Deleted Line 403: result /= np.abs(window).sum()",
                        "Deleted Line 398: result = np.abs(result) / np.abs(window).sum()",
                        "Added Line 403: result /= window.sum()",
                        "Added Line 398: result = np.abs(result) / window.sum()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 4,
                        "percentage": 50.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24970": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/colors.py": [
                        "def __call__(self, X, alpha=None, bytes=False):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/colors.py": [
                        "Added Line 723: xa[xa == self.N] = self.N - 1",
                        "Deleted Line 725: # Avoid converting large positive values to negative integers.",
                        "Added Line 724: # Avoid converting large positive values to negative integers.",
                        "Added Line 725: np.clip(xa, -1, self.N, out=xa)",
                        "Deleted Line 727: xa = xa.astype(int)",
                        "Deleted Line 718: with np.errstate(invalid=\"ignore\"):",
                        "Added Line 727: # We need this cast for unsigned ints as well as floats",
                        "Deleted Line 721: # truncate them towards zero.",
                        "Deleted Line 722: xa[xa < 0] = -1",
                        "Deleted Line 726: np.clip(xa, -1, self.N, out=xa)",
                        "Deleted Line 723: # xa == 1 (== N after multiplication) is not out of range.",
                        "Added Line 719: # Negative values are out of range, but astype(int) would",
                        "Added Line 718: xa *= self.N",
                        "Added Line 722: # xa == 1 (== N after multiplication) is not out of range.",
                        "Deleted Line 720: # Negative values are out of range, but astype(int) would",
                        "Deleted Line 724: xa[xa == self.N] = self.N - 1",
                        "Added Line 726: with np.errstate(invalid=\"ignore\"):",
                        "Added Line 721: xa[xa < 0] = -1",
                        "Added Line 728: xa = xa.astype(int)",
                        "Deleted Line 719: xa *= self.N",
                        "Added Line 720: # truncate them towards zero."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 21,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25311": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/offsetbox.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24177": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/axes/_base.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24149": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/axes/_axes.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24627": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/axes/_base.py": [
                        "def __clear(self):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/axes/_base.py": [
                        "Added Line 1319: for chld in old_children:",
                        "Added Line 1318: old_children, self._children = self._children, []",
                        "Added Line 1320: chld.axes = chld.figure = None",
                        "Deleted Line 1318: self._children = []"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25287": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/axis.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25775": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/backends/backend_agg.py",
                    "lib/matplotlib/backends/backend_cairo.py"
                ],
                "missing_functions": {
                    "lib/matplotlib/text.py": [
                        "def __init__(self,",
                        "def draw(self, renderer):",
                        "def update_from(self, other):",
                        "def get_rotation_mode(self):",
                        "def _reset_visual_defaults("
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/text.py": [
                        "Added Line 335: def get_antialiased(self):",
                        "Added Line 334: ",
                        "Added Line 194: if antialiased is not None:",
                        "Added Line 337: return self._antialiased",
                        "Added Line 338: ",
                        "Added Line 328: Antialiasing will be determined by :rc:`text.antialiased`",
                        "Added Line 320: Set whether to use antialiased rendering.",
                        "Added Line 324: antialiased : bool",
                        "Added Line 321: ",
                        "Added Line 326: Notes",
                        "Added Line 336: \"\"\"Return whether antialiased rendering is used.\"\"\"",
                        "Added Line 329: and the parameter *antialiased* will have no effect if the text contains",
                        "Added Line 330: math expressions.",
                        "Added Line 331: \"\"\"",
                        "Added Line 332: self._antialiased = antialiased",
                        "Added Line 768: gc.set_antialiased(self._antialiased)",
                        "Added Line 325: ",
                        "Added Line 323: ----------",
                        "Added Line 173: antialiased=None",
                        "Added Line 318: def set_antialiased(self, antialiased):",
                        "Added Line 118: antialiased=None,  # defaults to rcParams['text.antialiased']",
                        "Added Line 139: self._antialiased = mpl.rcParams['text.antialiased']",
                        "Added Line 352: self._antialiased = other._antialiased",
                        "Added Line 327: -----",
                        "Added Line 195: self.set_antialiased(antialiased)",
                        "Added Line 319: \"\"\"",
                        "Added Line 333: self.stale = True",
                        "Added Line 322: Parameters",
                        "Added Line 154: antialiased=antialiased"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 39,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25479": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/cm.py",
                    "lib/matplotlib/colors.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26291": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/mpl_toolkits/axes_grid1/inset_locator.py": [
                        "def draw(self, renderer):"
                    ]
                },
                "missing_lines": {
                    "lib/mpl_toolkits/axes_grid1/inset_locator.py": [
                        "Added Line 72: if renderer is None:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25332": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/cbook.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25960": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/figure.py": [
                        "def subfigures(self, nrows=1, ncols=1, squeeze=True,"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/figure.py": [
                        "Added Line 1599: bbox = Bbox.from_extents(left, bottom, right, top)",
                        "Added Line 1598: for sf, left, right in zip(sfrow, lefts, rights):",
                        "Added Line 1592: if self.get_layout_engine() is None and (wspace is not None or",
                        "Added Line 1596: bottoms, tops, lefts, rights = gs.get_grid_positions(self)",
                        "Added Line 1600: sf._redo_transform_rel_fig(bbox=bbox)",
                        "Added Line 1593: hspace is not None):",
                        "Added Line 1595: # and no space is left.  So need to account for it here if required.",
                        "Added Line 1569: not using a layout engine.",
                        "Added Line 1597: for sfrow, bottom, top in zip(sfarr, bottoms, tops):",
                        "Added Line 1568: constrained layout (see `~.ConstrainedLayoutEngine`), or zero if",
                        "Added Line 1594: # Gridspec wspace and hspace is ignored on subfigure instantiation,",
                        "Added Line 1601: ",
                        "Deleted Line 1583: height_ratios=height_ratios)",
                        "Deleted Line 1568: rcParams when necessary.",
                        "Added Line 1584: height_ratios=height_ratios,",
                        "Added Line 1567: If not given, the values will be inferred from rcParams if using",
                        "Deleted Line 1567: If not given, the values will be inferred from a figure or"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 1,
                        "percentage": 5.555555555555555
                    }
                }
            }
        },
        "pallets__flask-5014": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/flask/blueprints.py": [
                        "def __init__("
                    ]
                },
                "missing_lines": {
                    "src/flask/blueprints.py": [
                        "Added Line 195: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "psf__requests-1766": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "requests/auth.py": [
                        "def sha_utf8(x):"
                    ]
                },
                "missing_lines": {
                    "requests/auth.py": [
                        "Deleted Line 108: ",
                        "Added Line 108: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "psf__requests-1724": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "requests/sessions.py": [
                        "def request(self, method, url,"
                    ]
                },
                "missing_lines": {
                    "requests/sessions.py": [
                        "Added Line 312: ",
                        "Deleted Line 15: from .compat import cookielib, OrderedDict, urljoin, urlparse, urlunparse",
                        "Added Line 15: from .compat import cookielib, OrderedDict, urljoin, urlparse, urlunparse, builtin_str",
                        "Added Line 313: method = builtin_str(method)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "psf__requests-1142": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "requests/models.py": [
                        "def prepare_body(self, data, files):"
                    ]
                },
                "missing_lines": {
                    "requests/models.py": [
                        "Deleted Line 389: self.headers['Content-Length'] = '0'",
                        "Added Line 396: self.headers['Content-Length'] = '0'",
                        "Added Line 395: elif self.method not in ('GET', 'HEAD'):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "mwaskom__seaborn-3187": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "seaborn/utils.py"
                ],
                "missing_functions": {
                    "seaborn/_core/scales.py": [
                        "def spacer(x):"
                    ]
                },
                "missing_lines": {
                    "seaborn/_core/scales.py": [
                        "Added Line 387: if hasattr(axis.major.formatter, \"set_scientific\"):",
                        "Added Line 381: # Avoid having an offset / scientific notation in a legend",
                        "Added Line 388: axis.major.formatter.set_scientific(False)",
                        "Added Line 385: if hasattr(axis.major.formatter, \"set_useOffset\"):",
                        "Added Line 386: axis.major.formatter.set_useOffset(False)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 3,
                        "percentage": 25.0
                    }
                }
            }
        },
        "psf__requests-1921": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "requests/sessions.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "psf__requests-2317": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "requests/sessions.py": [
                        "def request(self, method, url,"
                    ]
                },
                "missing_lines": {
                    "requests/sessions.py": [
                        "Added Line 16: from .compat import cookielib, OrderedDict, urljoin, urlparse",
                        "Deleted Line 16: from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "psf__requests-2931": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "requests/models.py": [
                        "def prepare_url(self, url, params):",
                        "def _encode_params(data):"
                    ]
                },
                "missing_lines": {
                    "requests/models.py": [
                        "Added Line 84: return data",
                        "Added Line 389: params = to_native_string(params)",
                        "Added Line 390: ",
                        "Added Line 388: if isinstance(params, (str, bytes)):",
                        "Deleted Line 84: return to_native_string(data)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26208": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/axes/_base.py": [
                        "def twiny(self):",
                        "def twinx(self):"
                    ]
                },
                "missing_lines": {
                    "lib/matplotlib/axes/_base.py": [
                        "Added Line 4474: ax2.yaxis.units = self.yaxis.units",
                        "Added Line 4444: ax2.xaxis.units = self.xaxis.units"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "psf__requests-6028": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "requests/utils.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "psf__requests-5414": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "requests/models.py": [
                        "def prepare_url(self, url, params):"
                    ]
                },
                "missing_lines": {
                    "requests/models.py": [
                        "Deleted Line 406: elif host.startswith(u'*'):",
                        "Added Line 406: elif host.startswith((u'*', u'.')):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26342": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/collections.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26113": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "lib/matplotlib/axes/_axes.py": [
                        "def reduce_C_function(C: array) -> float"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "pydata__xarray-4075": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "xarray/core/weighted.py": [
                        "def _sum_of_weights("
                    ]
                },
                "missing_lines": {
                    "xarray/core/weighted.py": [
                        "Added Line 147: if self.weights.dtype == bool:",
                        "Added Line 150: )",
                        "Added Line 146: # (and not 2); GH4074",
                        "Added Line 149: mask, self.weights.astype(int), dim=dim, skipna=False",
                        "Added Line 151: else:",
                        "Added Line 152: sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)",
                        "Added Line 148: sum_of_weights = self._reduce("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "pydata__xarray-3305": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/dataset.py",
                    "xarray/core/variable.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "mwaskom__seaborn-3069": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "seaborn/_core/plot.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26466": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "lib/matplotlib/text.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-3151": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "xarray/core/combine.py": [
                        "Added Line 506: if not (indexes.is_monotonic_increasing",
                        "Added Line 509: \" global indexes along dimension {}\"",
                        "Deleted Line 509: raise ValueError(\"Resulting object does not have monotonic\"",
                        "Added Line 510: .format(dim))",
                        "Deleted Line 505: if dim in concatenated:",
                        "Deleted Line 507: if not (indexes.is_monotonic_increasing",
                        "Deleted Line 508: or indexes.is_monotonic_decreasing):",
                        "Deleted Line 510: \" global indexes along dimension {}\"",
                        "Deleted Line 511: .format(dim))",
                        "Deleted Line 506: indexes = concatenated.indexes.get(dim)",
                        "Added Line 508: raise ValueError(\"Resulting object does not have monotonic\"",
                        "Added Line 507: or indexes.is_monotonic_decreasing):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 3,
                        "percentage": 20.0
                    }
                }
            }
        },
        "pydata__xarray-2905": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "xarray/core/variable.py": [
                        "def as_compatible_data(data, fastpath=False):"
                    ]
                },
                "missing_lines": {
                    "xarray/core/variable.py": [
                        "Added Line 221: if isinstance(data, (pd.Series, pd.Index, pd.DataFrame)):",
                        "Added Line 222: data = data.values",
                        "Deleted Line 221: data = getattr(data, \"values\", data)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-3677": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "xarray/core/dataset.py": [
                        "def merge("
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "pydata__xarray-4356": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "xarray/core/nanops.py": [
                        "Deleted Line 29: if hasattr(axis, \"__len__\"):  # if tuple or list",
                        "Added Line 31: null_mask = (np.take(mask.shape, axis).prod() - mask.sum(axis) - min_count) < 0"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 4,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "pydata__xarray-4094": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/dataarray.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-3095": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/indexing.py",
                    "xarray/core/variable.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 49,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-4966": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "xarray/coding/variables.py": [
                        "def decode(self, variable, name=None):"
                    ]
                },
                "missing_lines": {
                    "xarray/coding/variables.py": [
                        "Added Line 326: attrs[\"_FillValue\"] = new_fill"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 7,
                        "percentage": 87.5
                    }
                }
            }
        },
        "pydata__xarray-6461": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "xarray/core/computation.py": [
                        "Added Line 1831: keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})",
                        "Deleted Line 1828: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "pydata__xarray-4629": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "pydata__xarray-4687": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/computation.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-3993": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/dataset.py"
                ],
                "missing_functions": {
                    "xarray/core/dataarray.py": [
                        "def integrate(",
                        "def differentiate("
                    ]
                },
                "missing_lines": {
                    "xarray/core/dataarray.py": [
                        "Added Line 3544: msg = (",
                        "Added Line 3538: raise ValueError(",
                        "Added Line 3547: \"`Dataset.integrate`. Please pass `coord` instead.\"",
                        "Deleted Line 3498: Can be used to specify the unit if datetime coordinate is used.",
                        "Added Line 3545: \"The `dim` keyword argument to `DataArray.integrate` is \"",
                        "Deleted Line 3489: This feature is limited to simple cartesian geometry, i.e. dim",
                        "Added Line 3539: \"Cannot pass both 'dim' and 'coord'. Please pass only 'coord' instead.\"",
                        "Added Line 3546: \"being replaced with `coord`, for consistency with \"",
                        "Deleted Line 3497: \"ps\", \"fs\", \"as\"}, optional",
                        "Added Line 3485: coord: Union[Hashable, Sequence[Hashable]] = None,",
                        "Added Line 3540: )",
                        "Added Line 3490: \"\"\"Integrate along the given coordinate using the trapezoidal rule.",
                        "Added Line 3552: ds = self._to_temp_dataset().integrate(coord, datetime_unit)",
                        "Added Line 3549: )",
                        "Added Line 3550: warnings.warn(msg, FutureWarning, stacklevel=2)",
                        "Added Line 3542: if dim is not None and coord is None:",
                        "Added Line 3502: datetime_unit: {'Y', 'M', 'W', 'D', 'h', 'm', 's', 'ms', 'us', 'ns', \\",
                        "Added Line 3486: datetime_unit: str = None,",
                        "Added Line 3488: dim: Union[Hashable, Sequence[Hashable]] = None,",
                        "Added Line 3493: This feature is limited to simple cartesian geometry, i.e. coord",
                        "Added Line 3548: \" `dim` will be removed in version 0.19.0.\"",
                        "Added Line 3511: Dataset.integrate",
                        "Deleted Line 3496: datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\",
                        "Added Line 3543: coord = dim",
                        "Added Line 3537: if dim is not None and coord is not None:",
                        "Added Line 3503: 'ps', 'fs', 'as'}, optional",
                        "Deleted Line 3486: \"\"\" integrate the array with the trapezoidal rule.",
                        "Added Line 3551: ",
                        "Added Line 3498: coord: hashable, or a sequence of hashable",
                        "Added Line 3499: Coordinate(s) used for the integration.",
                        "Added Line 3487: *,",
                        "Added Line 3541: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 49,
                        "covered": 3,
                        "percentage": 6.122448979591836
                    }
                }
            }
        },
        "pylint-dev__pylint-4551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "pylint/pyreverse/inspector.py",
                    "pylint/pyreverse/utils.py",
                    "pylint/pyreverse/writer.py"
                ],
                "missing_functions": {
                    "pylint/pyreverse/diagrams.py": [
                        "def class_names(self, nodes):"
                    ]
                },
                "missing_lines": {
                    "pylint/pyreverse/diagrams.py": [
                        "Added Line 125: isinstance(node, (astroid.ClassDef, astroid.Name, astroid.Subscript))",
                        "Deleted Line 125: isinstance(node, astroid.ClassDef)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 126,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-6599": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/computation.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-6744": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "xarray/core/rolling.py": [
                        "def __init__("
                    ]
                },
                "missing_lines": {
                    "xarray/core/rolling.py": [
                        "Added Line 270: def __iter__(self) -> Iterator[tuple[DataArray, DataArray]]:",
                        "Deleted Line 270: def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:",
                        "Deleted Line 279: counts = window.count(dim=self.dim[0])",
                        "Added Line 284: counts = window.count(dim=dim0)",
                        "Added Line 274: dim0 = self.dim[0]",
                        "Deleted Line 277: window = self.obj.isel({self.dim[0]: slice(start, stop)})",
                        "Added Line 275: window0 = int(self.window[0])",
                        "Deleted Line 275: starts[: int(self.window[0])] = 0",
                        "Deleted Line 274: starts = stops - int(self.window[0])",
                        "Deleted Line 273: stops = np.arange(1, len(self.window_labels) + 1)",
                        "Added Line 273: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 6,
                        "percentage": 35.294117647058826
                    }
                }
            }
        },
        "pydata__xarray-7229": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/computation.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 29,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-4661": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "pylint/config/__init__.py",
                    "setup.cfg"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-4604": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "pylint/checkers/variables.py",
                    "pylint/constants.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-6386": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "pylint/config/argument.py",
                    "pylint/config/arguments_manager.py",
                    "pylint/config/utils.py",
                    "pylint/lint/base_options.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-7393": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/indexing.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-6903": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "pylint/lint/run.py": [
                        "Added Line 64: # assume we have 1 CPU available",
                        "Added Line 66: avail_cpu = 1",
                        "Added Line 61: ",
                        "Added Line 62: # In K8s Pods also a fraction of a single core could be available",
                        "Added Line 65: if avail_cpu == 0:",
                        "Added Line 63: # As multiprocessing is not able to run only a \"fraction\" of process",
                        "Added Line 67: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-7277": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "pylint/__init__.py": [
                        "Added Line 102: env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")",
                        "Deleted Line 100: env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")",
                        "Added Line 101: sys.path.pop(0)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "pylint-dev__pylint-4970": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "pylint/checkers/similar.py": [
                        "def append_stream(self, streamid: str, stream: TextIO, encoding=None) -> None:"
                    ]
                },
                "missing_lines": {
                    "pylint/checkers/similar.py": [
                        "Added Line 393: if self.min_lines == 0:",
                        "Added Line 394: return"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-6528": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "pylint/lint/pylinter.py"
                ],
                "missing_functions": {
                    "pylint/lint/expand_modules.py": [
                        "def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> b"
                    ]
                },
                "missing_lines": {
                    "pylint/lint/expand_modules.py": [
                        "Added Line 60: )",
                        "Added Line 58: or _is_in_ignore_list_re(basename, ignore_list_re)",
                        "Added Line 57: basename in ignore_list",
                        "Added Line 56: return (",
                        "Added Line 49: def _is_ignored_file(",
                        "Deleted Line 64: if (",
                        "Added Line 61: ",
                        "Deleted Line 67: or _is_in_ignore_list_re(something, ignore_list_paths_re)",
                        "Added Line 55: basename = os.path.basename(element)",
                        "Added Line 51: ignore_list: list[str],",
                        "Added Line 62: ",
                        "Added Line 50: element: str,",
                        "Added Line 53: ignore_list_paths_re: list[Pattern[str]],",
                        "Added Line 59: or _is_in_ignore_list_re(element, ignore_list_paths_re)",
                        "Deleted Line 65: basename in ignore_list",
                        "Added Line 52: ignore_list_re: list[Pattern[str]],",
                        "Added Line 54: ) -> bool:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "lines": {
                        "total": 35,
                        "covered": 3,
                        "percentage": 8.571428571428571
                    }
                }
            }
        },
        "pylint-dev__pylint-7080": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "pylint/lint/expand_modules.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-8898": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "pylint/utils/__init__.py",
                    "pylint/utils/utils.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 32,
                        "covered": 2,
                        "percentage": 6.25
                    }
                }
            }
        },
        "pytest-dev__pytest-5262": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/capture.py": [
                        "def name(self):"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/capture.py": [
                        "Added Line 453: ",
                        "Added Line 451: def mode(self):",
                        "Added Line 452: return self.buffer.mode.replace(\"b\", \"\")",
                        "Added Line 450: @property"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-10081": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/unittest.py": [
                        "def runtest(self) -> None:"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/unittest.py": [
                        "Added Line 320: assert isinstance(self.parent, UnitTestCase)",
                        "Added Line 322: if self.config.getoption(\"usepdb\") and not skipped:",
                        "Added Line 321: skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "pydata__xarray-6721": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "pytest-dev__pytest-10356": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/mark/structures.py": [
                        "def __call__(self, *args: object, **kwargs: object):",
                        "def store_mark(obj, mark: Mark) -> None:"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/mark/structures.py": [
                        "Added Line 368: \"\"\"",
                        "Added Line 380: else:",
                        "Added Line 381: mark_attribute = getattr(obj, \"pytestmark\", [])",
                        "Added Line 359: obj: Union[object, type],",
                        "Added Line 382: if isinstance(mark_attribute, list):",
                        "Added Line 365: If obj is a class and consider_mro is true, return marks applied to",
                        "Added Line 366: this class and all of its super-classes in MRO order. If consider_mro",
                        "Deleted Line 359: \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"",
                        "Added Line 383: mark_list = mark_attribute",
                        "Added Line 385: mark_list = [mark_attribute]",
                        "Added Line 375: for item in mark_lists:",
                        "Deleted Line 361: if not isinstance(mark_list, list):",
                        "Added Line 369: if isinstance(obj, type):",
                        "Added Line 414: obj.pytestmark = [*get_unpacked_marks(obj, consider_mro=False), mark]",
                        "Added Line 379: mark_list.append(item)",
                        "Added Line 374: mark_list = []",
                        "Added Line 370: if not consider_mro:",
                        "Added Line 367: is false, only return marks applied directly to this class.",
                        "Deleted Line 358: def get_unpacked_marks(obj: object) -> Iterable[Mark]:",
                        "Added Line 373: mark_lists = [x.__dict__.get(\"pytestmark\", []) for x in obj.__mro__]",
                        "Added Line 384: else:",
                        "Added Line 378: else:",
                        "Added Line 358: def get_unpacked_marks(",
                        "Added Line 372: else:",
                        "Deleted Line 363: return normalize_mark_list(mark_list)",
                        "Added Line 377: mark_list.extend(item)",
                        "Added Line 364: ",
                        "Deleted Line 391: obj.pytestmark = [*get_unpacked_marks(obj), mark]",
                        "Added Line 371: mark_lists = [obj.__dict__.get(\"pytestmark\", [])]",
                        "Deleted Line 362: mark_list = [mark_list]",
                        "Added Line 376: if isinstance(item, list):",
                        "Added Line 386: return list(normalize_mark_list(mark_list))",
                        "Added Line 363: \"\"\"Obtain the unpacked marks that are stored on an object."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 37,
                        "covered": 4,
                        "percentage": 10.81081081081081
                    }
                }
            }
        },
        "pytest-dev__pytest-10051": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/logging.py": [
                        "def messages(self) -> List[str]:",
                        "def reset(self) -> None:"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/logging.py": [
                        "Added Line 347: def clear(self) -> None:",
                        "Added Line 446: self.handler.clear()",
                        "Deleted Line 43: ",
                        "Added Line 349: self.stream = StringIO()",
                        "Added Line 350: ",
                        "Added Line 348: self.records.clear()",
                        "Deleted Line 443: self.handler.reset()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-5809": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "src/_pytest/pastebin.py": [
                        "Added Line 80: params = {\"code\": contents, \"lexer\": \"text\", \"expiry\": \"1week\"}",
                        "Deleted Line 80: params = {",
                        "Deleted Line 83: \"expiry\": \"1week\",",
                        "Deleted Line 81: \"code\": contents,",
                        "Deleted Line 84: }"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "pytest-dev__pytest-5787": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/reports.py": [
                        "def pytest_report_from_serializable(data):",
                        "def _to_json(self):",
                        "def _from_json(cls, reportdict):"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/reports.py": [
                        "Added Line 342: ",
                        "Deleted Line 242: reprlocals=reprlocals,",
                        "Added Line 412: \"\"\"",
                        "Added Line 468: deserialize_repr_crash(repr_crash_data),",
                        "Added Line 359: def serialize_repr_traceback(reprtraceback):",
                        "Added Line 471: )",
                        "Added Line 393: ):",
                        "Deleted Line 218: ):",
                        "Added Line 366: def serialize_repr_crash(reprcrash):",
                        "Added Line 385: else:",
                        "Added Line 375: if isinstance(rep.longrepr, ExceptionChainRepr):",
                        "Added Line 479: ",
                        "Deleted Line 163: ",
                        "Deleted Line 238: ",
                        "Added Line 466: (",
                        "Added Line 415: data = entry_data[\"data\"]",
                        "Deleted Line 186: ",
                        "Added Line 458: )",
                        "Added Line 414: def deserialize_repr_entry(entry_data):",
                        "Added Line 435: elif entry_type == \"ReprEntryNative\":",
                        "Deleted Line 234: if data[\"reprfileloc\"]:",
                        "Deleted Line 254: reprtraceback=ReprTraceback(**reprtraceback),",
                        "Deleted Line 190: self.longrepr, \"reprcrash\"",
                        "Added Line 475: ",
                        "Added Line 351: ",
                        "Added Line 437: else:",
                        "Deleted Line 225: for entry_data in reprtraceback[\"reprentries\"]:",
                        "Added Line 384: )",
                        "Added Line 423: if data[\"reprfileloc\"]:",
                        "Added Line 378: result[\"chain\"].append(",
                        "Deleted Line 235: reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])",
                        "Deleted Line 241: reprfuncargs=reprfuncargs,",
                        "Deleted Line 246: elif entry_type == \"ReprEntryNative\":",
                        "Deleted Line 256: )",
                        "Added Line 402: elif name == \"result\":",
                        "Added Line 403: d[name] = None  # for now",
                        "Added Line 348: Returns the contents of this report as a dict of builtin entries, suitable for",
                        "Added Line 372: \"reprtraceback\": serialize_repr_traceback(rep.longrepr.reprtraceback),",
                        "Deleted Line 236: if data[\"reprlocals\"]:",
                        "Added Line 377: for repr_traceback, repr_crash, description in rep.longrepr.chain:",
                        "Added Line 397: else:",
                        "Added Line 429: lines=data[\"lines\"],",
                        "Deleted Line 237: reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])",
                        "Added Line 453: and \"reprtraceback\" in reportdict[\"longrepr\"]",
                        "Deleted Line 224: reprentry = None",
                        "Deleted Line 217: and \"reprtraceback\" in reportdict[\"longrepr\"]",
                        "Added Line 419: reprfileloc = None",
                        "Added Line 360: result = reprtraceback.__dict__.copy()",
                        "Added Line 446: ",
                        "Deleted Line 164: def disassembled_report(rep):",
                        "Added Line 398: d[\"longrepr\"] = report.longrepr",
                        "Added Line 400: if isinstance(d[name], (py.path.local, Path)):",
                        "Added Line 363: ]",
                        "Added Line 344: def _report_to_json(report):",
                        "Added Line 413: ",
                        "Added Line 380: serialize_repr_traceback(repr_traceback),",
                        "Added Line 381: serialize_repr_crash(repr_crash),",
                        "Added Line 477: exception_info.addsection(*section)",
                        "Added Line 350: \"\"\"",
                        "Added Line 434: )",
                        "Deleted Line 214: if reportdict[\"longrepr\"]:",
                        "Deleted Line 170: entry_data = {",
                        "Added Line 389: d = report.__dict__.copy()",
                        "Deleted Line 251: reprtraceback[\"reprentries\"] = unserialized_entries",
                        "Added Line 461: chain = []",
                        "Added Line 427: ",
                        "Added Line 476: for section in reportdict[\"longrepr\"][\"sections\"]:",
                        "Deleted Line 166: reprcrash = rep.longrepr.reprcrash.__dict__.copy()",
                        "Added Line 417: if entry_type == \"ReprEntry\":",
                        "Added Line 465: chain.append(",
                        "Added Line 431: reprlocals=reprlocals,",
                        "Added Line 369: def serialize_longrepr(rep):",
                        "Deleted Line 253: exception_info = ReprExceptionInfo(",
                        "Deleted Line 173: }",
                        "Deleted Line 177: new_entries.append(entry_data)",
                        "Deleted Line 198: if isinstance(d[name], (py.path.local, Path)):",
                        "Deleted Line 220: reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]",
                        "Deleted Line 250: unserialized_entries.append(reprentry)",
                        "Added Line 353: entry_data = {\"type\": type(entry).__name__, \"data\": entry.__dict__.copy()}",
                        "Deleted Line 183: \"reprtraceback\": reprtraceback,",
                        "Added Line 379: (",
                        "Added Line 374: }",
                        "Added Line 370: result = {",
                        "Added Line 411: Returns **kwargs that can be used to construct a TestReport or CollectReport instance.",
                        "Added Line 456: reprtraceback = deserialize_repr_traceback(",
                        "Deleted Line 228: if entry_type == \"ReprEntry\":",
                        "Added Line 467: deserialize_repr_traceback(repr_traceback_data),",
                        "Added Line 392: report.longrepr, \"reprcrash\"",
                        "Deleted Line 200: elif name == \"result\":",
                        "Added Line 420: reprlocals = None",
                        "Added Line 447: def deserialize_repr_crash(repr_crash_dict):",
                        "Added Line 445: return ReprTraceback(**repr_traceback_dict)",
                        "Added Line 391: if hasattr(report.longrepr, \"reprtraceback\") and hasattr(",
                        "Deleted Line 168: new_entries = []",
                        "Deleted Line 261: ",
                        "Added Line 430: reprfuncargs=reprfuncargs,",
                        "Added Line 352: def serialize_repr_entry(entry):",
                        "Added Line 371: \"reprcrash\": serialize_repr_crash(rep.longrepr.reprcrash),",
                        "Added Line 448: return ReprFileLocation(**repr_crash_dict)",
                        "Added Line 401: d[name] = str(d[name])",
                        "Deleted Line 194: d[\"longrepr\"] = str(self.longrepr)",
                        "Deleted Line 174: for key, value in entry_data[\"data\"].items():",
                        "Deleted Line 191: ):",
                        "Deleted Line 176: entry_data[\"data\"][key] = value.__dict__.copy()",
                        "Deleted Line 179: reprtraceback[\"reprentries\"] = new_entries",
                        "Deleted Line 187: d = self.__dict__.copy()",
                        "Added Line 176: kwargs = _report_kwargs_from_json(reportdict)",
                        "Added Line 345: \"\"\"",
                        "Deleted Line 184: \"sections\": rep.longrepr.sections,",
                        "Deleted Line 247: reprentry = ReprEntryNative(data[\"lines\"])",
                        "Added Line 362: serialize_repr_entry(x) for x in reprtraceback.reprentries",
                        "Deleted Line 243: filelocrepr=reprfileloc,",
                        "Added Line 408: \"\"\"",
                        "Added Line 460: if reportdict[\"longrepr\"][\"chain\"]:",
                        "Added Line 470: )",
                        "Added Line 346: This was originally the serialize_report() function from xdist (ca03269).",
                        "Added Line 474: exception_info = ReprExceptionInfo(reprtraceback, reprcrash)",
                        "Added Line 396: d[\"longrepr\"] = str(report.longrepr)",
                        "Deleted Line 249: _report_unserialization_failure(entry_type, cls, reportdict)",
                        "Added Line 406: ",
                        "Added Line 442: repr_traceback_dict[\"reprentries\"] = [",
                        "Added Line 382: description,",
                        "Deleted Line 240: lines=data[\"lines\"],",
                        "Added Line 357: return entry_data",
                        "Added Line 365: ",
                        "Deleted Line 216: \"reprcrash\" in reportdict[\"longrepr\"]",
                        "Added Line 343: ",
                        "Added Line 390: if hasattr(report.longrepr, \"toterminal\"):",
                        "Added Line 422: reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])",
                        "Deleted Line 169: for entry in reprtraceback[\"reprentries\"]:",
                        "Deleted Line 223: unserialized_entries = []",
                        "Deleted Line 232: if data[\"reprfuncargs\"]:",
                        "Deleted Line 248: else:",
                        "Deleted Line 259: exception_info.addsection(*section)",
                        "Added Line 459: reprcrash = deserialize_repr_crash(reportdict[\"longrepr\"][\"reprcrash\"])",
                        "Deleted Line 229: reprfuncargs = None",
                        "Added Line 463: \"longrepr\"",
                        "Deleted Line 201: d[name] = None  # for now",
                        "Deleted Line 171: \"type\": type(entry).__name__,",
                        "Added Line 349: serialization.",
                        "Added Line 426: reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])",
                        "Deleted Line 172: \"data\": entry.__dict__.copy(),",
                        "Deleted Line 260: reportdict[\"longrepr\"] = exception_info",
                        "Deleted Line 197: for name in d:",
                        "Added Line 480: return reportdict",
                        "Added Line 164: return _report_to_json(self)",
                        "Deleted Line 175: if hasattr(value, \"__dict__\"):",
                        "Deleted Line 181: return {",
                        "Deleted Line 257: ",
                        "Added Line 409: This was originally the serialize_report() function from xdist (ca03269).",
                        "Added Line 421: if data[\"reprfuncargs\"]:",
                        "Deleted Line 185: }",
                        "Added Line 439: return reprentry",
                        "Added Line 358: ",
                        "Deleted Line 231: reprlocals = None",
                        "Deleted Line 227: entry_type = entry_data[\"type\"]",
                        "Deleted Line 189: if hasattr(self.longrepr, \"reprtraceback\") and hasattr(",
                        "Deleted Line 180: ",
                        "Added Line 364: return result",
                        "Added Line 428: reprentry = ReprEntry(",
                        "Deleted Line 244: style=data[\"style\"],",
                        "Added Line 455: ",
                        "Added Line 347: ",
                        "Added Line 425: if data[\"reprlocals\"]:",
                        "Added Line 464: ][\"chain\"]:",
                        "Deleted Line 245: )",
                        "Deleted Line 262: return cls(**reportdict)",
                        "Deleted Line 255: reprcrash=ReprFileLocation(**reprcrash),",
                        "Added Line 356: entry_data[\"data\"][key] = value.__dict__.copy()",
                        "Added Line 395: else:",
                        "Added Line 376: result[\"chain\"] = []",
                        "Deleted Line 193: else:",
                        "Deleted Line 233: reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])",
                        "Deleted Line 188: if hasattr(self.longrepr, \"toterminal\"):",
                        "Added Line 469: description,",
                        "Deleted Line 202: return d",
                        "Added Line 368: ",
                        "Added Line 451: reportdict[\"longrepr\"]",
                        "Added Line 450: if (",
                        "Deleted Line 239: reprentry = ReprEntry(",
                        "Added Line 404: return d",
                        "Added Line 361: result[\"reprentries\"] = [",
                        "Deleted Line 199: d[name] = str(d[name])",
                        "Added Line 462: for repr_traceback_data, repr_crash_data, description in reportdict[",
                        "Added Line 6: from _pytest._code.code import ExceptionChainRepr",
                        "Added Line 383: )",
                        "Added Line 472: exception_info = ExceptionChainRepr(chain)",
                        "Added Line 416: entry_type = entry_data[\"type\"]",
                        "Added Line 478: reportdict[\"longrepr\"] = exception_info",
                        "Deleted Line 182: \"reprcrash\": reprcrash,",
                        "Added Line 394: d[\"longrepr\"] = serialize_longrepr(report)",
                        "Added Line 438: _report_unserialization_failure(entry_type, TestReport, reportdict)",
                        "Deleted Line 215: if (",
                        "Deleted Line 221: reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]",
                        "Added Line 436: reprentry = ReprEntryNative(data[\"lines\"])",
                        "Deleted Line 167: ",
                        "Deleted Line 230: reprfileloc = None",
                        "Added Line 443: deserialize_repr_entry(x) for x in repr_traceback_dict[\"reprentries\"]",
                        "Deleted Line 165: reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()",
                        "Added Line 405: ",
                        "Deleted Line 222: ",
                        "Deleted Line 252: ",
                        "Added Line 440: ",
                        "Added Line 441: def deserialize_repr_traceback(repr_traceback_dict):",
                        "Added Line 432: filelocrepr=reprfileloc,",
                        "Added Line 418: reprfuncargs = None",
                        "Added Line 367: return reprcrash.__dict__.copy()",
                        "Deleted Line 196: d[\"longrepr\"] = self.longrepr",
                        "Deleted Line 219: ",
                        "Added Line 373: \"sections\": rep.longrepr.sections,",
                        "Deleted Line 178: ",
                        "Added Line 444: ]",
                        "Added Line 452: and \"reprcrash\" in reportdict[\"longrepr\"]",
                        "Deleted Line 258: for section in reportdict[\"longrepr\"][\"sections\"]:",
                        "Added Line 457: reportdict[\"longrepr\"][\"reprtraceback\"]",
                        "Added Line 387: return result",
                        "Deleted Line 192: d[\"longrepr\"] = disassembled_report(self)",
                        "Added Line 424: reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])",
                        "Added Line 433: style=data[\"style\"],",
                        "Added Line 473: else:",
                        "Added Line 407: def _report_kwargs_from_json(reportdict):",
                        "Added Line 399: for name in d:",
                        "Added Line 449: ",
                        "Deleted Line 195: else:",
                        "Added Line 177: return cls(**kwargs)",
                        "Added Line 454: ):",
                        "Added Line 410: ",
                        "Added Line 355: if hasattr(value, \"__dict__\"):",
                        "Added Line 388: ",
                        "Added Line 386: result[\"chain\"] = None",
                        "Deleted Line 226: data = entry_data[\"data\"]"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 232,
                        "covered": 1,
                        "percentage": 0.43103448275862066
                    }
                }
            }
        },
        "pytest-dev__pytest-5631": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "src/_pytest/compat.py": [
                        "Added Line 78: )",
                        "Added Line 68: mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
                        "Added Line 77: ]",
                        "Deleted Line 67: mock_modules = [sys.modules.get(\"mock\"), sys.modules.get(\"unittest.mock\")]",
                        "Deleted Line 68: if any(mock_modules):",
                        "Added Line 67: ",
                        "Deleted Line 69: sentinels = [m.DEFAULT for m in mock_modules if m is not None]",
                        "Added Line 69: ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
                        "Added Line 75: if not p.attribute_name",
                        "Added Line 76: and (p.new is mock_sentinel or p.new is ut_mock_sentinel)",
                        "Added Line 74: for p in patchings",
                        "Deleted Line 73: return len(patchings)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 19,
                        "covered": 7,
                        "percentage": 36.84210526315789
                    }
                }
            }
        },
        "pytest-dev__pytest-7205": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "src/_pytest/setuponly.py": [
                        "Added Line 70: tw.write(\"[{}]\".format(saferepr(fixturedef.cached_param, maxsize=42)))",
                        "Added Line 2: from _pytest._io.saferepr import saferepr"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "pydata__xarray-7233": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "xarray/core/rolling.py": [
                        "def construct("
                    ]
                },
                "missing_lines": {
                    "xarray/core/rolling.py": [
                        "Deleted Line 976: should_be_coords = set(window_dim) & set(self.obj.coords)",
                        "Added Line 978: self.obj.coords",
                        "Added Line 976: # should handle window_dim being unindexed",
                        "Added Line 979: )",
                        "Added Line 977: should_be_coords = (set(window_dim) & set(self.obj.coords)) | set("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-5840": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "src/_pytest/config/__init__.py"
                ],
                "missing_functions": {
                    "src/_pytest/pathlib.py": [
                        "def fnmatch_ex(pattern, path):"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/pathlib.py": [
                        "Deleted Line 341: \"\"\"Returns a unique path in case-insensitive (but case-preserving) file",
                        "Deleted Line 342: systems such as Windows.",
                        "Deleted Line 340: def unique_path(path):",
                        "Deleted Line 14: from os.path import normcase",
                        "Deleted Line 343: ",
                        "Deleted Line 339: ",
                        "Deleted Line 344: This is needed only for ``py.path.local``; ``pathlib.Path`` handles this",
                        "Deleted Line 338: ",
                        "Deleted Line 345: natively with ``resolve()``.\"\"\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 27,
                        "covered": 1,
                        "percentage": 3.7037037037037033
                    }
                }
            }
        },
        "pydata__xarray-6992": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/indexes.py"
                ],
                "missing_functions": {
                    "xarray/core/dataset.py": [
                        "def reset_index(",
                        "def set_index("
                    ]
                },
                "missing_lines": {
                    "xarray/core/dataset.py": [
                        "Deleted Line 4049: # drop any pre-existing index involved",
                        "Added Line 4074: if dim in self._coord_names:",
                        "Added Line 4189: for k in level_names",
                        "Added Line 4171: }",
                        "Added Line 4197: idx_vars = idx.create_variables(keep_level_vars)",
                        "Added Line 4212: drop_or_convert(idx_var_names)",
                        "Added Line 4195: # instead replace it by a new (multi-)index with dropped level(s)",
                        "Added Line 4095: for k in drop_variables:",
                        "Deleted Line 4167: replaced_indexes.append(index)",
                        "Added Line 4211: else:",
                        "Deleted Line 4144: replaced_indexes: list[PandasMultiIndex] = []",
                        "Added Line 4190: if k not in dims_or_levels",
                        "Deleted Line 4047: current_coord_names = self.xindexes.get_all_coords(dim, errors=\"ignore\")",
                        "Added Line 4191: }",
                        "Deleted Line 4165: new_indexes.update({k: idx for k in idx_vars})",
                        "Added Line 4177: if index in seen:",
                        "Added Line 4185: # special case for pd.MultiIndex",
                        "Added Line 4094: # re-add deindexed coordinates (convert to base variables)",
                        "Added Line 4187: keep_level_vars = {",
                        "Added Line 4224: return self._replace_with_new_dims(",
                        "Added Line 4048: all_var_names.update(var_names)",
                        "Added Line 4186: level_names = index.index.names",
                        "Added Line 4161: seen: set[Index] = set()",
                        "Added Line 4226: )",
                        "Added Line 4192: ",
                        "Added Line 4073: # trick to preserve coordinate order in this case",
                        "Added Line 4178: continue",
                        "Deleted Line 4102: coord_names = self._coord_names - set(drop_variables) | set(new_variables)",
                        "Added Line 4204: drop_or_convert(",
                        "Added Line 4198: new_indexes.update({k: idx for k in idx_vars})",
                        "Added Line 4104: k: v for k, v in self._indexes.items() if k not in drop_indexes",
                        "Added Line 4099: and k in self._coord_names",
                        "Added Line 4208: # always drop the multi-index dimension variable",
                        "Added Line 4097: k not in new_variables",
                        "Added Line 4201: # multi-index reduced to single index",
                        "Added Line 4164: ",
                        "Added Line 4193: if index.dim not in dims_or_levels and keep_level_vars:",
                        "Deleted Line 4157: level_vars = {",
                        "Added Line 4182: drop_indexes.update(idx_var_names)",
                        "Deleted Line 4142: drop_indexes: list[Hashable] = []",
                        "Deleted Line 4052: maybe_drop_indexes += list(",
                        "Added Line 4188: k: self._variables[k]",
                        "Added Line 4165: def drop_or_convert(var_names):",
                        "Added Line 4053: all_index_coord_names = set(index_coord_names)",
                        "Added Line 4030: drop_indexes: set[Hashable] = set()",
                        "Added Line 4170: k: self._variables[k].to_base_variable() for k in var_names",
                        "Added Line 4055: all_index_coord_names.update(",
                        "Deleted Line 4031: drop_variables: list[Hashable] = []",
                        "Deleted Line 4087: k: v for k, v in self._indexes.items() if k not in maybe_drop_indexes",
                        "Deleted Line 4151: ",
                        "Added Line 4160: drop_variables: set[Hashable] = set()",
                        "Deleted Line 4152: if isinstance(index, PandasMultiIndex) and name not in self.dims:",
                        "Added Line 4205: [k for k in level_names if k not in keep_level_vars]",
                        "Deleted Line 4050: maybe_drop_indexes += list(current_coord_names) + var_names",
                        "Added Line 4100: ):",
                        "Added Line 4222: coord_names = self._coord_names - drop_variables",
                        "Added Line 4060: drop_variables.update(all_index_coord_names)",
                        "Deleted Line 4156: level_names = index.index.names",
                        "Deleted Line 4166: new_variables.update(idx_vars)",
                        "Added Line 4052: index_coord_names = self.xindexes.get_all_coords(dim, errors=\"ignore\")",
                        "Deleted Line 4159: for k in level_names",
                        "Added Line 4206: )",
                        "Added Line 4181: idx_var_names = set(self.xindexes.get_all_coords(name))",
                        "Deleted Line 4143: drop_variables: list[Hashable] = []",
                        "Added Line 4166: if drop:",
                        "Deleted Line 4158: k: self._variables[k]",
                        "Deleted Line 4162: if level_vars:",
                        "Added Line 4159: drop_indexes: set[Hashable] = set()",
                        "Added Line 4029: new_variables: dict[Hashable, Variable] = {}",
                        "Added Line 4075: drop_variables.remove(dim)",
                        "Added Line 4096: if (",
                        "Added Line 4209: drop_variables.add(index.dim)",
                        "Added Line 4072: ",
                        "Added Line 4194: # do not drop the multi-index completely",
                        "Deleted Line 4150: drop_indexes += list(self.xindexes.get_all_coords(name))",
                        "Deleted Line 4153: # special case for pd.MultiIndex (name is an index level):",
                        "Added Line 4183: ",
                        "Deleted Line 4154: # replace by a new index with dropped level(s) instead of just drop the index",
                        "Deleted Line 4164: idx_vars = idx.create_variables(level_vars)",
                        "Added Line 4196: idx = index.keep_levels(keep_level_vars)",
                        "Added Line 4169: base_vars = {",
                        "Added Line 4168: else:",
                        "Deleted Line 4170: drop_variables.append(name)",
                        "Deleted Line 4182: return self._replace(variables, coord_names=coord_names, indexes=indexes)",
                        "Deleted Line 4169: if drop:",
                        "Added Line 4179: seen.add(index)",
                        "Added Line 4180: ",
                        "Added Line 4203: drop_variables.update(keep_level_vars)",
                        "Added Line 4033: all_var_names: set[Hashable] = set()",
                        "Added Line 4207: else:",
                        "Deleted Line 4056: drop_variables += var_names",
                        "Added Line 4101: new_variables[k] = self._variables[k].to_base_variable()",
                        "Added Line 4172: new_variables.update(base_vars)",
                        "Deleted Line 4071: k: self._variables[k] for k in current_coord_names",
                        "Deleted Line 4161: }",
                        "Added Line 4199: new_variables.update(idx_vars)",
                        "Added Line 4031: drop_variables: set[Hashable] = set()",
                        "Added Line 4049: drop_variables.update(var_names)",
                        "Added Line 4059: drop_indexes.update(all_index_coord_names)",
                        "Deleted Line 4163: idx = index.keep_levels(level_vars)",
                        "Added Line 4200: if not isinstance(idx, PandasMultiIndex):",
                        "Added Line 4119: coord_names = self._coord_names - drop_variables | set(new_variables)",
                        "Deleted Line 4030: maybe_drop_indexes: list[Hashable] = []",
                        "Added Line 4102: ",
                        "Added Line 4210: drop_or_convert(level_names)",
                        "Deleted Line 4180: coord_names = set(new_variables) | self._coord_names",
                        "Deleted Line 4146: new_variables: dict[Hashable, IndexVariable] = {}",
                        "Added Line 4163: new_variables: dict[Hashable, Variable] = {}",
                        "Added Line 4098: and k not in all_var_names",
                        "Added Line 4167: drop_variables.update(var_names)",
                        "Added Line 4225: variables, coord_names=coord_names, indexes=indexes",
                        "Added Line 4202: # backward compatibility: unique level coordinate renamed to dimension",
                        "Added Line 4184: if isinstance(index, PandasMultiIndex):",
                        "Deleted Line 4155: if index not in replaced_indexes:",
                        "Deleted Line 4029: new_variables: dict[Hashable, IndexVariable] = {}",
                        "Added Line 4079: k: self._variables[k] for k in index_coord_names",
                        "Deleted Line 4160: if k not in dims_or_levels",
                        "Added Line 4051: # drop any pre-existing index involved and its corresponding coordinates"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 123,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7236": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/unittest.py": [
                        "def check_testcase_implements_trial_reporter(done=[]):",
                        "def runtest(self):",
                        "def _make_xunit_fixture(obj, setup_name, teardown_name, scope, pass_self):",
                        "def collect(self):"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/unittest.py": [
                        "Added Line 223: if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):",
                        "Added Line 308: return bool(getattr(obj, \"__unittest_skip__\", False))",
                        "Deleted Line 44: skipped = getattr(cls, \"__unittest_skip__\", False)",
                        "Added Line 92: if _is_skipped(self):",
                        "Added Line 305: ",
                        "Deleted Line 92: if getattr(self, \"__unittest_skip__\", None):",
                        "Added Line 304: ",
                        "Added Line 307: \"\"\"Return True if the given object has been marked with @unittest.skip\"\"\"",
                        "Deleted Line 223: if self.config.getoption(\"usepdb\"):",
                        "Added Line 306: def _is_skipped(obj) -> bool:",
                        "Added Line 44: skipped = _is_skipped(cls)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-6197": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/python.py": [
                        "def _genfunctions(self, name, funcobj):",
                        "def isinitpath(self, path):",
                        "class PyobjMixin(PyobjContext):"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/python.py": [
                        "Added Line 265: self._obj = value",
                        "Added Line 262: ",
                        "Deleted Line 440: self, fspath, parent=parent, config=config, session=session, nodeid=nodeid",
                        "Deleted Line 259: self._obj = value",
                        "Added Line 263: @obj.setter",
                        "Deleted Line 268: self.own_markers.extend(get_unpacked_marks(obj))",
                        "Deleted Line 436: if fspath.basename == \"__init__.py\":",
                        "Deleted Line 260: ",
                        "Deleted Line 254: self._mount_obj_if_needed()",
                        "Deleted Line 435: def __init__(self, fspath, parent=None, config=None, session=None, nodeid=None):",
                        "Deleted Line 257: @obj.setter",
                        "Added Line 264: def obj(self, value):",
                        "Added Line 261: return obj",
                        "Deleted Line 442: ",
                        "Deleted Line 437: self._ALLOW_MARKERS = False",
                        "Deleted Line 258: def obj(self, value):",
                        "Deleted Line 256: ",
                        "Deleted Line 642: self._mount_obj_if_needed()",
                        "Deleted Line 261: def _mount_obj_if_needed(self):",
                        "Deleted Line 439: nodes.FSCollector.__init__(",
                        "Deleted Line 441: )",
                        "Deleted Line 255: return self._obj",
                        "Added Line 260: self.own_markers.extend(get_unpacked_marks(self.obj))",
                        "Deleted Line 438: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-4695": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/dataarray.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7432": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "src/_pytest/skipping.py": [
                        "Deleted Line 294: elif (",
                        "Added Line 294: ",
                        "Added Line 295: if ("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-6938": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "xarray/core/variable.py"
                ],
                "missing_functions": {
                    "xarray/core/dataset.py": [
                        "def swap_dims("
                    ]
                },
                "missing_lines": {
                    "xarray/core/dataset.py": [
                        "Added Line 3774: var: Variable"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7324": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "src/_pytest/mark/expression.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-6202": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/python.py": [
                        "def getmodpath(self, stopatmodule=True, includemodule=False):"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/python.py": [
                        "Deleted Line 288: s = \".\".join(parts)",
                        "Added Line 288: return \".\".join(parts)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "pytest-dev__pytest-7521": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/capture.py": [
                        "def __init__(self, targetfd: int) -> None:"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/capture.py": [
                        "Added Line 391: newline=\"\","
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-10844": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sklearn/metrics/cluster/supervised.py": [
                        "Deleted Line 855: c = contingency_matrix(labels_true, labels_pred, sparse=True)",
                        "Added Line 855: c = contingency_matrix(labels_true, labels_pred,",
                        "Added Line 856: sparse=True).astype(np.int64)",
                        "Added Line 860: return np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7490": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/skipping.py": [
                        "def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:",
                        "def pytest_runtest_call(item: Item) -> Generator[None, None, None]:"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/skipping.py": [
                        "Deleted Line 242: item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)",
                        "Added Line 241: xfail(\"[NOTRUN] \" + xfailed.reason)",
                        "Added Line 240: if xfailed and not item.config.option.runxfail and not xfailed.run:",
                        "Added Line 255: # The test run may have added an xfail mark dynamically.",
                        "Deleted Line 238: item._store[skipped_by_mark_key] = True",
                        "Deleted Line 253: if not item.config.option.runxfail:",
                        "Deleted Line 234: item._store[skipped_by_mark_key] = False",
                        "Deleted Line 254: if xfailed and not xfailed.run:",
                        "Added Line 250: if xfailed and not item.config.option.runxfail and not xfailed.run:",
                        "Deleted Line 235: ",
                        "Deleted Line 241: if not item.config.option.runxfail:",
                        "Added Line 259: ",
                        "Added Line 258: item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)",
                        "Deleted Line 244: xfail(\"[NOTRUN] \" + xfailed.reason)",
                        "Added Line 257: if xfailed is None:",
                        "Added Line 256: xfailed = item._store.get(xfailed_key, None)",
                        "Added Line 251: xfail(\"[NOTRUN] \" + xfailed.reason)",
                        "Added Line 235: item._store[skipped_by_mark_key] = skipped is not None",
                        "Deleted Line 243: if xfailed and not xfailed.run:",
                        "Deleted Line 255: xfail(\"[NOTRUN] \" + xfailed.reason)",
                        "Added Line 239: item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 21,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-10908": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/feature_extraction/text.py": [
                        "def inverse_transform(self, X):"
                    ]
                },
                "missing_lines": {
                    "sklearn/feature_extraction/text.py": [
                        "Added Line 975: self._validate_vocabulary()",
                        "Added Line 974: if not hasattr(self, 'vocabulary_'):",
                        "Added Line 976: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-10297": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/linear_model/ridge.py": [
                        "class RidgeCV(_BaseRidgeCV, RegressorMixin):"
                    ]
                },
                "missing_lines": {
                    "sklearn/linear_model/ridge.py": [
                        "Added Line 1223: Cross-validation values for each alpha (if ``store_cv_values=True``\\",
                        "Deleted Line 1310: the mean squared errors (by default) or the values of the \\",
                        "Added Line 1309: ",
                        "Deleted Line 1226: `{loss,score}_func` function (if provided in the constructor).",
                        "Deleted Line 1223: Cross-validation values for each alpha (if `store_cv_values=True` and \\",
                        "Added Line 1316: ``{loss,score}_func`` function (if provided in the constructor).",
                        "Added Line 1345: scoring=scoring, cv=cv, store_cv_values=store_cv_values)",
                        "Deleted Line 1215: each alpha should be stored in the `cv_values_` attribute (see",
                        "Added Line 1305: Flag indicating if the cross-validation values corresponding to",
                        "Added Line 1314: ``cv=None``). After ``fit()`` has been called, this attribute will",
                        "Added Line 1315: contain the mean squared errors (by default) or the values of the",
                        "Deleted Line 1309: `cv=None`). After `fit()` has been called, this attribute will contain \\",
                        "Added Line 1304: store_cv_values : boolean, default=False",
                        "Added Line 1224: and ``cv=None``). After ``fit()`` has been called, this attribute \\",
                        "Added Line 1215: each alpha should be stored in the ``cv_values_`` attribute (see",
                        "Added Line 1308: Generalized Cross-Validation).",
                        "Added Line 1307: below). This flag is only compatible with ``cv=None`` (i.e. using",
                        "Deleted Line 1307: shape = [n_samples, n_responses, n_alphas], optional",
                        "Added Line 1341: normalize=False, scoring=None, cv=None, class_weight=None,",
                        "Added Line 1216: below). This flag is only compatible with ``cv=None`` (i.e. using",
                        "Added Line 1306: each alpha should be stored in the ``cv_values_`` attribute (see",
                        "Deleted Line 1308: Cross-validation values for each alpha (if `store_cv_values=True` and",
                        "Added Line 1226: of the ``{loss,score}_func`` function (if provided in the constructor).",
                        "Deleted Line 1306: cv_values_ : array, shape = [n_samples, n_alphas] or \\",
                        "Deleted Line 1224: `cv=None`). After `fit()` has been called, this attribute will \\",
                        "Deleted Line 1311: `{loss,score}_func` function (if provided in the constructor).",
                        "Added Line 1312: cv_values_ : array, shape = [n_samples, n_targets, n_alphas], optional",
                        "Deleted Line 1225: contain the mean squared errors (by default) or the values of the \\",
                        "Added Line 1313: Cross-validation values for each alpha (if ``store_cv_values=True`` and",
                        "Deleted Line 1216: below). This flag is only compatible with `cv=None` (i.e. using",
                        "Added Line 1225: will contain the mean squared errors (by default) or the values \\",
                        "Added Line 1342: store_cv_values=False):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 34,
                        "covered": 2,
                        "percentage": 5.88235294117647
                    }
                }
            }
        },
        "pytest-dev__pytest-7982": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "src/_pytest/pathlib.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-8399": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "src/_pytest/python.py"
                ],
                "missing_functions": {
                    "src/_pytest/unittest.py": [
                        "def cleanup(*args):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7571": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "src/_pytest/logging.py": [
                        "def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> Non",
                        "def _finalize(self) -> None:",
                        "def __init__(self, item: nodes.Node) -> None:"
                    ]
                },
                "missing_lines": {
                    "src/_pytest/logging.py": [
                        "Added Line 357: if self._initial_handler_level is not None:",
                        "Added Line 348: self._initial_handler_level = None  # type: Optional[int]",
                        "Added Line 358: self.handler.setLevel(self._initial_handler_level)",
                        "Added Line 440: self._initial_handler_level = self.handler.level"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-11310": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/model_selection/_search.py": [
                        "class GridSearchCV(BaseSearchCV):",
                        "def _store(key_name, array, weights=None, splits=False, rank=False):",
                        "class RandomizedSearchCV(BaseSearchCV):"
                    ]
                },
                "missing_lines": {
                    "sklearn/model_selection/_search.py": [
                        "Added Line 1401: ",
                        "Added Line 1083: refit_time_ : float",
                        "Added Line 776: self.refit_time_ = refit_end_time - refit_start_time",
                        "Added Line 1400: Seconds used for refitting the best model on the whole dataset.",
                        "Added Line 1085: ",
                        "Added Line 1084: Seconds used for refitting the best model on the whole dataset.",
                        "Added Line 20: import time",
                        "Added Line 1402: This is present only if ``refit`` is not False.",
                        "Added Line 1399: refit_time_ : float",
                        "Added Line 1403: ",
                        "Added Line 1087: ",
                        "Added Line 1086: This is present only if ``refit`` is not False."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 2,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-11578": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13496": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/ensemble/iforest.py": [
                        "def __init__(self,"
                    ]
                },
                "missing_lines": {
                    "sklearn/ensemble/iforest.py": [
                        "Added Line 127: ",
                        "Added Line 123: warm_start : bool, optional (default=False)",
                        "Added Line 125: and add more estimators to the ensemble, otherwise, just fit a whole",
                        "Added Line 195: warm_start=warm_start,",
                        "Added Line 128: .. versionadded:: 0.21",
                        "Added Line 126: new forest. See :term:`the Glossary <warm_start>`.",
                        "Added Line 124: When set to ``True``, reuse the solution of the previous call to fit"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 3,
                        "percentage": 30.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13135": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/preprocessing/_discretization.py": [
                        "def fit(self, X, y=None):"
                    ]
                },
                "missing_lines": {
                    "sklearn/preprocessing/_discretization.py": [
                        "Added Line 176: centers.sort()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-12682": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "examples/decomposition/plot_sparse_coding.py"
                ],
                "missing_functions": {
                    "sklearn/decomposition/dict_learning.py": [
                        "def __init__(self, n_components=None, alpha=1, max_iter=1000, tol=1e-8,",
                        "def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,",
                        "def sparse_encode(X, dictionary, gram=None, cov=None, algorithm='lasso_lars',",
                        "def partial_fit(self, X, y=None, iter_offset=None):",
                        "def _set_sparse_coding_params(self, n_components,",
                        "class DictionaryLearning(BaseEstimator, SparseCodingMixin):",
                        "class MiniBatchDictionaryLearning(BaseEstimator, SparseCodingMixin):",
                        "def dict_learning(X, n_components, alpha, max_iter=100, tol=1e-8,",
                        "def fit(self, X, y=None):",
                        "def transform(self, X):",
                        "def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars',"
                    ]
                },
                "missing_lines": {
                    "sklearn/decomposition/dict_learning.py": [
                        "Added Line 1000: .. versionadded:: 0.22",
                        "Added Line 334: verbose=verbose,",
                        "Added Line 1345: .. versionadded:: 0.22",
                        "Deleted Line 846: positive=positive_code)",
                        "Added Line 1025: positive_code, transform_max_iter)",
                        "Added Line 250: Maximum number of iterations to perform if `algorithm='lasso_cd'` or",
                        "Deleted Line 1349: positive_code)",
                        "Added Line 1192: positive_code, transform_max_iter)",
                        "Added Line 824: positive=positive_code,",
                        "Deleted Line 902: alpha=self.transform_alpha, n_jobs=self.n_jobs,",
                        "Deleted Line 1341: shuffle=True, dict_init=None, transform_algorithm='omp',",
                        "Added Line 429: positive_code=False, method_max_iter=1000):",
                        "Added Line 76: Maximum number of iterations to perform if `algorithm='lasso_cd'` or",
                        "Deleted Line 809: positive=positive_code).T",
                        "Added Line 891: self.transform_max_iter = transform_max_iter",
                        "Deleted Line 1155: positive_code=False, positive_dict=False):",
                        "Deleted Line 617: positive_dict=False, positive_code=False):",
                        "Added Line 1156: ",
                        "Added Line 999: ",
                        "Added Line 725: Maximum number of iterations to perform when solving the lasso problem.",
                        "Deleted Line 868: n_jobs=None, positive_code=False):",
                        "Added Line 505: Maximum number of iterations to perform.",
                        "Added Line 1341: transform_max_iter : int, optional (default=1000)",
                        "Added Line 1383: positive_code=False, positive_dict=False,",
                        "Added Line 886: transform_max_iter=1000):",
                        "Deleted Line 130: positive=positive)",
                        "Added Line 588: init=code, n_jobs=n_jobs, positive=positive_code,",
                        "Added Line 1343: `lasso_lars`.",
                        "Added Line 1380: dict_init=None, transform_algorithm='omp',",
                        "Added Line 508: ",
                        "Added Line 1230: method_max_iter=self.transform_max_iter,",
                        "Added Line 504: method_max_iter : int, optional (default=1000)",
                        "Added Line 1342: Maximum number of iterations to perform if `algorithm='lasso_cd'` or",
                        "Added Line 825: max_iter=method_max_iter, verbose=verbose).T",
                        "Added Line 1151: transform_max_iter : int, optional (default=1000)",
                        "Deleted Line 249: Maximum number of iterations to perform if `algorithm='lasso_cd'`.",
                        "Added Line 997: Maximum number of iterations to perform if `algorithm='lasso_cd'` or",
                        "Deleted Line 1340: fit_algorithm='lars', n_jobs=None, batch_size=3,",
                        "Added Line 77: `lasso_lars`.",
                        "Added Line 1001: ",
                        "Added Line 1187: positive_dict=False, transform_max_iter=1000):",
                        "Added Line 1019: split_sign=False, n_jobs=None, positive_code=False,",
                        "Added Line 1424: method_max_iter=self.transform_max_iter,",
                        "Deleted Line 999: positive_code)",
                        "Added Line 506: ",
                        "Added Line 1346: ",
                        "Added Line 626: positive_dict=False, positive_code=False,",
                        "Added Line 655: Number of mini-batch iterations to perform.",
                        "Deleted Line 580: init=code, n_jobs=n_jobs, positive=positive_code)",
                        "Added Line 1152: Maximum number of iterations to perform if `algorithm='lasso_cd'` or",
                        "Added Line 1379: fit_algorithm='lars', n_jobs=None, batch_size=3, shuffle=True,",
                        "Added Line 1389: positive_code, transform_max_iter)",
                        "Added Line 1020: transform_max_iter=1000):",
                        "Added Line 885: n_jobs=None, positive_code=False,",
                        "Deleted Line 645: Number of iterations to perform.",
                        "Added Line 862: positive=positive_code, max_iter=method_max_iter,",
                        "Deleted Line 1344: positive_code=False, positive_dict=False):",
                        "Deleted Line 426: positive_code=False):",
                        "Added Line 1153: `lasso_lars`.",
                        "Added Line 863: verbose=verbose)",
                        "Added Line 251: `lasso_lars`.",
                        "Added Line 1155: .. versionadded:: 0.22",
                        "Added Line 1154: ",
                        "Added Line 728: ",
                        "Added Line 996: transform_max_iter : int, optional (default=1000)",
                        "Deleted Line 76: Maximum number of iterations to perform if `algorithm='lasso_cd'`.",
                        "Added Line 589: max_iter=method_max_iter, verbose=verbose)",
                        "Added Line 1384: transform_max_iter=1000):",
                        "Deleted Line 1160: positive_code)",
                        "Added Line 131: positive=positive, max_iter=max_iter)",
                        "Added Line 922: n_jobs=self.n_jobs, positive=self.positive_code)",
                        "Added Line 724: method_max_iter : int, optional (default=1000)",
                        "Added Line 627: method_max_iter=1000):",
                        "Added Line 727: .. versionadded:: 0.22",
                        "Added Line 921: alpha=self.transform_alpha, max_iter=self.transform_max_iter,",
                        "Deleted Line 1154: split_sign=False, random_state=None,",
                        "Added Line 507: .. versionadded:: 0.22",
                        "Added Line 1344: ",
                        "Added Line 726: ",
                        "Added Line 998: `lasso_lars`.",
                        "Deleted Line 903: positive=self.positive_code)",
                        "Added Line 1186: split_sign=False, random_state=None, positive_code=False,",
                        "Added Line 1474: method_max_iter=self.transform_max_iter,"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 12,
                        "covered": 1,
                        "percentage": 8.333333333333332
                    },
                    "lines": {
                        "total": 90,
                        "covered": 1,
                        "percentage": 1.1111111111111112
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13779": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/ensemble/voting.py": [
                        "def fit(self, X, y, sample_weight=None):"
                    ]
                },
                "missing_lines": {
                    "sklearn/ensemble/voting.py": [
                        "Added Line 82: continue"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-12585": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13124": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/model_selection/_split.py": [
                        "def __init__(self, n_splits='warn', shuffle=False, random_state=None):"
                    ]
                },
                "missing_lines": {
                    "sklearn/model_selection/_split.py": [
                        "Added Line 622: rng = check_random_state(self.random_state)",
                        "Deleted Line 579: Whether to shuffle each stratification of the data before splitting",
                        "Deleted Line 623: rng = self.random_state",
                        "Added Line 579: Whether to shuffle each class's samples before splitting into batches.",
                        "Deleted Line 580: into batches."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13439": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/pipeline.py": [
                        "def _iter(self, with_final=True):"
                    ]
                },
                "missing_lines": {
                    "sklearn/pipeline.py": [
                        "Added Line 205: \"\"\"",
                        "Added Line 206: return len(self.steps)",
                        "Added Line 203: \"\"\"",
                        "Added Line 202: def __len__(self):",
                        "Added Line 207: ",
                        "Added Line 204: Returns the length of the Pipeline"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13142": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/mixture/base.py": [
                        "def fit_predict(self, X, y=None):"
                    ]
                },
                "missing_lines": {
                    "sklearn/mixture/base.py": [
                        "Added Line 274: _, log_resp = self._e_step(X)",
                        "Deleted Line 262: # for any value of max_iter and tol (and any random_state).",
                        "Deleted Line 264: ",
                        "Added Line 271: # Always do a final e-step to guarantee that the labels returned by",
                        "Deleted Line 260: # Always do a final e-step to guarantee that the labels returned by",
                        "Deleted Line 263: _, log_resp = self._e_step(X)",
                        "Added Line 272: # fit_predict(X) are always consistent with fit(X).predict(X)",
                        "Added Line 275: ",
                        "Deleted Line 261: # fit_predict(X) are always consistent with fit(X).predict(X)",
                        "Added Line 273: # for any value of max_iter and tol (and any random_state)."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-12973": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/linear_model/least_angle.py": [
                        "def __init__(self, criterion='aic', fit_intercept=True, verbose=False,",
                        "def fit(self, X, y, copy_X=True):"
                    ]
                },
                "missing_lines": {
                    "sklearn/linear_model/least_angle.py": [
                        "Added Line 1504: copy_X = self.copy_X",
                        "Deleted Line 1493: copy_X : boolean, optional, default True",
                        "Added Line 1494: If provided, this parameter will override the choice",
                        "Added Line 1508: X, y, self.fit_intercept, self.normalize, copy_X)",
                        "Deleted Line 1504: X, y, self.fit_intercept, self.normalize, self.copy_X)",
                        "Added Line 1493: copy_X : boolean, optional, default None",
                        "Added Line 1495: of copy_X made at instance creation."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 3,
                        "percentage": 30.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13328": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/linear_model/huber.py": [
                        "def fit(self, X, y, sample_weight=None):"
                    ]
                },
                "missing_lines": {
                    "sklearn/linear_model/huber.py": [
                        "Deleted Line 254: X, y, copy=False, accept_sparse=['csr'], y_numeric=True)",
                        "Added Line 254: X, y, copy=False, accept_sparse=['csr'], y_numeric=True,",
                        "Added Line 255: dtype=[np.float64, np.float32])"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14141": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14496": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/cluster/optics_.py": [
                        "def compute_optics_graph(X, min_samples, max_eps, metric, p, metric_params,",
                        "def _xi_cluster(reachability_plot, predecessor_plot, ordering, xi, min_samples,",
                        "def cluster_optics_xi(reachability, predecessor, ordering, min_samples,",
                        "class OPTICS(BaseEstimator, ClusterMixin):"
                    ]
                },
                "missing_lines": {
                    "sklearn/cluster/optics_.py": [
                        "Added Line 344: min_samples : int > 1 or float between 0 and 1",
                        "Deleted Line 765: to be at least 2).",
                        "Deleted Line 756: min_samples : int > 1 or float between 0 and 1 (default=None)",
                        "Deleted Line 47: min_samples : int > 1 or float between 0 and 1 (default=None)",
                        "Added Line 761: Minimum number of samples in an OPTICS cluster.",
                        "Deleted Line 622: min_samples = max(2, min_samples * n_samples)",
                        "Deleted Line 627: min_cluster_size = max(2, min_cluster_size * n_samples)",
                        "Added Line 627: min_cluster_size = max(2, int(min_cluster_size * n_samples))",
                        "Added Line 622: min_samples = max(2, int(min_samples * n_samples))",
                        "Added Line 756: min_samples : int > 1",
                        "Deleted Line 764: absolute number or a fraction of the number of samples (rounded",
                        "Deleted Line 760: (rounded to be at least 2).",
                        "Deleted Line 344: min_samples : int (default=5)",
                        "Added Line 585: min_samples : int > 1 or float between 0 and 1",
                        "Added Line 47: min_samples : int > 1 or float between 0 and 1 (default=5)",
                        "Deleted Line 759: Expressed as an absolute number or a fraction of the number of samples",
                        "Deleted Line 585: min_samples : int > 1 or float between 0 and 1 (default=None)",
                        "Deleted Line 763: Minimum number of samples in an OPTICS cluster, expressed as an",
                        "Added Line 760: min_cluster_size : int > 1",
                        "Deleted Line 762: min_cluster_size : int > 1 or float between 0 and 1"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 2,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14053": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sklearn/tree/export.py": [
                        "Added Line 894: else None for i in tree_.feature]"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14087": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/linear_model/logistic.py": [
                        "def fit(self, X, y, sample_weight=None):"
                    ]
                },
                "missing_lines": {
                    "sklearn/linear_model/logistic.py": [
                        "Added Line 2173: if multi_class == 'ovr':",
                        "Added Line 2184: best_indices_l1 = best_indices // len(self.Cs_)",
                        "Added Line 2185: self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))",
                        "Added Line 2186: else:",
                        "Added Line 2183: if self.penalty == 'elasticnet':",
                        "Deleted Line 2173: if self.multi_class == 'ovr':",
                        "Deleted Line 2183: best_indices_l1 = best_indices // len(self.Cs_)",
                        "Added Line 2187: self.l1_ratio_.append(None)",
                        "Deleted Line 2184: self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25102": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sklearn/base.py",
                    "sklearn/feature_selection/_base.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 29,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14983": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/model_selection/_split.py": [
                        "def _build_repr(self):",
                        "def get_n_splits(self, X=None, y=None, groups=None):"
                    ]
                },
                "missing_lines": {
                    "sklearn/model_selection/_split.py": [
                        "Added Line 2164: if value is None and hasattr(self, 'cvargs'):",
                        "Added Line 1167: return _build_repr(self)",
                        "Added Line 2165: value = self.cvargs.get(key, None)",
                        "Added Line 1168: ",
                        "Added Line 1166: def __repr__(self):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14629": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sklearn/multioutput.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14894": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/svm/base.py": [
                        "def _sparse_fit(self, X, y, sample_weight, solver_type, kernel,"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 13,
                        "percentage": 100.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-15100": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sklearn/feature_extraction/text.py": [
                        "Added Line 132: try:",
                        "Added Line 135: s.encode(\"ASCII\", errors=\"strict\")",
                        "Deleted Line 132: normalized = unicodedata.normalize('NFKD', s)",
                        "Added Line 137: except UnicodeEncodeError:",
                        "Added Line 138: normalized = unicodedata.normalize('NFKD', s)",
                        "Added Line 134: # characters and we can avoid an expensive list comprehension"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 3,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25232": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/impute/_iterative.py": [
                        "def __init__(",
                        "def _initial_imputation(self, X, in_fit=False):"
                    ]
                },
                "missing_lines": {
                    "sklearn/impute/_iterative.py": [
                        "Added Line 127: .. versionadded:: 1.3",
                        "Added Line 123: `fill_value` must be a string.",
                        "Added Line 125: data and \"missing_value\" for strings or object data types.",
                        "Added Line 122: occurrences of missing_values. For string or object data types,",
                        "Added Line 121: When `strategy=\"constant\"`, `fill_value` is used to replace all",
                        "Added Line 128: ",
                        "Added Line 314: fill_value=None,",
                        "Added Line 124: If `None`, `fill_value` will be 0 when imputing numerical",
                        "Added Line 628: fill_value=self.fill_value,",
                        "Added Line 293: \"fill_value\": \"no_validation\",  # any object is valid",
                        "Added Line 336: self.fill_value = fill_value",
                        "Added Line 126: ",
                        "Added Line 120: fill_value : str or numerical value, default=None"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25931": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/ensemble/_iforest.py": [
                        "def fit(self, X, y=None, sample_weight=None):",
                        "def score_samples(self, X):"
                    ]
                },
                "missing_lines": {
                    "sklearn/ensemble/_iforest.py": [
                        "Added Line 442: \"\"\"",
                        "Added Line 350: self.offset_ = np.percentile(self._score_samples(X), 100.0 * self.contamination)",
                        "Deleted Line 434: ",
                        "Added Line 438: def _score_samples(self, X):",
                        "Added Line 349: # _score_samples rather than score_samples",
                        "Added Line 436: return self._score_samples(X)",
                        "Added Line 443: # Code structure from ForestClassifier/predict_proba",
                        "Added Line 441: Input validation would remove feature names, so we disable it.",
                        "Added Line 440: ",
                        "Deleted Line 432: ",
                        "Added Line 437: ",
                        "Deleted Line 348: self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)",
                        "Added Line 444: ",
                        "Added Line 439: \"\"\"Private version of score_samples without input validation.",
                        "Added Line 447: # Take the opposite of the scores as bigger is better (here less abnormal)",
                        "Deleted Line 433: check_is_fitted(self)",
                        "Added Line 445: check_is_fitted(self)",
                        "Deleted Line 439: # abnormal)",
                        "Added Line 446: ",
                        "Deleted Line 431: # code structure from ForestClassifier/predict_proba",
                        "Deleted Line 438: # Take the opposite of the scores as bigger is better (here less"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 3,
                        "percentage": 12.5
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25747": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sklearn/utils/_set_output.py": [
                        "Deleted Line 59: data_to_wrap.index = index",
                        "Added Line 37: Index for data. `index` is ignored if `data_to_wrap` is already a DataFrame.",
                        "Deleted Line 37: Index for data."
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-26194": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sklearn/metrics/_ranking.py": [
                        "Deleted Line 1019: thresholds : ndarray of shape = (n_thresholds,)",
                        "Added Line 1091: thresholds = np.r_[np.inf, thresholds]",
                        "Added Line 1042: ",
                        "Added Line 1041: `np.inf`.",
                        "Deleted Line 1022: and is arbitrarily set to `max(y_score) + 1`.",
                        "Added Line 1040: ensure that the curve starts at `(0, 0)`. This threshold corresponds to the",
                        "Added Line 1063: array([ inf, 0.8 , 0.4 , 0.35, 0.1 ])",
                        "Added Line 1022: and is arbitrarily set to `np.inf`.",
                        "Added Line 1019: thresholds : ndarray of shape (n_thresholds,)",
                        "Added Line 1039: An arbritrary threshold is added for the case `tpr=0` and `fpr=0` to",
                        "Added Line 1090: # get dtype of `y_score` even if it is an array-like",
                        "Deleted Line 1059: array([1.8 , 0.8 , 0.4 , 0.35, 0.1 ])"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 1,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-9288": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sklearn/cluster/k_means_.py": [
                        "Deleted Line 381: seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)",
                        "Added Line 374: random_state=seed)",
                        "Added Line 364: seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)",
                        "Added Line 363: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 3,
                        "percentage": 42.857142857142854
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10323": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/directives/code.py": [
                        "def read(self, location: Tuple[str, int] = None) -> Tuple[str, int]:"
                    ]
                },
                "missing_lines": {
                    "sphinx/directives/code.py": [
                        "Deleted Line 228: self.append_filter,",
                        "Deleted Line 229: self.dedent_filter]",
                        "Added Line 227: self.dedent_filter,",
                        "Added Line 229: self.append_filter]"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25973": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sklearn/feature_selection/_sequential.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10466": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/builders/gettext.py": [
                        "def add(self, msg: str, origin: Union[Element, \"MsgOrigin\"]) -> None:"
                    ]
                },
                "missing_lines": {
                    "sphinx/builders/gettext.py": [
                        "Deleted Line 60: positions = [(source, line) for source, line, uuid in self.metadata[message]]",
                        "Added Line 60: positions = sorted(set((source, line) for source, line, uuid",
                        "Added Line 61: in self.metadata[message]))"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10449": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/ext/autodoc/typehints.py": [
                        "def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element",
                        "def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No",
                        "def insert_field_list(node: Element) -> nodes.field_list:"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/autodoc/typehints.py": [
                        "Deleted Line 62: modify_field_list(field_list, annotations[fullname])",
                        "Added Line 64: else:",
                        "Added Line 132: if annotation == 'None' and suppress_rtype:",
                        "Added Line 62: if objtype == 'class':",
                        "Added Line 131: annotation = annotations['return']",
                        "Deleted Line 86: def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:",
                        "Added Line 65: modify_field_list(field_list, annotations[fullname])",
                        "Added Line 63: modify_field_list(field_list, annotations[fullname], suppress_rtype=True)",
                        "Added Line 133: return",
                        "Added Line 89: def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],",
                        "Added Line 134: ",
                        "Added Line 90: suppress_rtype: bool = False) -> None:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-26323": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sklearn/compose/_column_transformer.py": [
                        "def set_output(self, *, transform=None):"
                    ]
                },
                "missing_lines": {
                    "sklearn/compose/_column_transformer.py": [
                        "Added Line 308: _safe_set_output(self.remainder, transform=transform)",
                        "Added Line 309: ",
                        "Added Line 307: if self.remainder not in {\"passthrough\", \"drop\"}:",
                        "Added Line 296: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10435": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/writers/latex.py": [
                        "def visit_literal(self, node: Element) -> None:"
                    ]
                },
                "missing_lines": {
                    "sphinx/writers/latex.py": [
                        "Added Line 1715: hlcode = hlcode.rstrip()[:-15]  # strip \\n\\end{Verbatim}",
                        "Deleted Line 1715: hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 4,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10614": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sphinx/ext/inheritance_diagram.py": [
                        "Added Line 424: urls[child['reftitle']] = current_filename + '#' + child.get('refid')",
                        "Added Line 419: refname = child['reftitle']",
                        "Added Line 417: refname = child['refuri'].rsplit('#', 1)[-1]",
                        "Deleted Line 415: if graphviz_output_format == 'SVG':",
                        "Added Line 420: ",
                        "Added Line 415: # Construct the name from the URI if the reference is external via intersphinx",
                        "Deleted Line 418: urls[child['reftitle']] = child.get('refuri')"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 4,
                        "percentage": 36.36363636363637
                    }
                }
            }
        },
        "sphinx-doc__sphinx-11445": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sphinx/util/rst.py": [
                        "Deleted Line 21: from jinja2.utils import pass_environment",
                        "Added Line 78: if FIELD_NAME_RE.match(line):",
                        "Deleted Line 22: except ImportError:",
                        "Deleted Line 24: ",
                        "Deleted Line 15: from jinja2 import Environment",
                        "Added Line 13: from docutils.parsers.rst.states import Body",
                        "Added Line 23: FIELD_NAME_RE = re.compile(Body.patterns['field_marker'])",
                        "Deleted Line 25: ",
                        "Deleted Line 23: from jinja2 import environmentfilter as pass_environment",
                        "Deleted Line 83: if docinfo_re.match(line):",
                        "Added Line 16: from jinja2 import Environment, pass_environment",
                        "Deleted Line 20: try:",
                        "Deleted Line 28: docinfo_re = re.compile(':\\\\w+:.*?')"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 1,
                        "percentage": 7.142857142857142
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7454": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/domains/python.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-11510": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/directives/other.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 36,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10673": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/directives/other.py",
                    "sphinx/environment/collectors/toctree.py"
                ],
                "missing_functions": {
                    "sphinx/environment/adapters/toctree.py": [
                        "def resolve(self, docname: str, builder: \"Builder\", toctree: addnodes.toctree,",
                        "def _entries_from_toctree(toctreenode: addnodes.toctree, parents: List[str],"
                    ]
                },
                "missing_lines": {
                    "sphinx/environment/adapters/toctree.py": [
                        "Added Line 3: from typing import TYPE_CHECKING, Any, Dict, Iterable, List, Optional, Tuple, cast",
                        "Added Line 144: docname, _, sectionname = generated_docnames[ref]",
                        "Added Line 143: elif ref in generated_docnames:",
                        "Added Line 147: reference = nodes.reference('', title, internal=True,",
                        "Deleted Line 3: from typing import TYPE_CHECKING, Any, Iterable, List, Optional, cast",
                        "Added Line 150: item = nodes.list_item('', para)",
                        "Added Line 145: if not title:",
                        "Added Line 57: generated_docnames: Dict[str, Tuple[str, str, str]] = self.env.domains['std'].initial_data['labels'].copy()  # NoQA: E501",
                        "Added Line 146: title = sectionname",
                        "Added Line 149: para = addnodes.compact_paragraph('', '', reference)",
                        "Added Line 151: # don't show subitems",
                        "Added Line 152: toc = nodes.bullet_list('', item)",
                        "Added Line 148: refuri=docname, anchorname='')"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 26,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7462": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/pycode/ast.py"
                ],
                "missing_functions": {
                    "sphinx/domains/python.py": [
                        "def unparse(node: ast.AST) -> List[Node]:"
                    ]
                },
                "missing_lines": {
                    "sphinx/domains/python.py": [
                        "Deleted Line 108: result = []",
                        "Deleted Line 111: result.append(addnodes.desc_sig_punctuation('', ', '))",
                        "Added Line 116: addnodes.desc_sig_punctuation('', ')')]",
                        "Added Line 110: for elem in node.elts:",
                        "Deleted Line 112: result.pop()",
                        "Added Line 108: if node.elts:",
                        "Deleted Line 109: for elem in node.elts:",
                        "Added Line 113: result.pop()",
                        "Added Line 112: result.append(addnodes.desc_sig_punctuation('', ', '))",
                        "Added Line 117: ",
                        "Deleted Line 110: result.extend(unparse(elem))",
                        "Added Line 114: else:",
                        "Added Line 115: result = [addnodes.desc_sig_punctuation('', '('),",
                        "Added Line 109: result = []",
                        "Added Line 111: result.extend(unparse(elem))"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7889": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/ext/autodoc/mock.py": [
                        "def __iter__(self) -> Iterator:"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/autodoc/mock.py": [
                        "Added Line 56: return _make_subclass(str(key), self.__display_name__, self.__class__)()",
                        "Added Line 55: def __getitem__(self, key: Any) -> \"_MockObject\":",
                        "Deleted Line 55: def __getitem__(self, key: str) -> \"_MockObject\":",
                        "Deleted Line 56: return _make_subclass(key, self.__display_name__, self.__class__)()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7757": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/util/inspect.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7440": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/domains/std.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7985": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/builders/linkcheck.py": [
                        "def check_uri() -> Tuple[str, str, int]:"
                    ]
                },
                "missing_lines": {
                    "sphinx/builders/linkcheck.py": [
                        "Added Line 215: if len(uri) == 0 or uri.startswith(('#', 'mailto:')):",
                        "Added Line 223: return 'working', '', 0",
                        "Added Line 39: ",
                        "Added Line 224: else:",
                        "Added Line 228: else:",
                        "Added Line 227: return 'ignored', '', 0",
                        "Added Line 226: if rex.match(uri):",
                        "Added Line 222: if path.exists(path.join(self.srcdir, uri)):",
                        "Added Line 219: # non supported URI schemes (ex. ftp)",
                        "Added Line 38: uri_re = re.compile('[a-z]+://')",
                        "Deleted Line 216: return 'local', '', 0",
                        "Added Line 218: if uri_re.match(uri):",
                        "Added Line 221: else:",
                        "Deleted Line 213: if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):",
                        "Added Line 225: for rex in self.to_ignore:",
                        "Added Line 220: return 'unchecked', '', 0",
                        "Added Line 229: return 'broken', '', 0"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7748": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/ext/autodoc/__init__.py": [
                        "def format_signature(self, **kwargs: Any) -> str:",
                        "def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/autodoc/__init__.py": [
                        "Added Line 1083: self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[j + 1:]),",
                        "Deleted Line 1064: continue",
                        "Added Line 1063: break",
                        "Added Line 1073: if not match:",
                        "Added Line 1075: exmod, path, base, args, retann = match.groups()",
                        "Added Line 1091: self._signatures.append(\"(%s) -> %s\" % (args, retann))",
                        "Deleted Line 1058: valid_names = [self.objpath[-1]]  # type: ignore",
                        "Deleted Line 1091: return super().format_signature(**kwargs)  # type: ignore",
                        "Added Line 1065: if line.endswith('\\\\'):",
                        "Added Line 1074: continue",
                        "Deleted Line 1081: return lines",
                        "Deleted Line 1053: match = py_ext_sig_re.match(doclines[0])",
                        "Deleted Line 1052: # match first line of docstring against signature RE",
                        "Deleted Line 1057: # the base name must match ours",
                        "Added Line 1088: result = args, retann",
                        "Added Line 1060: for j, line in enumerate(doclines):",
                        "Added Line 1062: # no lines in docstring, no match",
                        "Deleted Line 1063: if base not in valid_names:",
                        "Added Line 1068: else:",
                        "Deleted Line 1049: # no lines in docstring, no match",
                        "Added Line 1095: continue",
                        "Added Line 1071: # match first line of docstring against signature RE",
                        "Added Line 1087: # first signature",
                        "Added Line 1111: if self._new_docstrings is not None:",
                        "Added Line 1090: # subsequent signatures",
                        "Added Line 1057: self._signatures = []",
                        "Deleted Line 1060: valid_names.append('__init__')",
                        "Added Line 1067: line = line.rstrip('\\\\').rstrip()",
                        "Deleted Line 1062: valid_names.extend(cls.__name__ for cls in self.object.__mro__)",
                        "Added Line 1039: _new_docstrings = None  # type: List[List[str]]",
                        "Added Line 1053: valid_names.extend(cls.__name__ for cls in self.object.__mro__)",
                        "Added Line 1049: valid_names = [self.objpath[-1]]  # type: ignore",
                        "Added Line 1084: tabsize=tab_width)",
                        "Added Line 1079: continue",
                        "Added Line 1072: match = py_ext_sig_re.match(line)",
                        "Added Line 1064: ",
                        "Deleted Line 1055: continue",
                        "Added Line 1100: if result:",
                        "Deleted Line 1051: continue",
                        "Added Line 1126: return sig",
                        "Added Line 1124: return \"\\n\".join([sig] + self._signatures)",
                        "Added Line 1101: # finish the loop when signature found",
                        "Added Line 1061: if not line:",
                        "Deleted Line 1079: lines = getattr(self, '_new_docstrings', None)",
                        "Deleted Line 1050: if not doclines:",
                        "Added Line 1103: ",
                        "Added Line 1082: tab_width = self.directive.state.document.settings.tab_width  # type: ignore",
                        "Added Line 1086: if result is None:",
                        "Deleted Line 1068: tabsize=tab_width)",
                        "Added Line 1099: ",
                        "Added Line 1102: break",
                        "Added Line 1081: # re-prepare docstring to ignore more leading indentation",
                        "Added Line 1051: valid_names.append('__init__')",
                        "Added Line 1040: _signatures = None      # type: List[str]",
                        "Deleted Line 1054: if not match:",
                        "Added Line 1077: # the base name must match ours",
                        "Deleted Line 1067: self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),",
                        "Added Line 1080: ",
                        "Added Line 1208: documenter.objpath = [None]",
                        "Added Line 1096: else:",
                        "Added Line 1054: ",
                        "Deleted Line 1066: tab_width = self.directive.state.document.settings.tab_width  # type: ignore",
                        "Added Line 1066: multiline = True",
                        "Added Line 1125: else:",
                        "Added Line 1093: if multiline:",
                        "Added Line 1076: ",
                        "Added Line 1122: sig = super().format_signature(**kwargs)  # type: ignore",
                        "Added Line 1123: if self._signatures:",
                        "Added Line 1050: if isinstance(self, ClassDocumenter):",
                        "Deleted Line 1065: # re-prepare docstring to ignore more leading indentation",
                        "Added Line 1094: # the signature have multiple signatures on docstring",
                        "Added Line 1078: if base not in valid_names:",
                        "Added Line 1097: # don't look any further",
                        "Deleted Line 1059: if isinstance(self, ClassDocumenter):",
                        "Added Line 1112: return self._new_docstrings",
                        "Added Line 1089: else:",
                        "Added Line 1092: ",
                        "Deleted Line 1080: if lines is not None:",
                        "Added Line 1048: # candidates of the object name",
                        "Added Line 1085: ",
                        "Added Line 1098: break",
                        "Deleted Line 1056: exmod, path, base, args, retann = match.groups()",
                        "Deleted Line 1061: if hasattr(self.object, '__mro__'):",
                        "Added Line 1052: if hasattr(self.object, '__mro__'):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 90,
                        "covered": 6,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8035": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/ext/autodoc/__init__.py": [
                        "def is_filtered_inherited_member(name: str) -> bool:",
                        "def bool_option(arg: Any) -> bool:",
                        "def merge_special_members_option(options: Dict) -> None:"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/autodoc/__init__.py": [
                        "Added Line 1310: 'private-members': members_option, 'special-members': members_option,",
                        "Added Line 144: # merging is not needed when members: ALL",
                        "Added Line 686: keep = membername in self.options.private_members",
                        "Added Line 671: else:",
                        "Added Line 143: if options.get('members') is ALL:",
                        "Added Line 147: members = options.setdefault('members', [])",
                        "Added Line 129: RemovedInSphinx50Warning, stacklevel=2)",
                        "Added Line 896: merge_members_option(self.options)",
                        "Added Line 668: keep = False",
                        "Added Line 142: \"\"\"Merge :*-members: option to the :members: option.\"\"\"",
                        "Deleted Line 651: # ignore members whose name starts with _ by default",
                        "Added Line 681: elif self.options.private_members is ALL:",
                        "Added Line 672: keep = membername in self.options.private_members",
                        "Deleted Line 868: merge_special_members_option(self.options)",
                        "Added Line 150: for member in options[key]:",
                        "Added Line 151: if member not in members:",
                        "Added Line 153: ",
                        "Added Line 152: members.append(member)",
                        "Added Line 669: elif self.options.private_members is ALL:",
                        "Added Line 683: elif is_filtered_inherited_member(membername):",
                        "Added Line 148: for key in {'private-members', 'special-members'}:",
                        "Deleted Line 659: keep = self.options.private_members and \\",
                        "Added Line 684: keep = False",
                        "Added Line 141: def merge_members_option(options: Dict) -> None:",
                        "Deleted Line 652: keep = self.options.private_members",
                        "Added Line 687: else:",
                        "Deleted Line 1290: merge_special_members_option(self.options)",
                        "Added Line 680: keep = False",
                        "Added Line 149: if key in options and options[key] is not ALL:",
                        "Added Line 890: 'private-members': members_option, 'special-members': members_option,",
                        "Added Line 679: if self.options.private_members is None:",
                        "Added Line 685: else:",
                        "Added Line 1318: merge_members_option(self.options)",
                        "Added Line 688: keep = False",
                        "Added Line 670: keep = True",
                        "Deleted Line 660: (has_doc or self.options.undoc_members)",
                        "Added Line 128: warnings.warn(\"merge_special_members_option() is deprecated.\",",
                        "Added Line 145: return",
                        "Added Line 146: ",
                        "Added Line 154: ",
                        "Deleted Line 658: # ignore members whose name starts with _ by default",
                        "Added Line 678: if has_doc or self.options.undoc_members:",
                        "Added Line 682: keep = True",
                        "Added Line 667: if self.options.private_members is None:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    },
                    "lines": {
                        "total": 46,
                        "covered": 2,
                        "percentage": 4.3478260869565215
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7910": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/ext/napoleon/__init__.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8269": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/builders/linkcheck.py": [
                        "def check_uri() -> Tuple[str, str, int]:"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8056": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/ext/napoleon/docstring.py": [
                        "def _parse_other_parameters_section(self, section: str) -> List[str]:",
                        "def _consume_field(self, parse_type: bool = True, prefer_type: bool = False"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/napoleon/docstring.py": [
                        "Added Line 270: multiple: bool = False) -> List[Tuple[str, str, List[str]]]:",
                        "Deleted Line 269: def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False",
                        "Deleted Line 270: ) -> List[Tuple[str, str, List[str]]]:",
                        "Added Line 689: fields = self._consume_fields(multiple=True)",
                        "Deleted Line 684: fields = self._consume_fields()",
                        "Added Line 276: for name in _name.split(\",\"):",
                        "Added Line 692: fields = self._consume_fields()",
                        "Added Line 277: fields.append((name.strip(), _type, _desc))",
                        "Added Line 269: def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,",
                        "Added Line 275: if multiple and _name:",
                        "Deleted Line 275: if _name or _type or _desc:",
                        "Added Line 278: elif _name or _type or _desc:",
                        "Added Line 688: # Allow to declare multiple parameters at once (ex: x, y: int)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8120": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/application.py",
                    "sphinx/locale/__init__.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8475": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/builders/linkcheck.py": [
                        "def check_uri() -> Tuple[str, str, int]:"
                    ]
                },
                "missing_lines": {
                    "sphinx/builders/linkcheck.py": [
                        "Added Line 23: from requests.exceptions import HTTPError, TooManyRedirects",
                        "Deleted Line 23: from requests.exceptions import HTTPError"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8459": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sphinx/ext/autodoc/typehints.py": [
                        "Added Line 30: sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)",
                        "Deleted Line 30: sig = inspect.signature(obj)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8548": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/ext/autodoc/__init__.py"
                ],
                "missing_functions": {
                    "sphinx/ext/autodoc/importer.py": [
                        "def __init__(self, cls: Any, name: str, value: Any, docstring: Optional[str] = N"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/autodoc/importer.py": [
                        "Added Line 312: try:",
                        "Added Line 254: def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable",
                        "Deleted Line 300: # annotation only member (ex. attr: int)",
                        "Deleted Line 303: for name in getannotations(cls):",
                        "Added Line 302: # annotation only member (ex. attr: int)",
                        "Added Line 310: ",
                        "Added Line 255: ) -> Dict[str, ClassAttribute]:",
                        "Deleted Line 302: try:",
                        "Added Line 313: modname = safe_getattr(cls, '__module__')",
                        "Added Line 314: qualname = safe_getattr(cls, '__qualname__')",
                        "Deleted Line 316: '\\n'.join(docstring))",
                        "Deleted Line 306: members[name] = ClassAttribute(cls, name, INSTANCEATTR)",
                        "Added Line 301: for cls in getmro(subject):",
                        "Added Line 317: for (ns, name), docstring in analyzer.attr_docs.items():",
                        "Added Line 320: '\\n'.join(docstring))",
                        "Added Line 324: pass",
                        "Deleted Line 312: namespace = '.'.join(objpath)",
                        "Deleted Line 254: def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,",
                        "Deleted Line 308: pass",
                        "Added Line 321: except (AttributeError, PycodeError):",
                        "Deleted Line 310: if analyzer:",
                        "Added Line 300: try:",
                        "Deleted Line 314: if namespace == ns and name not in members:",
                        "Deleted Line 307: except AttributeError:",
                        "Deleted Line 301: for cls in getmro(subject):",
                        "Added Line 309: pass",
                        "Deleted Line 309: ",
                        "Added Line 323: except AttributeError:",
                        "Added Line 318: if ns == qualname and name not in members:",
                        "Deleted Line 304: name = unmangle(cls, name)",
                        "Added Line 304: for name in getannotations(cls):",
                        "Added Line 307: members[name] = ClassAttribute(cls, name, INSTANCEATTR)",
                        "Added Line 315: analyzer = ModuleAnalyzer.for_module(modname)",
                        "Added Line 17: from sphinx.pycode import ModuleAnalyzer, PycodeError",
                        "Deleted Line 305: if name and name not in members:",
                        "Deleted Line 17: from sphinx.pycode import ModuleAnalyzer",
                        "Added Line 311: # append instance attributes (cf. self.attr1) if analyzer knows",
                        "Added Line 319: members[name] = ClassAttribute(cls, name, INSTANCEATTR,",
                        "Added Line 308: except AttributeError:",
                        "Added Line 303: try:",
                        "Added Line 305: name = unmangle(cls, name)",
                        "Deleted Line 255: analyzer: ModuleAnalyzer = None) -> Dict[str, ClassAttribute]:",
                        "Added Line 322: pass",
                        "Deleted Line 313: for (ns, name), docstring in analyzer.attr_docs.items():",
                        "Added Line 316: analyzer.analyze()",
                        "Deleted Line 311: # append instance attributes (cf. self.attr1) if analyzer knows",
                        "Deleted Line 315: members[name] = ClassAttribute(subject, name, INSTANCEATTR,",
                        "Added Line 306: if name and name not in members:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 50,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8265": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/pycode/ast.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8721": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/ext/viewcode.py": [
                        "def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/viewcode.py": [
                        "Added Line 187: if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:",
                        "Added Line 185: if app.builder.name == \"singlehtml\":",
                        "Added Line 188: return",
                        "Added Line 186: return"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/util/docfields.py"
                ],
                "missing_functions": {
                    "sphinx/domains/python.py": [
                        "def make_xref(self, rolename: str, domain: str, target: str,"
                    ]
                },
                "missing_lines": {
                    "sphinx/domains/python.py": [
                        "Added Line 276: result['py:class'] = env.ref_context.get('py:class')",
                        "Added Line 275: result['py:module'] = env.ref_context.get('py:module')"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8621": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/builders/html/transforms.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7590": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/domains/c.py",
                    "sphinx/util/cfamily.py"
                ],
                "missing_functions": {
                    "sphinx/domains/cpp.py": [
                        "def _parse_literal(self) -> ASTLiteral:",
                        "def describe_signature(self, signode: TextElement, mode: str, env: \"BuildEnviron",
                        "def describe_signature(self, signode: TextElement, mode: str,",
                        "def _stringify(self, transform: StringifyTransform) -> str:"
                    ]
                },
                "missing_lines": {
                    "sphinx/domains/cpp.py": [
                        "Added Line 302: ''')",
                        "Added Line 640: pnode['cpp:parent_key'] = symbol.get_lookup_key()",
                        "Added Line 908: def _stringify(self, transform: StringifyTransform) -> str:",
                        "Added Line 4720: intLit = ASTNumberLiteral(self.definition[pos:self.pos])",
                        "Deleted Line 37: hex_literal_re, binary_literal_re, float_literal_re,",
                        "Added Line 4735: charLit = ASTCharLiteral(prefix, data)",
                        "Added Line 912: # mangle as if it was a function call: ident(literal)",
                        "Added Line 914: ",
                        "Added Line 4700: ",
                        "Added Line 632: assert len(prefix) == 0",
                        "Added Line 4715: return _udl(floatLit)",
                        "Added Line 910: ",
                        "Added Line 630: elif mode == 'udl':",
                        "Added Line 4708: pos = self.pos",
                        "Added Line 4692: ",
                        "Added Line 911: def get_id(self, version: int) -> str:",
                        "Added Line 849: # TODO: floats should be mangled by writing the hex of the binary representation",
                        "Added Line 4713: return floatLit",
                        "Added Line 4719: hasSuffix = self.match(integers_literal_suffix_re)",
                        "Added Line 4696: # hmm, should we care if it's a keyword?",
                        "Added Line 300: udl_identifier_re = re.compile(r'''(?x)",
                        "Deleted Line 4661: for regex in [float_literal_re, binary_literal_re, hex_literal_re,",
                        "Added Line 903: class ASTUserDefinedLiteral(ASTLiteral):",
                        "Added Line 4723: else:",
                        "Added Line 4699: return ASTUserDefinedLiteral(literal, ident)",
                        "Added Line 920: ",
                        "Added Line 637: reftype='identifier',",
                        "Deleted Line 610: key = symbol.get_lookup_key()",
                        "Deleted Line 4666: self.pos += 1",
                        "Added Line 904: def __init__(self, literal: ASTLiteral, ident: ASTIdentifier):",
                        "Added Line 635: targetText = 'operator\"\"' + self.identifier",
                        "Deleted Line 4678: return ASTCharLiteral(prefix, data)",
                        "Added Line 4694: if not self.match(udl_identifier_re):",
                        "Added Line 4714: else:",
                        "Added Line 634: assert not self.is_anon()",
                        "Added Line 614: pnode['cpp:parent_key'] = symbol.get_lookup_key()",
                        "Added Line 301: [a-zA-Z_][a-zA-Z0-9_]*\\b   # note, no word boundary in the beginning",
                        "Added Line 631: # the target is 'operator\"\"id' instead of just 'id'",
                        "Added Line 633: assert len(templateArgs) == 0",
                        "Deleted Line 4667: return ASTNumberLiteral(self.definition[pos:self.pos])",
                        "Added Line 905: self.literal = literal",
                        "Added Line 638: reftarget=targetText, modname=None,",
                        "Deleted Line 4671: return ASTStringLiteral(string)",
                        "Added Line 4728: return _udl(ASTStringLiteral(string))",
                        "Added Line 4693: def _udl(literal: ASTLiteral) -> ASTLiteral:",
                        "Added Line 4712: if hasSuffix:",
                        "Added Line 37: hex_literal_re, binary_literal_re, integers_literal_suffix_re,",
                        "Added Line 4697: # it looks like GCC does not disallow keywords",
                        "Added Line 917: self.literal.describe_signature(signode, mode, env, symbol)",
                        "Added Line 4741: return _udl(charLit)",
                        "Added Line 4716: for regex in [binary_literal_re, hex_literal_re,",
                        "Added Line 4711: floatLit = ASTNumberLiteral(self.definition[pos:self.pos])",
                        "Added Line 4710: hasSuffix = self.match(float_literal_suffix_re)",
                        "Added Line 915: def describe_signature(self, signode: TextElement, mode: str,",
                        "Deleted Line 4663: pos = self.pos",
                        "Added Line 4724: return _udl(intLit)",
                        "Added Line 642: signode += pnode",
                        "Added Line 919: ",
                        "Added Line 922: ",
                        "Added Line 906: self.ident = ident",
                        "Added Line 4722: return intLit",
                        "Added Line 641: pnode += nodes.Text(self.identifier)",
                        "Added Line 916: env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:",
                        "Added Line 913: return 'clL_Zli{}E{}E'.format(self.ident.get_id(version), self.literal.get_id(version))",
                        "Added Line 921: ################################################################################",
                        "Deleted Line 4684: ",
                        "Added Line 38: float_literal_re, float_literal_suffix_re,",
                        "Added Line 4695: return literal",
                        "Added Line 894: # TODO: the ID should be have L E around it",
                        "Added Line 918: self.ident.describe_signature(signode, \"udl\", env, \"\", \"\", symbol)",
                        "Deleted Line 611: pnode['cpp:parent_key'] = key",
                        "Added Line 4698: ident = ASTIdentifier(self.matched_text)",
                        "Added Line 4721: if hasSuffix:",
                        "Deleted Line 4665: while self.current_char in 'uUlLfF':",
                        "Added Line 639: classname=None)",
                        "Added Line 4709: if self.match(float_literal_re):",
                        "Added Line 636: pnode = addnodes.pending_xref('', refdomain='cpp',",
                        "Added Line 909: return transform(self.literal) + transform(self.ident)",
                        "Added Line 907: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 107,
                        "covered": 1,
                        "percentage": 0.9345794392523363
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8593": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/ext/autodoc/importer.py"
                ],
                "missing_functions": {
                    "sphinx/ext/autodoc/__init__.py": [
                        "def add_directive_header(self, sig: str) -> None:"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/autodoc/__init__.py": [
                        "Deleted Line 29: get_object_members, import_module, import_object)",
                        "Added Line 1059: except AttributeError:",
                        "Added Line 1083: if member.__name__ not in self.__all__:",
                        "Added Line 1062: # annotation only member (ex. attr: int)",
                        "Added Line 1082: for member in members.values():",
                        "Added Line 1093: else:",
                        "Added Line 1068: docstring=\"\\n\".join(docstring))",
                        "Deleted Line 1048: members = get_module_members(self.object)",
                        "Added Line 1071: ",
                        "Added Line 1063: try:",
                        "Added Line 1086: return False, list(members.values())",
                        "Deleted Line 1069: except AttributeError:",
                        "Added Line 1073: ",
                        "Added Line 1056: value = safe_getattr(self.object, name, None)",
                        "Added Line 1057: docstring = attr_docs.get(('', name), [])",
                        "Deleted Line 1068: ret.append(ObjectMember(name, value))",
                        "Added Line 1050: else:",
                        "Added Line 1075: members = self.get_module_members()",
                        "Added Line 1067: members[name] = ObjectMember(name, INSTANCEATTR,",
                        "Added Line 1051: attr_docs = {}",
                        "Deleted Line 1054: ret = []",
                        "Added Line 28: from sphinx.ext.autodoc.importer import (ClassAttribute, get_class_members, get_object_members,",
                        "Deleted Line 1059: ret.append(ObjectMember(name, value, skipped=True))",
                        "Added Line 1091: if name in members:",
                        "Added Line 1053: members = {}  # type: Dict[str, ObjectMember]",
                        "Deleted Line 1058: else:",
                        "Added Line 1049: attr_docs = self.analyzer.attr_docs",
                        "Added Line 1047: \"\"\"Get members of target module.\"\"\"",
                        "Added Line 1084: member.skipped = True",
                        "Added Line 1055: try:",
                        "Added Line 1065: if name not in members:",
                        "Deleted Line 1067: value = safe_getattr(self.object, name)",
                        "Added Line 1070: pass",
                        "Added Line 1058: members[name] = ObjectMember(name, value, docstring=\"\\n\".join(docstring))",
                        "Added Line 1046: def get_module_members(self) -> Dict[str, ObjectMember]:",
                        "Added Line 1072: return members",
                        "Added Line 1092: ret.append(members[name])",
                        "Added Line 29: import_module, import_object)",
                        "Added Line 1080: return True, list(members.values())",
                        "Deleted Line 28: from sphinx.ext.autodoc.importer import (ClassAttribute, get_class_members, get_module_members,",
                        "Added Line 1048: if self.analyzer:",
                        "Added Line 1064: for name in inspect.getannotations(self.object):",
                        "Deleted Line 1055: for name, value in members:",
                        "Added Line 1069: except AttributeError:",
                        "Deleted Line 1052: return True, members",
                        "Deleted Line 1057: ret.append(ObjectMember(name, value))",
                        "Added Line 1054: for name in dir(self.object):",
                        "Deleted Line 1056: if name in self.__all__:",
                        "Deleted Line 1061: return False, ret",
                        "Added Line 1061: ",
                        "Added Line 1052: ",
                        "Deleted Line 1066: try:",
                        "Added Line 1060: continue",
                        "Added Line 1066: docstring = attr_docs.get(('', name), [])"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 60,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8595": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/ext/autodoc/__init__.py": [
                        "def get_module_members(self) -> Dict[str, ObjectMember]:"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9230": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/util/docfields.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9229": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/ext/autodoc/__init__.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9258": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/domains/python.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9367": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/pycode/ast.py": [
                        "def visit_UnaryOp(self, node: ast.UnaryOp) -> str:"
                    ]
                },
                "missing_lines": {
                    "sphinx/pycode/ast.py": [
                        "Added Line 216: if len(node.elts) == 0:",
                        "Deleted Line 218: else:",
                        "Deleted Line 216: if node.elts:",
                        "Added Line 221: return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 4,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8638": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/domains/python.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9320": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/cmd/quickstart.py": [
                        "def is_path(x: str) -> str:"
                    ]
                },
                "missing_lines": {
                    "sphinx/cmd/quickstart.py": [
                        "Added Line 99: if x == '':",
                        "Added Line 100: return x",
                        "Added Line 103: ",
                        "Added Line 102: ",
                        "Added Line 98: def is_path_or_empty(x: str) -> str:",
                        "Added Line 232: '', is_path_or_empty)",
                        "Added Line 101: return is_path(x)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 1,
                        "percentage": 12.5
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9711": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sphinx/extension.py": [
                        "Added Line 64: if reqversion > extension.version:",
                        "Added Line 14: ",
                        "Added Line 59: else:",
                        "Added Line 60: try:",
                        "Added Line 58: fulfilled = False",
                        "Added Line 66: ",
                        "Added Line 61: if Version(reqversion) > Version(extension.version):",
                        "Added Line 62: fulfilled = False",
                        "Added Line 13: from packaging.version import InvalidVersion, Version",
                        "Added Line 57: if extension.version == 'unknown version':",
                        "Added Line 63: except InvalidVersion:",
                        "Added Line 65: fulfilled = False",
                        "Added Line 56: fulfilled = True",
                        "Added Line 67: if not fulfilled:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 1,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9591": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/domains/python.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9281": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/util/inspect.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9673": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/ext/autodoc/typehints.py": [
                        "def augment_descriptions_with_types("
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/autodoc/typehints.py": [
                        "Added Line 159: if name in ('return', 'returns'):",
                        "Deleted Line 159: if name == 'return':",
                        "Deleted Line 152: elif parts[0] == 'return':",
                        "Added Line 152: elif parts[0] in ('return', 'returns'):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-11618": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/geometry/point.py": [
                        "def distance(self, p):"
                    ]
                },
                "missing_lines": {
                    "sympy/geometry/point.py": [
                        "Added Line 274: p1 = [0] * max(len(p), len(self))",
                        "Added Line 282: ",
                        "Added Line 276: ",
                        "Added Line 279: ",
                        "Added Line 271: return sqrt(sum([(a - b)**2 for a, b in zip(",
                        "Added Line 280: return sqrt(sum([(a - b)**2 for a, b in zip(",
                        "Added Line 277: for i in range(min(len(p), len(self))):",
                        "Added Line 272: self.args, p.args if isinstance(p, Point) else p)]))",
                        "Added Line 281: p1, p2)]))",
                        "Added Line 275: p2 = p.args if len(p.args) > len(self.args) else self.args",
                        "Added Line 278: p1[i] = p.args[i] if len(p) < len(self) else self.args[i]",
                        "Added Line 273: else:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 2,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9602": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/domains/python.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9658": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/ext/autodoc/mock.py": [
                        "def _make_subclass(name: str, module: str, superclass: Any = _MockObject,",
                        "def __new__(cls, *args: Any, **kwargs: Any) -> Any:"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/autodoc/mock.py": [
                        "Deleted Line 43: self.__qualname__ = ''",
                        "Added Line 77: '__name__': name,",
                        "Added Line 29: __name__ = ''",
                        "Added Line 44: self.__qualname__ = self.__name__"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9461": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sphinx/domains/python.py",
                    "sphinx/util/inspect.py"
                ],
                "missing_functions": {
                    "sphinx/ext/autodoc/__init__.py": [
                        "def is_filtered_inherited_member(name: str, obj: Any) -> bool:",
                        "def add_directive_header(self, sig: str) -> None:"
                    ]
                },
                "missing_lines": {
                    "sphinx/ext/autodoc/__init__.py": [
                        "Added Line 2671: else:",
                        "Added Line 2674: def import_object(self, raiseerror: bool = False) -> bool:",
                        "Added Line 2680: obj = __dict__.get(self.objpath[-1])",
                        "Added Line 2678: if ret and not inspect.isproperty(self.object):",
                        "Added Line 2677: ret = super().import_object(raiseerror)",
                        "Added Line 2684: return True",
                        "Added Line 2668: __dict__ = safe_getattr(parent.object, '__dict__', {})",
                        "Added Line 2687: ",
                        "Added Line 2689: return ret",
                        "Added Line 2682: self.object = obj.__func__",
                        "Added Line 2666: return True",
                        "Added Line 2672: return False",
                        "Added Line 2681: if isinstance(obj, classmethod) and inspect.isproperty(obj.__func__):",
                        "Added Line 2688: self.isclassmethod = False",
                        "Added Line 2670: return isinstance(obj, classmethod) and inspect.isproperty(obj.__func__)",
                        "Added Line 2667: else:",
                        "Added Line 2704: self.add_line('   :classmethod:', sourcename)",
                        "Deleted Line 721: self.parent, self.object_name)",
                        "Added Line 2669: obj = __dict__.get(membername)",
                        "Added Line 2673: ",
                        "Added Line 2679: __dict__ = safe_getattr(self.parent, '__dict__', {})",
                        "Added Line 2703: if self.isclassmethod:",
                        "Added Line 2675: \"\"\"Check the exisitence of uninitialized instance attribute when failed to import",
                        "Added Line 2686: return False",
                        "Added Line 2685: else:",
                        "Added Line 721: self.object, membername)",
                        "Added Line 2683: self.isclassmethod = True",
                        "Added Line 2676: the attribute.\"\"\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    },
                    "lines": {
                        "total": 52,
                        "covered": 3,
                        "percentage": 5.769230769230769
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9698": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sphinx/domains/python.py": [
                        "def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-12419": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/matrices/expressions/matexpr.py": [
                        "def conjugate(self):",
                        "def _eval_derivative(self, v):"
                    ]
                },
                "missing_lines": {
                    "sympy/matrices/expressions/matexpr.py": [
                        "Added Line 482: elif eq is S.false:",
                        "Added Line 5: from sympy.core import S, Symbol, Tuple, Integer, Basic, Expr, Eq",
                        "Added Line 484: return KroneckerDelta(i, j)",
                        "Added Line 10: from sympy.functions.special.tensor_functions import KroneckerDelta",
                        "Deleted Line 378: from sympy import KroneckerDelta",
                        "Added Line 480: if eq is S.true:",
                        "Deleted Line 481: else:",
                        "Deleted Line 5: from sympy.core import S, Symbol, Tuple, Integer, Basic, Expr",
                        "Added Line 479: eq = Eq(i, j)",
                        "Deleted Line 479: if i == j:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-12481": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/combinatorics/permutations.py": [
                        "def __new__(cls, *args, **kwargs):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 8,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-13551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/concrete/products.py": [
                        "def _eval_product(self, term, limits):"
                    ]
                },
                "missing_lines": {
                    "sympy/concrete/products.py": [
                        "Deleted Line 285: ",
                        "Added Line 286: p = exp(Sum(log(p), (k, a, n)))",
                        "Deleted Line 286: p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])",
                        "Added Line 285: from sympy.concrete.summations import Sum"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-12096": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/core/function.py": [
                        "def _eval_evalf(self, prec):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-13031": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/matrices/sparse.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13091": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/core/exprtools.py",
                    "sympy/core/numbers.py",
                    "sympy/geometry/entity.py",
                    "sympy/physics/optics/medium.py",
                    "sympy/physics/vector/dyadic.py",
                    "sympy/physics/vector/frame.py",
                    "sympy/physics/vector/vector.py",
                    "sympy/polys/agca/modules.py",
                    "sympy/polys/domains/domain.py",
                    "sympy/polys/domains/expressiondomain.py",
                    "sympy/polys/domains/pythonrational.py",
                    "sympy/polys/domains/quotientring.py",
                    "sympy/polys/fields.py",
                    "sympy/polys/monomials.py",
                    "sympy/polys/polyclasses.py",
                    "sympy/polys/polytools.py",
                    "sympy/polys/rings.py",
                    "sympy/polys/rootoftools.py",
                    "sympy/tensor/array/ndim_array.py",
                    "sympy/utilities/enumerative.py"
                ],
                "missing_functions": {
                    "sympy/core/basic.py": [
                        "def _has(self, pattern):",
                        "def __eq__(self, other):",
                        "def __ne__(self, other):"
                    ]
                },
                "missing_lines": {
                    "sympy/core/basic.py": [
                        "Added Line 332: return not self == other",
                        "Added Line 1183: return lambda other: self == other",
                        "Deleted Line 332: return not self.__eq__(other)",
                        "Deleted Line 1183: return self.__eq__"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 21,
                        "covered": 1,
                        "percentage": 4.761904761904762
                    },
                    "functions": {
                        "total": 33,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 112,
                        "covered": 2,
                        "percentage": 1.7857142857142856
                    }
                }
            }
        },
        "sympy__sympy-12489": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/combinatorics/permutations.py": [
                        "def _af_new(perm):",
                        "def __xor__(self, h):",
                        "def size(self):",
                        "def __invert__(self):",
                        "def next_nonlex(self):",
                        "def unrank_trotterjohnson(self, size, rank):",
                        "def random(self, n):",
                        "def rank_trotterjohnson(self):",
                        "def commutator(self, x):",
                        "def __pow__(self, n):",
                        "def get_positional_distance(self, other):",
                        "def __mul__(self, other):",
                        "def __new__(cls, *args, **kwargs):",
                        "def _af_invert(a):",
                        "def josephus(self, m, n, s=1):",
                        "def from_inversion_vector(self, inversion):",
                        "def unrank_lex(self, size, rank):",
                        "def mul_inv(self, other):",
                        "def rmul(*args):",
                        "def next_trotterjohnson(self):",
                        "def _af_pow(a, n):",
                        "def next_lex(self):",
                        "def __add__(self, other):",
                        "def _unrank1(n, r, a):"
                    ]
                },
                "missing_lines": {
                    "sympy/combinatorics/permutations.py": [
                        "Added Line 2132: return self._af_new([a[b[inva[i]]] for i in invb])",
                        "Added Line 2741: return cls._af_new(perm)",
                        "Deleted Line 1233: rv = _af_new(_af_rmuln(*a))",
                        "Deleted Line 860: return _af_new(list(range(size or 0)))",
                        "Added Line 466: ",
                        "Deleted Line 2668: def josephus(self, m, n, s=1):",
                        "Added Line 169: ",
                        "Deleted Line 1242: return _af_new(_af_rmul(a, b))",
                        "Deleted Line 932: def _af_new(perm):",
                        "Added Line 1245: cls = type(self)",
                        "Added Line 929: ",
                        "Deleted Line 2744: def random(self, n):",
                        "Deleted Line 870: return _af_new(a.list(size))",
                        "Deleted Line 1731: return Perm.unrank_nonlex(self.size, r + 1)",
                        "Deleted Line 2760: return _af_new(perm_array)",
                        "Deleted Line 1443: return _af_new(a)",
                        "Deleted Line 1226: @staticmethod",
                        "Deleted Line 931: @staticmethod",
                        "Added Line 1246: return cls(other)*self",
                        "Deleted Line 868: return Perm(a.array_form, size=size)",
                        "Added Line 868: if isinstance(a, cls):  # g",
                        "Added Line 1241: return self._af_new(_af_rmul(a, b))",
                        "Deleted Line 951: p = Basic.__new__(Perm, perm)",
                        "Deleted Line 1307: return _af_new(perm)",
                        "Deleted Line 1348: return _af_new(_af_pow(self.array_form, n))",
                        "Added Line 1244: \"\"\"This is needed to coerce other to Permutation in rmul.\"\"\"",
                        "Deleted Line 2763: def unrank_lex(self, size, rank):",
                        "Deleted Line 1668: return _af_new(id_perm)",
                        "Added Line 2714: return cls(perm)",
                        "Added Line 1226: def rmul_with_af(cls, *args):",
                        "Added Line 214: ",
                        "Added Line 1443: return self._af_new(a)",
                        "Deleted Line 1245: \"\"\"This is needed to coerse other to Permutation in rmul.\"\"\"",
                        "Added Line 865: return cls._af_new(Cycle(*args).list(size))",
                        "Added Line 1225: @classmethod",
                        "Added Line 1348: return self._af_new(_af_pow(self.array_form, n))",
                        "Added Line 1165: rv = self.unrank_lex(self.size, rank)",
                        "Deleted Line 2717: def from_inversion_vector(self, inversion):",
                        "Deleted Line 925: size = len(aform)",
                        "Added Line 871: return cls(a.array_form, size=size)",
                        "Added Line 1731: return self.unrank_nonlex(self.size, r + 1)",
                        "Added Line 875: return cls._af_new(list(range(a + 1)))",
                        "Added Line 1668: return self._af_new(id_perm)",
                        "Added Line 2668: def josephus(cls, m, n, s=1):",
                        "Deleted Line 881: ",
                        "Added Line 1526: return self._af_new(_af_invert(self._array_form))",
                        "Deleted Line 2397: def unrank_trotterjohnson(self, size, rank):",
                        "Added Line 2397: def unrank_trotterjohnson(cls, size, rank):",
                        "Added Line 1307: return self._af_new(perm)",
                        "Deleted Line 862: return _af_new(Cycle(*args).list(size))",
                        "Added Line 2763: def unrank_lex(cls, size, rank):",
                        "Deleted Line 2430: return _af_new(perm)",
                        "Added Line 1636: return self._af_new(perm)",
                        "Deleted Line 2484: return _af_new(pi)",
                        "Deleted Line 1344: if type(n) == Perm:",
                        "Deleted Line 1246: return Perm(other)*self",
                        "Added Line 2484: return self._af_new(pi)",
                        "Added Line 930: @classmethod",
                        "Added Line 863: return cls._af_new(list(range(size or 0)))",
                        "Added Line 2794: return cls._af_new(perm_array)",
                        "Deleted Line 872: return _af_new(list(range(a + 1)))",
                        "Deleted Line 2794: return _af_new(perm_array)",
                        "Added Line 2430: return cls._af_new(perm)",
                        "Deleted Line 1166: rv = Perm.unrank_lex(self.size, rank)",
                        "Deleted Line 929: return obj",
                        "Deleted Line 1636: return _af_new(perm)",
                        "Deleted Line 1526: return _af_new(_af_invert(self._array_form))",
                        "Added Line 2760: return cls._af_new(perm_array)",
                        "Deleted Line 926: obj = Basic.__new__(cls, aform)",
                        "Added Line 1232: rv = cls._af_new(_af_rmuln(*a))",
                        "Deleted Line 2132: return _af_new([a[b[inva[i]]] for i in invb])",
                        "Added Line 950: p = Basic.__new__(cls, perm)",
                        "Added Line 2744: def random(cls, n):",
                        "Added Line 2717: def from_inversion_vector(cls, inversion):",
                        "Deleted Line 865: if isinstance(a, Perm):  # g",
                        "Deleted Line 1227: def rmul_with_af(*args):",
                        "Added Line 931: def _af_new(cls, perm):",
                        "Added Line 1344: if isinstance(n, Permutation):",
                        "Added Line 873: return cls._af_new(a.list(size))",
                        "Deleted Line 2741: return _af_new(perm)",
                        "Deleted Line 2714: return Perm(perm)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 24,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 84,
                        "covered": 3,
                        "percentage": 3.571428571428571
                    }
                }
            }
        },
        "sympy__sympy-13372": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sympy/core/evalf.py": [
                        "Added Line 1313: raise NotImplementedError",
                        "Added Line 1312: else:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-13852": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/functions/special/zeta_functions.py": [
                        "def _eval_expand_func(self, **hints):",
                        "def eval(cls, s, z):"
                    ]
                },
                "missing_lines": {
                    "sympy/functions/special/zeta_functions.py": [
                        "Added Line 298: elif s == -1:",
                        "Added Line 284: return pi**2/4 - I*pi*log(2)",
                        "Added Line 287: elif z == -(sqrt(5) + 1)/2:",
                        "Added Line 288: return -pi**2/10 - log((sqrt(5)+1)/2)**2",
                        "Added Line 293: # For s = 0 or -1 use explicit formulas to evaluate, but",
                        "Added Line 286: return -pi**2/15 + log((sqrt(5)-1)/2)**2/2",
                        "Added Line 314: return -log(1 - z)",
                        "Deleted Line 4: from sympy.core import Function, S, sympify, pi",
                        "Added Line 279: return S.Zero",
                        "Added Line 281: if z == S.Half:",
                        "Added Line 291: elif z == (sqrt(5) - 1)/2:",
                        "Added Line 283: elif z == 2:",
                        "Added Line 9: from sympy.functions.elementary.miscellaneous import sqrt",
                        "Deleted Line 256: -log(z*exp_polar(-I*pi) + 1)",
                        "Added Line 4: from sympy.core import Function, S, sympify, pi, I",
                        "Added Line 280: elif s == 2:",
                        "Added Line 299: return z/(1 - z)**2",
                        "Added Line 282: return pi**2/12 - log(2)**2/2",
                        "Added Line 292: return pi**2/10 - log((sqrt(5)-1)/2)**2",
                        "Added Line 256: -log(-z + 1)",
                        "Deleted Line 279: return 0",
                        "Added Line 295: # for summation methods based on hypergeometric functions",
                        "Added Line 289: elif z == (3 - sqrt(5))/2:",
                        "Added Line 297: return z/(1 - z)",
                        "Added Line 285: elif z == -(sqrt(5) - 1)/2:",
                        "Deleted Line 9: ",
                        "Added Line 290: return pi**2/15 - log((sqrt(5)-1)/2)**2",
                        "Added Line 296: elif s == 0:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 30,
                        "covered": 2,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "sympy__sympy-13480": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/functions/elementary/hyperbolic.py": [
                        "def eval(cls, arg):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-13615": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/sets/sets.py": [
                        "def _complement(self, other):"
                    ]
                },
                "missing_lines": {
                    "sympy/sets/sets.py": [
                        "Added Line 223: contains = self.contains(el)",
                        "Added Line 224: return contains if contains in [True, False] else None",
                        "Added Line 228: return Union(FiniteSet(*(sifted[False])),",
                        "Added Line 227: # ignore those that are contained in self",
                        "Added Line 226: sifted = sift(other, ternary_sift)",
                        "Added Line 222: def ternary_sift(el):",
                        "Deleted Line 220: return FiniteSet(*[el for el in other if self.contains(el) != True])",
                        "Added Line 230: if sifted[None] else S.EmptySet)",
                        "Added Line 221: ",
                        "Added Line 225: ",
                        "Added Line 220: from sympy.utilities.iterables import sift",
                        "Added Line 229: Complement(FiniteSet(*(sifted[None])), self, evaluate=False)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13974": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/physics/quantum/tensorproduct.py": [
                        "def tensor_product_simp_Mul(e):"
                    ]
                },
                "missing_lines": {
                    "sympy/physics/quantum/tensorproduct.py": [
                        "Added Line 413: else:",
                        "Added Line 368: ",
                        "Added Line 412: return tensor_product_simp_Pow(e)",
                        "Added Line 359: new_args = [ tensor_product_simp_Pow(nc) for nc in nc_part ]",
                        "Added Line 350: for i in range(len(new_args)):",
                        "Added Line 365: \"\"\"Evaluates ``Pow`` expressions whose base is ``TensorProduct``\"\"\"",
                        "Added Line 354: else:",
                        "Added Line 21: ",
                        "Added Line 366: if not isinstance(e, Pow):",
                        "Added Line 314: # TensorProducts, like an Add, Commutator, etc.",
                        "Added Line 349: new_tp = tensor_product_simp_Pow(next)",
                        "Added Line 320: if n_nc == 0:",
                        "Added Line 324: return  Mul(*c_part) * tensor_product_simp_Pow(nc_part[0])",
                        "Deleted Line 340: for i in range(len(new_args)):",
                        "Added Line 369: if isinstance(e.base, TensorProduct):",
                        "Added Line 414: return tensor_product_simp(e.base) ** e.exp",
                        "Added Line 353: raise TypeError('TensorProduct expected, got: %r' % next)",
                        "Added Line 321: return e",
                        "Added Line 351: new_args[i] = new_args[i] * new_tp.args[i]",
                        "Added Line 367: return e",
                        "Added Line 370: return TensorProduct(*[ b**e.exp for b in e.base.args])",
                        "Added Line 411: if isinstance(e.base, TensorProduct):",
                        "Added Line 329: if isinstance(current, Pow):",
                        "Added Line 330: if isinstance(current.base, TensorProduct):",
                        "Added Line 331: current = tensor_product_simp_Pow(current)",
                        "Added Line 332: else:",
                        "Deleted Line 341: new_args[i] = new_args[i] * next",
                        "Added Line 358: elif e.has(Pow):",
                        "Added Line 323: if isinstance(nc_part[0], Pow):",
                        "Deleted Line 319: if n_nc == 0 or n_nc == 1:",
                        "Deleted Line 324: raise TypeError('TensorProduct expected, got: %r' % current)",
                        "Added Line 348: if isinstance(next.base, TensorProduct):",
                        "Added Line 372: return e",
                        "Deleted Line 339: # TensorProduct",
                        "Added Line 364: def tensor_product_simp_Pow(e):",
                        "Added Line 352: else:",
                        "Added Line 371: else:",
                        "Added Line 347: if isinstance(next, Pow):",
                        "Added Line 333: raise TypeError('TensorProduct expected, got: %r' % current)",
                        "Added Line 360: return tensor_product_simp_Mul(Mul(*c_part) * TensorProduct(*new_args))",
                        "Added Line 322: elif n_nc == 1:",
                        "Deleted Line 313: # TensorProducts, like an Add, Pow, Commutator, etc.",
                        "Added Line 355: raise TypeError('TensorProduct expected, got: %r' % next)",
                        "Deleted Line 338: # this won't quite work as we don't want next in the"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 45,
                        "covered": 1,
                        "percentage": 2.2222222222222223
                    }
                }
            }
        },
        "sympy__sympy-13878": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/stats/crv_types.py": [
                        "def StudentT(name, nu):",
                        "def UniformSum(name, n):",
                        "def Gamma(name, k, theta):",
                        "def Erlang(name, k, l):",
                        "def Frechet(name, a, s=1, m=0):",
                        "def Gompertz(name, b, eta):",
                        "def Kumaraswamy(name, a, b):",
                        "def Laplace(name, mu, b):",
                        "def Pareto(name, xm, alpha):",
                        "def Arcsin(name, a=0, b=1):",
                        "def Logistic(name, mu, s):",
                        "def Dagum(name, p, a, b):",
                        "def pdf(self, x):",
                        "def sample(self):",
                        "def ContinuousRV(symbol, density, set=Interval(-oo, oo)):",
                        "def Nakagami(name, mu, omega):",
                        "def GammaInverse(name, a, b):"
                    ]
                },
                "missing_lines": {
                    "sympy/stats/crv_types.py": [
                        "Added Line 1427: ",
                        "Added Line 208: ",
                        "Added Line 1247: (S.Zero, True))",
                        "Added Line 838: (S.One - exp(-self.rate*x), x >= 0),",
                        "Added Line 1295: Piecewise((uppergamma(a, b/z)/gamma(a), z > 0), (0, True))",
                        "Added Line 1583: return S.One/(1 + exp(-(x - mu)/s))",
                        "Added Line 1652: (S.Half + S.Half*erf((log(x) - mean)/sqrt(2)/std), x > 0),",
                        "Added Line 622: (S.One/gamma(k/2)*lowergamma(k/2, x/2), x >= 0),",
                        "Added Line 2329: return S.Half + x*gamma((nu+1)/2)*hyper((S.Half, (nu+1)/2),",
                        "Added Line 1116: >>> cdf(X)(z)",
                        "Added Line 2728: >>> cdf(UniformSum(\"x\", 5), evaluate=False)(2).doit()",
                        "Added Line 2701: >>> from sympy.stats import UniformSum, density, cdf",
                        "Added Line 1150: return Piecewise(",
                        "Added Line 1584: ",
                        "Added Line 1378: ",
                        "Added Line 2669: return Piecewise((S.Zero, x < 0),",
                        "Added Line 1245: a, b = self.a, self.b",
                        "Added Line 1296: ",
                        "Added Line 191: >>> from sympy.stats import Arcsin, density, cdf",
                        "Added Line 2731: The argument evaluate=False prevents an attempt at evaluation",
                        "Added Line 737: ",
                        "Added Line 205: (2*asin(sqrt((-a + z)/(-a + b)))/pi, b >= z),",
                        "Added Line 50: Lambda, Basic, lowergamma, erf, erfc, I, uppergamma, hyper)",
                        "Added Line 2729: 9/40",
                        "Deleted Line 1568: (S.Half + S.Half*erf((log(x) - mean)/sqrt(2)/std), x>0),",
                        "Added Line 2408: ",
                        "Added Line 1798: def _cdf(self, x):",
                        "Deleted Line 701: >>> from sympy.stats import Dagum, density",
                        "Added Line 1517: (S.Half*exp((x - mu)/b), x < mu),",
                        "Deleted Line 1072: >>> from sympy.stats import Frechet, density, E, std",
                        "Deleted Line 50: Lambda, Basic, lowergamma, erf, erfc, I)",
                        "Added Line 2396: ",
                        "Added Line 1560: ",
                        "Added Line 2382: ",
                        "Added Line 2357: >>> from sympy.stats import StudentT, density, E, variance, cdf",
                        "Added Line 1229: ",
                        "Added Line 2381: -z**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))",
                        "Added Line 1622: 1/(exp((mu - z)/s) + 1)",
                        "Added Line 1297: ",
                        "Added Line 1246: return Piecewise((uppergamma(a,b/x)/gamma(a), x > 0),",
                        "Deleted Line 1413: >>> from sympy.stats import Kumaraswamy, density, E, variance",
                        "Added Line 815: return rv(name, GammaDistribution, (k, S.One/l))",
                        "Added Line 1860: >>> cdf(X)(z)",
                        "Added Line 2732: of the sum for general n, before the argument 2 is passed.",
                        "Added Line 1863: ",
                        "Added Line 1248: ",
                        "Added Line 1623: ",
                        "Added Line 1117: Piecewise((exp(-((-m + z)/s)**(-a)), m <= z), (0, True))",
                        "Added Line 1244: def _cdf(self, x):",
                        "Added Line 1582: mu, s = self.mu, self.s",
                        "Deleted Line 1741: >>> from sympy.stats import Nakagami, density, E, variance",
                        "Added Line 1519: )",
                        "Added Line 722: >>> from sympy.stats import Dagum, density, cdf",
                        "Added Line 207: ",
                        "Added Line 204: Piecewise((0, a > z),",
                        "Added Line 2136: ",
                        "Deleted Line 606: (S.One/gamma(k/2)*lowergamma(k/2, x/2), x>=0),",
                        "Added Line 1443: a, b = self.a, self.b",
                        "Added Line 2722: >>> cdf(X)(z)",
                        "Added Line 1799: mu, omega = self.mu, self.omega",
                        "Added Line 2733: ",
                        "Added Line 1448: ",
                        "Added Line 1442: def _cdf(self, x):",
                        "Added Line 2383: ",
                        "Added Line 735: >>> cdf(X)(z)",
                        "Added Line 1609: >>> from sympy.stats import Logistic, density, cdf",
                        "Added Line 1449: ",
                        "Added Line 1151: (lowergamma(k, S(x)/theta)/gamma(k), x > 0),",
                        "Added Line 1103: >>> from sympy.stats import Frechet, density, E, std, cdf",
                        "Added Line 1559: (-exp((mu - z)/b)/2 + 1, True))",
                        "Deleted Line 789: return rv(name, GammaDistribution, (k, 1/l))",
                        "Added Line 1309: ",
                        "Added Line 1445: (S.Zero, x < S.Zero),",
                        "Added Line 1803: ",
                        "Deleted Line 1472: >>> from sympy.stats import Laplace, density",
                        "Added Line 2668: k = Dummy(\"k\")",
                        "Added Line 1249: ",
                        "Added Line 2666: def _cdf(self, x):",
                        "Added Line 2672: (S.One, True))",
                        "Added Line 1294: >>> cdf(X)(z)",
                        "Added Line 1862: (0, True))",
                        "Added Line 1831: >>> from sympy.stats import Nakagami, density, E, variance, cdf",
                        "Added Line 738: ",
                        "Added Line 2670: (1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**(n),",
                        "Added Line 2667: n = self.n",
                        "Added Line 1149: k, theta = self.k, self.theta",
                        "Deleted Line 181: >>> from sympy.stats import Arcsin, density",
                        "Added Line 1152: (S.Zero, True))",
                        "Added Line 2331: ",
                        "Added Line 1861: Piecewise((lowergamma(mu, mu*z**2/omega)/gamma(mu), z > 0),",
                        "Deleted Line 2255: >>> from sympy.stats import StudentT, density, E, variance",
                        "Added Line 1800: return Piecewise(",
                        "Added Line 1621: >>> cdf(X)(z)",
                        "Added Line 736: Piecewise(((1 + (z/b)**(-a))**(-p), z >= 0), (0, True))",
                        "Added Line 1581: def _cdf(self, x):",
                        "Added Line 1148: def _cdf(self, x):",
                        "Added Line 1475: >>> from sympy.stats import Kumaraswamy, density, E, variance, cdf",
                        "Added Line 1491: Piecewise((0, z < 0),",
                        "Added Line 1520: ",
                        "Added Line 1492: (-(-z**a + 1)**b + 1, z <= 1),",
                        "Added Line 1518: (S.One - S.Half*exp(-(x - mu)/b), x >= mu)",
                        "Added Line 206: (1, True))",
                        "Deleted Line 2585: >>> from sympy.stats import UniformSum, density",
                        "Added Line 2671: (k, 0, floor(x))), x <= n),",
                        "Added Line 1864: ",
                        "Added Line 2044: ",
                        "Added Line 2726: ",
                        "Added Line 1557: >>> cdf(X)(z)",
                        "Added Line 1516: return Piecewise(",
                        "Added Line 2730: ",
                        "Added Line 1447: (S.One, True))",
                        "Added Line 1446: (1 - (1 - x**a)**b, x <= S.One),",
                        "Added Line 750: ",
                        "Added Line 2725: ",
                        "Added Line 1558: Piecewise((exp((-mu + z)/b)/2, mu > z),",
                        "Deleted Line 1528: >>> from sympy.stats import Logistic, density",
                        "Added Line 1801: (lowergamma(mu, (mu/omega)*x**2)/gamma(mu), x > 0),",
                        "Added Line 2327: def _cdf(self, x):",
                        "Added Line 1118: ",
                        "Added Line 1514: def _cdf(self, x):",
                        "Added Line 203: >>> cdf(X)(z)",
                        "Added Line 2380: 1/2 + z*gamma(nu/2 + 1/2)*hyper((1/2, nu/2 + 1/2), (3/2,),",
                        "Added Line 1545: >>> from sympy.stats import Laplace, density, cdf",
                        "Deleted Line 812: (S.One - exp(-self.rate*x), x>=0),",
                        "Added Line 2724: (_k, 0, floor(z)))/factorial(n), n >= z), (1, True))",
                        "Added Line 1490: >>> cdf(X)(z)",
                        "Added Line 1515: mu, b = self.mu, self.b",
                        "Added Line 2727: Compute cdf with specific 'x' and 'n' values as follows :",
                        "Added Line 2379: >>> cdf(X)(z)",
                        "Added Line 136: ",
                        "Added Line 2723: Piecewise((0, z < 0), (Sum((-1)**_k*(-_k + z)**n*binomial(n, _k),",
                        "Added Line 1444: return Piecewise(",
                        "Added Line 1493: (1, True))",
                        "Added Line 1802: (S.Zero, True))",
                        "Added Line 2328: nu = self.nu",
                        "Added Line 2330: (S(3)/2,), -x**2/nu)/(sqrt(pi*nu)*gamma(nu/2))"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 18,
                        "covered": 1,
                        "percentage": 5.555555555555555
                    },
                    "lines": {
                        "total": 156,
                        "covered": 20,
                        "percentage": 12.82051282051282
                    }
                }
            }
        },
        "sympy__sympy-13647": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/matrices/common.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-15017": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/tensor/array/dense_ndim_array.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-14531": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/printing/str.py": [
                        "def _print_Inverse(self, I):",
                        "def _print_Transpose(self, T):",
                        "def _print_LatticeOp(self, expr):",
                        "def _print_NegativeInfinity(self, expr):",
                        "def _print_Or(self, expr):",
                        "def _print_Permutation(self, expr):",
                        "def _print_Pi(self, expr):",
                        "def _print_TensAdd(self, expr):",
                        "def _print_MatrixBase(self, expr):",
                        "def _print_Relational(self, expr):",
                        "def _print_Exp1(self, expr):"
                    ]
                },
                "missing_lines": {
                    "sympy/printing/str.py": [
                        "Added Line 144: return '(%s, %s)' % (self._print(expr.expr), self._print(expr.cond))",
                        "Added Line 380: return 'Permutation([], size=%s)' % self._print(expr.size)",
                        "Added Line 381: trim = self._print(expr.array_form[:s[-1] + 1]) + ', size=%s' % self._print(expr.size)",
                        "Deleted Line 415: (\", \".join(map(self._print, ring.symbols)), ring.domain, ring.order)",
                        "Added Line 241: + '[%s, %s]' % (self._print(expr.i), self._print(expr.j))",
                        "Added Line 382: use = full = self._print(expr.array_form)",
                        "Deleted Line 725: return \"Uniform(%s, %s)\" % (expr.a, expr.b)",
                        "Deleted Line 240: + '[%s, %s]' % (expr.i, expr.j)",
                        "Added Line 222: (e, z, z0, dir)))",
                        "Deleted Line 380: trim = str(expr.array_form[:s[-1] + 1]) + ', size=%s' % expr.size",
                        "Added Line 422: self._print(field.domain), self._print(field.order))",
                        "Deleted Line 419: (\", \".join(map(self._print, field.symbols)), field.domain, field.order)",
                        "Deleted Line 210: return \"Lambda((%s), %s)\" % (arg_string, expr)",
                        "Added Line 89: return '%s(%s)' % (self._print(expr.func), self._print(expr.arg))",
                        "Added Line 416: (\", \".join(map(self._print, ring.symbols)),",
                        "Deleted Line 89: return '%s(%s)' % (expr.func, expr.arg)",
                        "Added Line 417: self._print(ring.domain), self._print(ring.order))",
                        "Added Line 210: return \"Lambda((%s), %s)\" % (arg_string, self._print(expr))",
                        "Added Line 379: return 'Permutation(%s)' % self._print(expr.array_form)",
                        "Deleted Line 344: return \"Normal(%s, %s)\" % (expr.mu, expr.sigma)",
                        "Added Line 421: (\", \".join(map(self._print, field.symbols)),",
                        "Deleted Line 402: p = ['    %s' % str(a) for a in expr.args]",
                        "Added Line 403: p = ['    %s' % self._print(a) for a in expr.args]",
                        "Added Line 637: self._print(expr.rhs))",
                        "Added Line 207: return \"Lambda(%s, %s)\" % (self._print(args.args[0]), self._print(expr))",
                        "Added Line 636: return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs),",
                        "Added Line 345: return \"Normal(%s, %s)\" % (self._print(expr.mu), self._print(expr.sigma))",
                        "Added Line 729: return \"Uniform(%s, %s)\" % (self._print(expr.a), self._print(expr.b))",
                        "Deleted Line 378: return 'Permutation(%s)' % str(expr.array_form)",
                        "Deleted Line 207: return \"Lambda(%s, %s)\" % (args.args[0], expr)",
                        "Deleted Line 381: use = full = str(expr.array_form)",
                        "Deleted Line 379: return 'Permutation([], size=%s)' % expr.size",
                        "Deleted Line 144: return '(%s, %s)' % (expr.expr, expr.cond)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 38,
                        "covered": 5,
                        "percentage": 13.157894736842104
                    }
                }
            }
        },
        "sympy__sympy-13877": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/utilities/randtest.py"
                ],
                "missing_functions": {
                    "sympy/matrices/matrices.py": [
                        "def _eval_det_bareiss(self):",
                        "def _iszero(x):",
                        "def bareiss(mat, cumm=1):"
                    ]
                },
                "missing_lines": {
                    "sympy/matrices/matrices.py": [
                        "Added Line 193: # the computation by the factor of 2.5 in one test.",
                        "Added Line 194: # Relevant issues: #10279 and #13877.",
                        "Deleted Line 23: from sympy.core.compatibility import is_sequence, default_sort_key, range, \\",
                        "Added Line 192: # With the default iszerofunc, _find_reasonable_pivot slows down",
                        "Added Line 44: functions.\"\"\"",
                        "Added Line 43: \"\"\"Tests by expand_mul only, suitable for polynomials and rational",
                        "Deleted Line 182: ",
                        "Deleted Line 24: NotIterable",
                        "Added Line 8: from sympy.core.function import expand_mul",
                        "Deleted Line 177: def _find_pivot(l):",
                        "Deleted Line 183: ",
                        "Added Line 196: iszerofunc=_is_zero_after_expand_mul)",
                        "Deleted Line 181: return (None, None, None, None)",
                        "Added Line 47: ",
                        "Deleted Line 178: for pos,val in enumerate(l):",
                        "Added Line 42: def _is_zero_after_expand_mul(x):",
                        "Added Line 25: NotIterable)",
                        "Added Line 24: from sympy.core.compatibility import (is_sequence, default_sort_key, range,",
                        "Deleted Line 180: return (pos, val, None, None)",
                        "Deleted Line 194: pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])",
                        "Added Line 195: pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0],",
                        "Deleted Line 176: # XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead",
                        "Deleted Line 179: if val:",
                        "Added Line 46: ",
                        "Added Line 45: return expand_mul(x) == 0",
                        "Deleted Line 193: # XXX should use `_find_reasonable_pivot`.  Blocked by issue #12362"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 34,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-14711": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/physics/vector/vector.py": [
                        "def __hash__(self):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-14976": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/printing/pycode.py": [
                        "def _print_Float(self, e):"
                    ]
                },
                "missing_lines": {
                    "sympy/printing/pycode.py": [
                        "Added Line 341: ",
                        "Added Line 339: e.q,",
                        "Added Line 340: )"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 4,
                        "percentage": 57.14285714285714
                    }
                }
            }
        },
        "sympy__sympy-15345": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/printing/mathematica.py": [
                        "def _print_Function(self, expr):"
                    ]
                },
                "missing_lines": {
                    "sympy/printing/mathematica.py": [
                        "Added Line 35: \"Min\": [(lambda *x: True, \"Min\")],",
                        "Added Line 106: ",
                        "Added Line 105: _print_MinMaxBase = _print_Function",
                        "Deleted Line 34: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "sympy__sympy-14248": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/printing/latex.py",
                    "sympy/printing/pretty/pretty.py"
                ],
                "missing_functions": {
                    "sympy/printing/str.py": [
                        "def _print_Mul(self, expr):",
                        "def _print_HadamardProduct(self, expr):"
                    ]
                },
                "missing_lines": {
                    "sympy/printing/str.py": [
                        "Added Line 312: sign = \"\"",
                        "Added Line 335: return sign + ' '.join(l)",
                        "Added Line 310: sign = \"-\"",
                        "Added Line 334: sign = \"\"",
                        "Added Line 313: ",
                        "Added Line 328: t = t[1:]",
                        "Added Line 314: return sign + '*'.join([self.parenthesize(arg, precedence(expr))",
                        "Deleted Line 316: for arg in expr.args])",
                        "Added Line 324: l = []",
                        "Added Line 326: if t.startswith('-'):",
                        "Deleted Line 307: return '*'.join([self.parenthesize(arg, precedence(expr))",
                        "Added Line 309: expr = _keep_coeff(-c, m)",
                        "Added Line 329: else:",
                        "Added Line 330: sign = \"+\"",
                        "Added Line 331: l.extend([sign, t])",
                        "Added Line 332: sign = l.pop(0)",
                        "Added Line 325: for t in terms:",
                        "Added Line 323: for arg in expr.args]",
                        "Added Line 307: c, m = expr.as_coeff_mmul()",
                        "Added Line 327: sign = \"-\"",
                        "Added Line 311: else:",
                        "Added Line 333: if sign == '+':",
                        "Added Line 308: if c.is_number and c < 0:",
                        "Added Line 322: terms = [self.parenthesize(arg, precedence(expr))",
                        "Deleted Line 315: return ' + '.join([self.parenthesize(arg, precedence(expr))"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 65,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13757": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sympy/polys/polytools.py": [
                        "Added Line 109: _op_priority = 10.001"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13798": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/printing/latex.py": [
                        "def __init__(self, settings=None):"
                    ]
                },
                "missing_lines": {
                    "sympy/printing/latex.py": [
                        "Deleted Line 158: ",
                        "Added Line 174: self._settings['mul_symbol']",
                        "Added Line 170: self._settings['mul_symbol_latex_numbers'] = \\",
                        "Added Line 172: else:",
                        "Added Line 164: try:",
                        "Added Line 158: try:",
                        "Added Line 173: self._settings['mul_symbol_latex_numbers'] = \\",
                        "Deleted Line 161: ",
                        "Added Line 171: mul_symbol_table['dot']"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 23,
                        "covered": 14,
                        "percentage": 60.86956521739131
                    }
                }
            }
        },
        "sympy__sympy-15349": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/algebras/quaternion.py": [
                        "def to_rotation_matrix(self, v=None):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-16597": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/assumptions/ask.py",
                    "sympy/assumptions/ask_generated.py",
                    "sympy/core/power.py",
                    "sympy/printing/tree.py",
                    "sympy/tensor/indexed.py"
                ],
                "missing_functions": {},
                "missing_lines": {
                    "sympy/core/assumptions.py": [
                        "Added Line 168: 'algebraic      ->  complex & finite',",
                        "Deleted Line 166: 'rational       ->  real',",
                        "Added Line 179: 'transcendental ==  complex & !algebraic & finite',",
                        "Deleted Line 194: 'irrational     ==  real & !rational',",
                        "Deleted Line 179: 'transcendental ==  complex & !algebraic',",
                        "Deleted Line 168: 'algebraic      ->  complex',",
                        "Added Line 166: 'rational       ->  real & finite',",
                        "Added Line 194: 'irrational     ==  real & !rational & finite',"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 70,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-16766": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/printing/pycode.py": [
                        "def _print_Not(self, expr):"
                    ]
                },
                "missing_lines": {
                    "sympy/printing/pycode.py": [
                        "Added Line 364: "
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 4,
                        "percentage": 80.0
                    }
                }
            }
        },
        "sympy__sympy-15976": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/printing/mathml.py": [
                        "def _print_Sum(self, e):",
                        "def translate(s):"
                    ]
                },
                "missing_lines": {
                    "sympy/printing/mathml.py": [
                        "Deleted Line 787: msub.appendChild(mname)",
                        "Deleted Line 789: x.appendChild(msub)",
                        "Deleted Line 750: ",
                        "Added Line 779: x = mname",
                        "Added Line 781: x = self.dom.createElement('msub')",
                        "Added Line 783: x.appendChild(join(subs))",
                        "Deleted Line 801: x.appendChild(msubsup)",
                        "Deleted Line 747: ",
                        "Deleted Line 800: msubsup.appendChild(join(supers))",
                        "Deleted Line 746: x = self.dom.createElement('mi')",
                        "Added Line 788: x.appendChild(join(supers))",
                        "Deleted Line 795: x.appendChild(msup)",
                        "Deleted Line 794: msup.appendChild(join(supers))",
                        "Added Line 794: # Set bold font?",
                        "Deleted Line 749: x.setAttribute('mathvariant', 'bold')",
                        "Added Line 795: if style == 'bold':",
                        "Added Line 793: x.appendChild(join(supers))",
                        "Deleted Line 798: msubsup.appendChild(mname)",
                        "Added Line 790: x = self.dom.createElement('msubsup')",
                        "Deleted Line 793: msup.appendChild(mname)",
                        "Added Line 791: x.appendChild(mname)",
                        "Deleted Line 788: msub.appendChild(join(subs))",
                        "Deleted Line 799: msubsup.appendChild(join(subs))",
                        "Added Line 796: x.setAttribute('mathvariant', 'bold')",
                        "Deleted Line 784: x.appendChild(self.dom.createTextNode(name))",
                        "Added Line 782: x.appendChild(mname)",
                        "Added Line 787: x.appendChild(mname)",
                        "Deleted Line 748: if style == 'bold':"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 33,
                        "covered": 5,
                        "percentage": 15.151515151515152
                    }
                }
            }
        },
        "sympy__sympy-16450": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/simplify/simplify.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-15599": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/core/mod.py": [
                        "def doit(p, q):"
                    ]
                },
                "missing_lines": {
                    "sympy/core/mod.py": [
                        "Added Line 3: from sympy.core.numbers import nan, Integer",
                        "Added Line 49: return p%q",
                        "Added Line 144: _ = []",
                        "Added Line 143: if q.is_Integer and q is not S.One:",
                        "Added Line 68: if isinstance(d, integer_types):",
                        "Added Line 147: _.append(i%q)",
                        "Deleted Line 3: from sympy.core.numbers import nan",
                        "Added Line 150: non_mod_l = _",
                        "Added Line 145: for i in non_mod_l:",
                        "Added Line 4: from sympy.core.compatibility import integer_types",
                        "Deleted Line 67: if type(d) is int:",
                        "Added Line 146: if i.is_Integer and (i % q is not S.Zero):",
                        "Added Line 149: _.append(i)",
                        "Added Line 151: ",
                        "Added Line 153: ",
                        "Added Line 152: p = Mul(*(non_mod_l + mod_l))",
                        "Added Line 148: else:",
                        "Deleted Line 48: return (p % q)"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-15809": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/functions/elementary/miscellaneous.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-16792": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/utilities/codegen.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 16,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-16886": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/crypto/crypto.py": [
                        "def decipher_kid_rsa(msg, key):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-15875": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/core/add.py": [
                        "def _eval_is_zero(self):"
                    ]
                },
                "missing_lines": {
                    "sympy/core/add.py": [
                        "Deleted Line 557: if len(nz) == len(self.args):",
                        "Added Line 557: if len(nz) == 0 or len(nz) == len(self.args):"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18199": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/ntheory/residue_ntheory.py": [
                        "def _nthroot_mod1(s, q, p, all_roots):"
                    ]
                },
                "missing_lines": {
                    "sympy/ntheory/residue_ntheory.py": [
                        "Added Line 754: tot_roots = set()",
                        "Added Line 776: while k not in new_roots:",
                        "Added Line 820: return [0]",
                        "Added Line 753: for p, e in f.items():",
                        "Added Line 755: if e == 1:",
                        "Added Line 779: roots_in_base = new_roots",
                        "Added Line 817: if not isprime(p):",
                        "Deleted Line 778: ",
                        "Added Line 775: continue",
                        "Added Line 781: dd[pow(p, e)] = tot_roots",
                        "Added Line 761: if diff != 0:",
                        "Added Line 783: m = []",
                        "Added Line 759: rootn = pow(root, n)",
                        "Deleted Line 776: if not isprime(p):",
                        "Added Line 784: for x, y in dd.items():",
                        "Added Line 750: from sympy.ntheory.modular import crt",
                        "Added Line 818: return _nthroot_mod_composite(a, n, p)",
                        "Added Line 756: tot_roots.update(nthroot_mod(a, n, p, True) or [])",
                        "Added Line 751: f = factorint(m)",
                        "Added Line 752: dd = {}",
                        "Added Line 758: for root in nthroot_mod(a, n, p, True) or []:",
                        "Added Line 780: tot_roots = tot_roots | roots_in_base",
                        "Added Line 763: for j in range(1, e):",
                        "Added Line 765: root = (root - (rootn - a) * mod_inverse(diff, p)) % ppow",
                        "Added Line 764: ppow *= p",
                        "Added Line 766: tot_roots.add(root)",
                        "Added Line 768: new_base = p",
                        "Added Line 785: m.append(x)",
                        "Added Line 748: Find the solutions to ``x**n = a mod m`` when m is not prime.",
                        "Added Line 746: def _nthroot_mod_composite(a, n, m):",
                        "Added Line 769: roots_in_base = {root}",
                        "Added Line 819: if a % p == 0:",
                        "Added Line 777: new_roots.add(k)",
                        "Added Line 762: ppow = p",
                        "Added Line 749: \"\"\"",
                        "Deleted Line 777: raise NotImplementedError(\"Not implemented for composite p\")",
                        "Added Line 5: from sympy.utilities.iterables import cartes",
                        "Added Line 778: k = (k + (new_base // p)) % new_base",
                        "Added Line 782: a = []",
                        "Added Line 767: else:",
                        "Added Line 770: while new_base < pow(p, e):",
                        "Added Line 786: a.append(list(y))",
                        "Added Line 747: \"\"\"",
                        "Added Line 757: else:",
                        "Added Line 787: return sorted(set(crt(m, list(i))[0] for i in cartes(*a)))",
                        "Added Line 760: diff = (rootn // (root or 1) * n) % p"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 50,
                        "covered": 4,
                        "percentage": 8.0
                    }
                }
            }
        },
        "sympy__sympy-17318": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/simplify/sqrtdenest.py"
                ],
                "missing_functions": {
                    "sympy/simplify/radsimp.py": [
                        "def denom_expand(expr, **hints):",
                        "def handle(expr):"
                    ]
                },
                "missing_lines": {
                    "sympy/simplify/radsimp.py": [
                        "Deleted Line 1064: split an expression with terms whose squares are rationals",
                        "Deleted Line 923: num and den are sum of terms whose squares are rationals",
                        "Added Line 1066: and a sum of terms with surds squared prime with g.",
                        "Added Line 923: num and den are sum of terms whose squares are positive rationals.",
                        "Deleted Line 1066: and a sum of terms with surds squared prime with g",
                        "Added Line 1064: Split an expression with terms whose squares are positive rationals"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14710": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-17630": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/matrices/expressions/matexpr.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-17139": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/simplify/fu.py": [
                        "def _f(rv):"
                    ]
                },
                "missing_lines": {
                    "sympy/simplify/fu.py": [
                        "Added Line 503: if not rv.exp.is_real:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-19637": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sympy/core/sympify.py": [
                        "Added Line 517: else:",
                        "Added Line 518: hit = False",
                        "Added Line 516: hit = kern in s",
                        "Deleted Line 516: hit = kern in s"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18189": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-19495": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/sets/conditionset.py": [
                        "def _eval_subs(self, old, new):"
                    ]
                },
                "missing_lines": {
                    "sympy/sets/conditionset.py": [
                        "Added Line 241: else:",
                        "Deleted Line 105: and appears as a free symbol in the base set and the dummy symbol",
                        "Added Line 113: ",
                        "Added Line 248: return self.func(self.sym, cond, base)",
                        "Added Line 245: # on 'sym'. In order for .subs() to be consistent with",
                        "Added Line 247: # 'base'. In other words: assumptions are ignored.",
                        "Deleted Line 84: =====",
                        "Added Line 243: base = self.base_set.subs(old, new)",
                        "Added Line 102: appears as a free symbol in the base set and the dummy symbol",
                        "Deleted Line 85: ",
                        "Added Line 242: cond = self.condition.subs(old, new)",
                        "Added Line 244: # The condition may have become true due to assumptions",
                        "Added Line 246: # __new__ we *don't* check if 'sym' actually belongs to",
                        "Deleted Line 83: Notes"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 19,
                        "covered": 5,
                        "percentage": 26.31578947368421
                    }
                }
            }
        },
        "sympy__sympy-19346": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/printing/repr.py": [
                        "def _print_EmptySequence(self, expr):"
                    ]
                },
                "missing_lines": {
                    "sympy/printing/repr.py": [
                        "Added Line 147: def _print_dict(self, expr):",
                        "Added Line 156: ",
                        "Added Line 150: return \"{%s}\" % sep.join(dict_kvs)",
                        "Added Line 154: return \"set()\"",
                        "Added Line 149: dict_kvs = [\"%s: %s\" % (self.doprint(key), self.doprint(value)) for key, value in expr.items()]",
                        "Added Line 151: ",
                        "Added Line 153: if not expr:",
                        "Added Line 152: def _print_set(self, expr):",
                        "Added Line 155: return \"{%s}\" % self.reprify(expr, \", \")",
                        "Added Line 148: sep = \", \""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18698": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/polys/polytools.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-19783": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/physics/quantum/dagger.py"
                ],
                "missing_functions": {
                    "sympy/physics/quantum/operator.py": [
                        "def _print_contents_latex(self, printer, *args):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 2,
                        "percentage": 15.384615384615385
                    }
                }
            }
        },
        "sympy__sympy-17655": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/geometry/point.py": [
                        "def __mul__(self, factor):"
                    ]
                },
                "missing_lines": {
                    "sympy/geometry/point.py": [
                        "Added Line 284: ",
                        "Added Line 281: def __rmul__(self, factor):",
                        "Added Line 283: return self.__mul__(factor)",
                        "Added Line 282: \"\"\"Multiply a factor by point's coordinates.\"\"\""
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18211": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/core/relational.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18763": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/printing/latex.py": [
                        "def _print_Subs(self, subs):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-20154": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sympy/utilities/iterables.py": [
                        "Deleted Line 1747: ",
                        "Added Line 1792: yield ms.copy()",
                        "Deleted Line 1755: ",
                        "Deleted Line 1749: make a copy of them:",
                        "Deleted Line 1746: [{1: 6}, {1: 6}, {1: 6}, {1: 6}]",
                        "Deleted Line 1741: Note that the _same_ dictionary object is returned each time.",
                        "Deleted Line 1752: [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]",
                        "Deleted Line 1745: >>> [p for p in partitions(6, k=2)]",
                        "Added Line 1830: yield sum(ms.values()), ms.copy()",
                        "Deleted Line 1754: [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]",
                        "Deleted Line 1744: ",
                        "Deleted Line 1753: >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP",
                        "Added Line 1790: yield sum(ms.values()), ms.copy()",
                        "Deleted Line 1743: taking constant time, independent of n.",
                        "Deleted Line 1750: ",
                        "Deleted Line 1748: If you want to build a list of the returned dictionaries then",
                        "Deleted Line 1751: >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP",
                        "Deleted Line 1742: This is for speed:  generating each partition goes quickly,",
                        "Added Line 1832: yield ms.copy()"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 23,
                        "covered": 4,
                        "percentage": 17.391304347826086
                    }
                }
            }
        },
        "sympy__sympy-19040": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/polys/factortools.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20590": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/core/_print_helpers.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21379": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/core/mod.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20438": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/core/relational.py",
                    "sympy/sets/handlers/comparison.py",
                    "sympy/sets/handlers/issubset.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-19954": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/combinatorics/perm_groups.py": [
                        "def _number_blocks(blocks):"
                    ]
                },
                "missing_lines": {
                    "sympy/combinatorics/perm_groups.py": [
                        "Deleted Line 2197: to_remove = []",
                        "Added Line 2209: rep_blocks = [r for i, r in enumerate(rep_blocks) if not blocks_remove_mask[i]]",
                        "Added Line 2207: blocks = [b for i, b in enumerate(blocks) if not blocks_remove_mask[i]]",
                        "Added Line 2208: num_blocks = [n for i, n in enumerate(num_blocks) if not blocks_remove_mask[i]]",
                        "Deleted Line 2202: to_remove.append(rep_blocks[i])",
                        "Added Line 2197: blocks_remove_mask = [False] * len(blocks)",
                        "Deleted Line 2208: rep_blocks = [r for r in rep_blocks if r not in to_remove]"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "sympy__sympy-21596": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/sets/handlers/intersection.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 37,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20916": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/printing/conventions.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21847": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 4,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-20428": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/polys/domains/expressiondomain.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21612": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/printing/str.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20801": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/core/numbers.py": [
                        "def __eq__(self, other):"
                    ]
                },
                "missing_lines": {
                    "sympy/core/numbers.py": [
                        "Added Line 1409: if not self:",
                        "Added Line 1410: return not other"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-22080": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/printing/codeprinter.py",
                    "sympy/printing/precedence.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-22914": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sympy/printing/pycode.py": [
                        "Added Line 21: 'Min': 'min',",
                        "Added Line 22: 'Max': 'max',"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-22456": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/codegen/ast.py": [
                        "def kwargs(self, exclude=(), apply=None):",
                        "def _construct_iterable(cls, itr):",
                        "def _construct_text(cls, text):"
                    ]
                },
                "missing_lines": {
                    "sympy/codegen/ast.py": [
                        "Added Line 912: #to be removed when Atom is given a suitable func",
                        "Added Line 911: ",
                        "Added Line 913: @property",
                        "Added Line 914: def func(self):",
                        "Added Line 871: class String(Atom, Token):",
                        "Added Line 910: return {}",
                        "Deleted Line 872: class String(Token):",
                        "Deleted Line 136: from sympy.core.expr import Expr",
                        "Added Line 909: def kwargs(self, exclude = (), apply = None):",
                        "Added Line 915: return lambda: self",
                        "Deleted Line 338: ",
                        "Added Line 136: from sympy.core.expr import Expr, Atom"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-23262": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/utilities/lambdify.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-22714": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/geometry/point.py": [
                        "def __new__(cls, *args, **kwargs):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-23824": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {},
                "missing_lines": {
                    "sympy/physics/hep/gamma_matrices.py": [
                        "Deleted Line 698: [ri.insert(0, free_pos[i]) for ri in resulting_indices]"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "sympy__sympy-24213": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/physics/units/unitsystem.py": [
                        "def _collect_factor_and_dimension(self, expr):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-24066": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/physics/units/unitsystem.py": [
                        "def _collect_factor_and_dimension(self, expr):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 7,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-23413": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/polys/matrices/normalforms.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-23534": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/core/symbol.py": [
                        "def literal(s):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-23950": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/sets/contains.py": [
                        "def binary_symbols(self):"
                    ]
                },
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-21930": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/physics/secondquant.py": [
                        "def __repr__(self):",
                        "def _sortkey(cls, index):"
                    ]
                },
                "missing_lines": {
                    "sympy/physics/secondquant.py": [
                        "Deleted Line 221: return \"%s^{%s}_{%s}\" % (",
                        "Deleted Line 942: return \"a^\\\\dagger_{%s}\" % self.state.name",
                        "Added Line 942: return \"{a^\\\\dagger_{%s}}\" % self.state.name",
                        "Added Line 221: return \"{%s^{%s}_{%s}}\" % ("
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 2,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "sympy__sympy-24539": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/polys/rings.py": [
                        "def set_ring(self, new_ring):"
                    ]
                },
                "missing_lines": {
                    "sympy/polys/rings.py": [
                        "Added Line 621: elif len(symbols) != self.ring.ngens:",
                        "Deleted Line 621: else:",
                        "Deleted Line 620: raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))",
                        "Deleted Line 619: if symbols and len(symbols) != self.ring.ngens:",
                        "Added Line 624: (self.ring.ngens, len(symbols))",
                        "Added Line 625: )",
                        "Added Line 619: if not symbols:"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "sympy__sympy-24661": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [
                    "sympy/parsing/sympy_parser.py"
                ],
                "missing_functions": {},
                "missing_lines": {},
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 23,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-24562": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/core/numbers.py": [
                        "def __new__(cls, p, q=None, gcd=None):"
                    ]
                },
                "missing_lines": {
                    "sympy/core/numbers.py": [
                        "Added Line 1641: Q *= int(q)",
                        "Added Line 1639: Q *= q.p",
                        "Deleted Line 1640: q = int(q)",
                        "Added Line 1631: Q *= p.q",
                        "Added Line 1642: q = Q",
                        "Deleted Line 1630: q *= p.q",
                        "Deleted Line 1638: q = q.p",
                        "Added Line 1627: Q = 1"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-24443": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing_files": [],
                "missing_functions": {
                    "sympy/combinatorics/homomorphisms.py": [
                        "def homomorphism(domain, codomain, gens, images=(), check=True):"
                    ]
                },
                "missing_lines": {
                    "sympy/combinatorics/homomorphisms.py": [
                        "Added Line 312: Check that a given mapping of generators to images defines a homomorphism.",
                        "Deleted Line 325: j = 0",
                        "Deleted Line 345: j += 1",
                        "Deleted Line 321: else:",
                        "Added Line 334: w *= images[g]**power",
                        "Added Line 313: ",
                        "Deleted Line 327: # r_arr. r_arr[j] is the tuple (sym, p)",
                        "Deleted Line 329: # and p is the power to which it is",
                        "Added Line 314: Parameters",
                        "Deleted Line 335: power = r_arr[j][1]",
                        "Added Line 320: The values must be elements of the codomain.",
                        "Added Line 317: codomain : PermutationGroup, FpGroup, FreeGroup",
                        "Added Line 324: rels = pres.relators",
                        "Deleted Line 340: if s in images:",
                        "Deleted Line 312: rels = domain.relators",
                        "Deleted Line 344: i += abs(power)",
                        "Added Line 321: ",
                        "Added Line 326: symbols = [g.ext_rep[0] for g in gens]",
                        "Deleted Line 346: return w",
                        "Deleted Line 314: gens = domain.presentation().generators",
                        "Deleted Line 320: return identity",
                        "Deleted Line 341: w = w*images[s]**power",
                        "Added Line 325: gens = pres.generators",
                        "Added Line 323: pres = domain if hasattr(domain, 'relators') else domain.presentation()",
                        "Deleted Line 319: if r.is_identity:",
                        "Added Line 318: images : dict",
                        "Deleted Line 324: i = 0",
                        "Added Line 315: ==========",
                        "Deleted Line 339: s = r[i]",
                        "Deleted Line 328: # where sym is the generator symbol",
                        "Added Line 327: symbols_to_domain_generators = dict(zip(symbols, domain.generators))",
                        "Deleted Line 322: w = identity",
                        "Added Line 311: \"\"\"",
                        "Added Line 319: The set of keys must be equal to domain.generators.",
                        "Added Line 333: g = symbols_to_domain_generators[symbol]",
                        "Deleted Line 323: r_arr = r.array_form",
                        "Added Line 322: \"\"\"",
                        "Deleted Line 313: else:",
                        "Added Line 316: domain : PermutationGroup, FpGroup, FreeGroup",
                        "Deleted Line 311: if hasattr(domain, 'relators'):",
                        "Deleted Line 334: while i < len(r):",
                        "Deleted Line 338: else:",
                        "Deleted Line 315: rels = domain.presentation().relators",
                        "Deleted Line 330: # raised while r[i] is a generator",
                        "Deleted Line 326: # i is the index for r and j is for"
                    ]
                },
                "coverage_summary": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 55,
                        "covered": 10,
                        "percentage": 18.181818181818183
                    }
                }
            }
        }
    },
    "average_coverage": {
        "file_coverage": 70.48285714285713,
        "function_coverage": 15.281587301587301,
        "line_coverage": 24.67835316921415
    }
}