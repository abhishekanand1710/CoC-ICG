[
    {
        "instance_id": "astropy__astropy-12907",
        "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..84f144ecc4 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -216,35 +216,43 @@ def _coord_matrix(model, pos, noutp):\n     return mat\n \n \n-def _cstack(left, right):\n-    \"\"\"\n-    Function corresponding to '&' operation.\n-\n-    Parameters\n-    ----------\n-    left, right : `astropy.modeling.Model` or ndarray\n-        If input is of an array, it is the output of `coord_matrix`.\n-\n-    Returns\n-    -------\n-    result : ndarray\n-        Result from this operation.\n-\n-    \"\"\"\n-    noutp = _compute_n_outputs(left, right)\n-\n-    if isinstance(left, Model):\n-        cleft = _coord_matrix(left, 'left', noutp)\n-    else:\n-        cleft = np.zeros((noutp, left.shape[1]))\n-        cleft[: left.shape[0], : left.shape[1]] = left\n-    if isinstance(right, Model):\n-        cright = _coord_matrix(right, 'right', noutp)\n-    else:\n-        cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+219\tdef _cstack(left, right):\n+220\t    \"\"\"\n+221\t    Function corresponding to '&' operation.\n+222\t\n+223\t    Parameters\n+224\t    ----------\n+225\t    left, right : `astropy.modeling.Model` or ndarray\n+226\t        If input is of an array, it is the output of `coord_matrix`.\n+227\t\n+228\t    Returns\n+229\t    -------\n+230\t    result : ndarray\n+231\t        Result from this operation.\n+232\t\n+233\t    \"\"\"\n+234\t    noutp = _compute_n_outputs(left, right)\n+235\t\n+236\t    if isinstance(left, Model):\n+237\t        cleft = _coord_matrix(left, 'left', noutp)\n+238\t    else:\n+239\t        cleft = np.zeros((noutp, left.shape[1]))\n+240\t        cleft[: left.shape[0], : left.shape[1]] = left\n+241\t    if isinstance(right, Model):\n+242\t        cright = _coord_matrix(right, 'right', noutp)\n+243\t    else:\n+244\t        cright = np.zeros((noutp, right.shape[1]))\n+245\t        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+246\t\n+247\t    # Adjust for separability when both models are compound\n+248\t    if isinstance(left, CompoundModel) and isinstance(right, CompoundModel):\n+249\t        return np.hstack([cleft, cright])\n+250\t    elif isinstance(left, CompoundModel):\n+251\t        return cleft  # If left is compound, treat as single output\n+252\t    elif isinstance(right, CompoundModel):\n+253\t        return cright  # If right is compound, treat as single output\n+254\t    return np.hstack([cleft, cright])\n \n-    return np.hstack([cleft, cright])\n \n \n def _cdot(left, right):\n",
        "model_name_or_path": "gpt-4o-mini"
    },
    {
        "instance_id": "astropy__astropy-14182",
        "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..7a5e553f00 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,14 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n \n-    def write(self, lines):\n+\n+        # Add custom header row handling if header_rows is provided\n+        if self.header_rows is not None:\n+            for header in self.header_rows:\n+                lines.insert(0, header)\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+\n",
        "model_name_or_path": "gpt-4o-mini"
    },
    {
        "instance_id": "astropy__astropy-14365",
        "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..227db22e61 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+_command_re = r\"[rR][eE][aA][dD] [sS][eE][rR][rR](\\s+[0-9]+)+\"\n+\n \n     sep = delimiter\n     if delimiter is None:\n",
        "model_name_or_path": "gpt-4o-mini"
    },
    {
        "instance_id": "astropy__astropy-14995",
        "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb2..d927362af9 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -728,7 +728,17 @@ class NDArithmeticMixin:\n             operand2 = cls(operand2)\n \n             # Now call the _arithmetics method to do the arithmetic.\n-            result, init_kwds = operand._arithmetic(operation, operand2, **kwargs)\n+            mask1 = operand.mask\n+            mask2 = operand2.mask\n+            if mask1 is None and mask2 is not None:\n+                return mask2\n+            elif mask2 is None and mask1 is not None:\n+                return mask1\n+            elif mask1 is None and mask2 is None:\n+                return None\n+            else:\n+                return np.bitwise_or(mask1, mask2)\n+\n         elif issubclass(operand2.__class__, NDArithmeticMixin):\n             # calling as class method:\n             result, init_kwds = cls._arithmetic(\n",
        "model_name_or_path": "gpt-4o-mini"
    },
    {
        "instance_id": "matplotlib__matplotlib-18869",
        "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..afce3ed543 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -106,48 +106,19 @@ from packaging.version import parse as parse_version\n \n # cbook must import matplotlib only within function\n # definitions, so it is safe to import from it here.\n-from . import _api, _version, cbook, docstring, rcsetup\n-from matplotlib.cbook import MatplotlibDeprecationWarning, sanitize_sequence\n-from matplotlib.cbook import mplDeprecation  # deprecated\n-from matplotlib.rcsetup import validate_backend, cycler\n-\n-\n-_log = logging.getLogger(__name__)\n-\n-__bibtex__ = r\"\"\"@Article{Hunter:2007,\n-  Author    = {Hunter, J. D.},\n-  Title     = {Matplotlib: A 2D graphics environment},\n-  Journal   = {Computing in Science \\& Engineering},\n-  Volume    = {9},\n-  Number    = {3},\n-  Pages     = {90--95},\n-  abstract  = {Matplotlib is a 2D graphics package used for Python\n-  for application development, interactive scripting, and\n-  publication-quality image generation across user\n-  interfaces and operating systems.},\n-  publisher = {IEEE COMPUTER SOC},\n-  year      = 2007\n-}\"\"\"\n-\n-\n-def __getattr__(name):\n-    if name == \"__version__\":\n-        import setuptools_scm\n-        global __version__  # cache it.\n-        # Only shell out to a git subprocess if really needed, and not on a\n-        # shallow clone, such as those used by CI, as the latter would trigger\n-        # a warning from setuptools_scm.\n-        root = Path(__file__).resolve().parents[2]\n-        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n-            __version__ = setuptools_scm.get_version(\n-                root=root,\n-                version_scheme=\"post-release\",\n-                local_scheme=\"node-and-date\",\n-                fallback_version=_version.version,\n-            )\n-        else:  # Get the version from the _version.py setuptools_scm file.\n-            __version__ = _version.version\n-        return __version__\n+\tfrom . import _api, _version, cbook, docstring, rcsetup\n+\tfrom packaging.version import Version\n+\n+\tdef __getattr__(name):\n+\t    if name == \"__version__\":\n+\t        __version__ = setuptools_scm.get_version(\n+\t            fallback_version=_version.version,\n+\t        )\n+\t        return __version__\n+\t    elif name == \"version_info\":\n+\t        version_tuple = tuple(map(int, _version.version.split(\".\")))\n+\t        return version_tuple\n+\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
        "model_name_or_path": "gpt-4o-mini"
    }
]