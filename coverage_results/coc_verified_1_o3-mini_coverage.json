{
    "per_instance_coverage": {
        "astropy__astropy-12907": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "astropy__astropy-13033": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/timeseries/core.py": [
                            "def _check_required_columns(self):"
                        ]
                    },
                    "lines": {
                        "astropy/timeseries/core.py": [
                            [
                                "+",
                                ".format(self.__class__.__name__, as_scalar_or_list_str(required_columns),"
                            ],
                            [
                                "+",
                                "\"as the first column{} but found {}\""
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "return str(obj)"
                            ],
                            [
                                "+",
                                "raise ValueError(\"{} object is invalid - expected {} \""
                            ],
                            [
                                "+",
                                "def as_scalar_or_list_str(obj):"
                            ],
                            [
                                "+",
                                "plural, as_scalar_or_list_str(self.colnames[:len(required_columns)])))"
                            ],
                            [
                                "+",
                                "return f\"'{obj[0]}'\""
                            ],
                            [
                                "+",
                                "elif len(obj) == 1:"
                            ],
                            [
                                "+",
                                "return f\"'{obj}'\""
                            ],
                            [
                                "+",
                                "if not hasattr(obj, \"__len__\"):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 3,
                        "percentage": 21.428571428571427
                    }
                }
            }
        },
        "astropy__astropy-13236": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "astropy/table/table.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-13398": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "astropy/coordinates/builtin_frames/__init__.py",
                        "astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py",
                        "astropy/coordinates/builtin_frames/itrs.py",
                        "astropy/coordinates/builtin_frames/itrs_observed_transforms.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 171,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-13453": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/io/ascii/html.py": [
                            "def write(self, table):"
                        ]
                    },
                    "lines": {
                        "astropy/io/ascii/html.py": [
                            [
                                "+",
                                "self.data.cols = cols"
                            ],
                            [
                                "+",
                                "self.data._set_col_formats()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-13579": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/wcs/wcsapi/wrappers/sliced_wcs.py": [
                            "def world_to_pixel_values(self, *world_arrays):",
                            "def pixel_to_world_values(self, *pixel_arrays):"
                        ]
                    },
                    "lines": {
                        "astropy/wcs/wcsapi/wrappers/sliced_wcs.py": [
                            [
                                "+",
                                "sliced_out_world_coords = self._pixel_to_world_values_all(*[0]*len(self._pixel_keep))"
                            ],
                            [
                                "+",
                                "world_arrays_new.append(sliced_out_world_coords[iworld])"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "astropy__astropy-13977": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/units/quantity.py": [
                            "def __array_ufunc__(self, function, method, *inputs, **kwargs):"
                        ]
                    },
                    "lines": {
                        "astropy/units/quantity.py": [
                            [
                                "+",
                                "raise e"
                            ],
                            [
                                "-",
                                "return result"
                            ],
                            [
                                "+",
                                "# for np.arctan2, though those are not necessarily useful!)"
                            ],
                            [
                                "+",
                                "if function.nout == 1:"
                            ],
                            [
                                "-",
                                "if unit is None or result is None or result is NotImplemented:"
                            ],
                            [
                                "-",
                                "if out is not None:"
                            ],
                            [
                                "+",
                                "kwargs[\"initial\"], check_precision=False, unit=unit"
                            ],
                            [
                                "-",
                                "# Avoid loop back by turning any Quantity output into array views."
                            ],
                            [
                                "-",
                                "# well, which is typically the same as the input unit (but can"
                            ],
                            [
                                "+",
                                "result = super().__array_ufunc__(function, method, *arrays, **kwargs)"
                            ],
                            [
                                "+",
                                "# __array_ufunc__; hopefully, they can then deal with us."
                            ],
                            [
                                "+",
                                "arrays = []"
                            ],
                            [
                                "+",
                                "ignored_ufunc = ("
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "# in principle be different: unitless for np.equal, radian"
                            ],
                            [
                                "+",
                                "if method == \"reduce\" and \"initial\" in kwargs and unit is not None:"
                            ],
                            [
                                "-",
                                "# for np.arctan2, though those are not necessarily useful!)"
                            ],
                            [
                                "+",
                                "kwargs[\"initial\"] = self._to_own_unit("
                            ],
                            [
                                "-",
                                "# If pre-allocated output is used, check it is suitable."
                            ],
                            [
                                "-",
                                "kwargs[\"initial\"], check_precision=False, unit=unit"
                            ],
                            [
                                "+",
                                "out_normalized = kwargs.get(\"out\", tuple())"
                            ],
                            [
                                "-",
                                "result = super().__array_ufunc__(function, method, *arrays, **kwargs)"
                            ],
                            [
                                "+",
                                "except (TypeError, ValueError) as e:"
                            ],
                            [
                                "-",
                                "# __array_ufunc__; hopefully, they can then deal with us."
                            ],
                            [
                                "-",
                                "# If unit is None, a plain array is expected (e.g., comparisons), which"
                            ],
                            [
                                "+",
                                "out_array = check_output(out, unit, inputs, function=function)"
                            ],
                            [
                                "+",
                                "# If pre-allocated output is used, check it is suitable."
                            ],
                            [
                                "+",
                                "# Special-case for initial argument for reductions like"
                            ],
                            [
                                "+",
                                "getattr(type(io), \"__array_ufunc__\", None) in ignored_ufunc"
                            ],
                            [
                                "-",
                                "# in principle be different: unitless for np.equal, radian"
                            ],
                            [
                                "-",
                                "if method == \"reduce\" and \"initial\" in kwargs and unit is not None:"
                            ],
                            [
                                "+",
                                "return self._result_as_quantity(result, unit, out)"
                            ],
                            [
                                "+",
                                "# If unit is None, a plain array is expected (e.g., comparisons), which"
                            ],
                            [
                                "-",
                                "# NotImplemented, which can happen if other inputs/outputs override"
                            ],
                            [
                                "+",
                                "out = kwargs.get(\"out\", None)"
                            ],
                            [
                                "-",
                                "kwargs[\"initial\"] = self._to_own_unit("
                            ],
                            [
                                "+",
                                "# means we're done."
                            ],
                            [
                                "+",
                                "type(self).__array_ufunc__,"
                            ],
                            [
                                "+",
                                "kwargs[\"out\"] = (out_array,) if function.nout == 1 else out_array"
                            ],
                            [
                                "+",
                                "# np.add.reduce.  This should be converted to the output unit as"
                            ],
                            [
                                "+",
                                "# Ensure output argument remains a tuple."
                            ],
                            [
                                "+",
                                "for io in inputs_and_outputs"
                            ],
                            [
                                "+",
                                "# NotImplemented, which can happen if other inputs/outputs override"
                            ],
                            [
                                "-",
                                "out_array = check_output(out, unit, inputs, function=function)"
                            ],
                            [
                                "-",
                                "# Special-case for initial argument for reductions like"
                            ],
                            [
                                "+",
                                "inputs_and_outputs = inputs + out_normalized"
                            ],
                            [
                                "-",
                                "return self._result_as_quantity(result, unit, out)"
                            ],
                            [
                                "-",
                                "converters, unit = converters_and_unit(function, method, *inputs)"
                            ],
                            [
                                "+",
                                "# We're also done if the result was None (for method 'at') or"
                            ],
                            [
                                "-",
                                "out = kwargs.get(\"out\", None)"
                            ],
                            [
                                "-",
                                "# means we're done."
                            ],
                            [
                                "+",
                                "result : `~astropy.units.Quantity` or `NotImplemented`"
                            ],
                            [
                                "-",
                                "kwargs[\"out\"] = (out_array,) if function.nout == 1 else out_array"
                            ],
                            [
                                "-",
                                "# np.add.reduce.  This should be converted to the output unit as"
                            ],
                            [
                                "-",
                                "# Ensure output argument remains a tuple."
                            ],
                            [
                                "+",
                                "converters, unit = converters_and_unit(function, method, *inputs)"
                            ],
                            [
                                "+",
                                "# Call our superclass's __array_ufunc__"
                            ],
                            [
                                "-",
                                "result : `~astropy.units.Quantity`"
                            ],
                            [
                                "-",
                                "out = out[0]"
                            ],
                            [
                                "+",
                                "if not all("
                            ],
                            [
                                "+",
                                "# This also returns array view, to ensure we don't loop back."
                            ],
                            [
                                "+",
                                "# Same for inputs, but here also convert if necessary."
                            ],
                            [
                                "+",
                                "None,"
                            ],
                            [
                                "+",
                                "out = out[0]"
                            ],
                            [
                                "-",
                                "# We're also done if the result was None (for method 'at') or"
                            ],
                            [
                                "+",
                                "return result"
                            ],
                            [
                                "+",
                                "if unit is None or result is None or result is NotImplemented:"
                            ],
                            [
                                "-",
                                "# Call our superclass's __array_ufunc__"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "if out is not None:"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "# Avoid loop back by turning any Quantity output into array views."
                            ],
                            [
                                "+",
                                "# well, which is typically the same as the input unit (but can"
                            ],
                            [
                                "+",
                                "arrays.append(converter(input_) if converter else input_)"
                            ],
                            [
                                "-",
                                "# This also returns array view, to ensure we don't loop back."
                            ],
                            [
                                "-",
                                "# Same for inputs, but here also convert if necessary."
                            ],
                            [
                                "-",
                                "if function.nout == 1:"
                            ],
                            [
                                "+",
                                "np.ndarray.__array_ufunc__,"
                            ],
                            [
                                "+",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 88,
                        "covered": 9,
                        "percentage": 10.227272727272728
                    }
                }
            }
        },
        "astropy__astropy-14096": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/coordinates/sky_coordinate.py": [
                            "def __getattr__(self, attr):"
                        ]
                    },
                    "lines": {
                        "astropy/coordinates/sky_coordinate.py": [
                            [
                                "+",
                                "# Call __getattribute__; this will give correct exception."
                            ],
                            [
                                "+",
                                "return self.__getattribute__(attr)"
                            ],
                            [
                                "-",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 3,
                        "percentage": 50.0
                    }
                }
            }
        },
        "astropy__astropy-14182": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/io/ascii/rst.py": [
                            "def get_fixedwidth_params(self, line):"
                        ]
                    },
                    "lines": {
                        "astropy/io/ascii/rst.py": [
                            [
                                "-",
                                "2    4.5  Worlds"
                            ],
                            [
                                "-",
                                "Col1  Col2  Col3"
                            ],
                            [
                                "-",
                                "1    2.3  Hello"
                            ],
                            [
                                "+",
                                "lines = [lines[idx]] + lines + [lines[idx]]"
                            ],
                            [
                                "+",
                                "return super().read(table)"
                            ],
                            [
                                "+",
                                ">>> tbl.write(sys.stdout,  format=\"ascii.rst\")"
                            ],
                            [
                                "+",
                                ">>> import sys"
                            ],
                            [
                                "+",
                                "950.0      1.2"
                            ],
                            [
                                "+",
                                ">>> import astropy.units as u"
                            ],
                            [
                                "+",
                                "===== ========"
                            ],
                            [
                                "+",
                                ">>> tbl = QTable({\"wave\": [350, 950] * u.nm, \"response\": [0.7, 1.2] * u.count})"
                            ],
                            [
                                "+",
                                "nm       ct"
                            ],
                            [
                                "+",
                                "def __init__(self, header_rows=None):"
                            ],
                            [
                                "+",
                                "to specify a list of table rows to output as the header.  For example::"
                            ],
                            [
                                "-",
                                "==== ===== ======"
                            ],
                            [
                                "+",
                                "wave response"
                            ],
                            [
                                "+",
                                ">>> from astropy.table import QTable"
                            ],
                            [
                                "+",
                                "idx = len(self.header.header_rows)"
                            ],
                            [
                                "+",
                                "350.0      0.7"
                            ],
                            [
                                "-",
                                "lines = [lines[1]] + lines + [lines[1]]"
                            ],
                            [
                                "+",
                                "self.data.start_line = 2 + len(self.header.header_rows)"
                            ],
                            [
                                "+",
                                "Like other fixed-width formats, when writing a table you can provide ``header_rows``"
                            ],
                            [
                                "+",
                                "def read(self, table):"
                            ],
                            [
                                "+",
                                ">>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=['name', 'unit'])"
                            ],
                            [
                                "-",
                                "start_line = 3"
                            ],
                            [
                                "+",
                                "super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 29,
                        "covered": 3,
                        "percentage": 10.344827586206897
                    }
                }
            }
        },
        "astropy__astropy-14309": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "astropy/io/fits/connect.py": [
                            [
                                "-",
                                "):"
                            ],
                            [
                                "-",
                                "return True"
                            ],
                            [
                                "+",
                                "return filepath.lower().endswith("
                            ],
                            [
                                "-",
                                "if filepath.lower().endswith("
                            ],
                            [
                                "+",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-14365": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/io/ascii/qdp.py": [
                            "def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):"
                        ]
                    },
                    "lines": {
                        "astropy/io/ascii/qdp.py": [
                            [
                                "-",
                                "if v == \"NO\":"
                            ],
                            [
                                "+",
                                "if v.upper() == \"NO\":"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "astropy__astropy-14369": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "astropy/units/format/cds_parsetab.py"
                    ],
                    "functions": {
                        "astropy/units/format/cds.py": [
                            "def _make_parser(cls):",
                            "def p_product_of_units(p):"
                        ]
                    },
                    "lines": {
                        "astropy/units/format/cds.py": [
                            [
                                "-",
                                "| unit_expression DIVISION combined_units"
                            ],
                            [
                                "+",
                                "| combined_units DIVISION unit_expression"
                            ],
                            [
                                "+",
                                "YACC grammar in the `unity library <https://purl.org/nxg/dist/unity/>`_."
                            ],
                            [
                                "-",
                                "<https://bitbucket.org/nxg/unity/>`_."
                            ],
                            [
                                "-",
                                "YACC grammar in the `unity library"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 65,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-14508": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "astropy/io/fits/card.py": [
                            [
                                "+",
                                "# No scientific notation, truncate decimal places"
                            ],
                            [
                                "-",
                                "elif \"E\" in value_str:"
                            ],
                            [
                                "+",
                                "if (str_len := len(value_str)) > 20:"
                            ],
                            [
                                "-",
                                "\"\"\"Format a floating number to make sure it gets the decimal point.\"\"\""
                            ],
                            [
                                "-",
                                "# exponent is zero-padded out to, it seems, three digits.  Normalize"
                            ],
                            [
                                "-",
                                "significand, exponent = value_str.split(\"E\")"
                            ],
                            [
                                "-",
                                "if \".\" not in value_str and \"E\" not in value_str:"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "-",
                                "exponent = exponent[1:]"
                            ],
                            [
                                "-",
                                "if exponent[0] in (\"+\", \"-\"):"
                            ],
                            [
                                "-",
                                "if str_len > 20:"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "str_len = len(value_str)"
                            ],
                            [
                                "+",
                                "value_str = str(value).replace(\"e\", \"E\")"
                            ],
                            [
                                "-",
                                "sign = exponent[0]"
                            ],
                            [
                                "-",
                                "sign = \"\""
                            ],
                            [
                                "-",
                                "# the format to pad only to two digits."
                            ],
                            [
                                "-",
                                "value_str = f\"{significand}E{sign}{int(exponent):02d}\""
                            ],
                            [
                                "-",
                                "# On some Windows builds of Python (and possibly other platforms?) the"
                            ],
                            [
                                "-",
                                "value_str += \".0\""
                            ],
                            [
                                "+",
                                "\"\"\"Format a floating number to make sure it is at most 20 characters.\"\"\""
                            ],
                            [
                                "+",
                                "# Scientific notation, truncate significand (mantissa)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 23,
                        "covered": 1,
                        "percentage": 4.3478260869565215
                    }
                }
            }
        },
        "astropy__astropy-14539": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/io/fits/diff.py": [
                            "def _diff(self):"
                        ]
                    },
                    "lines": {
                        "astropy/io/fits/diff.py": [
                            [
                                "-",
                                "elif \"P\" in col.format:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "astropy__astropy-14598": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/io/fits/card.py": [
                            "def _split(self):"
                        ]
                    },
                    "lines": {
                        "astropy/io/fits/card.py": [
                            [
                                "+",
                                "value = value.rstrip()"
                            ],
                            [
                                "+",
                                "_strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?$\")"
                            ],
                            [
                                "-",
                                "_strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?\")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "astropy__astropy-14995": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "astropy/nddata/mixins/ndarithmetic.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-7166": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "astropy/utils/misc.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-7336": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/units/decorators.py": [
                            "def wrapper(*func_args, **func_kwargs):"
                        ]
                    },
                    "lines": {
                        "astropy/units/decorators.py": [
                            [
                                "+",
                                "if wrapped_signature.return_annotation not in (inspect.Signature.empty, None):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "astropy__astropy-7606": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/units/core.py": [
                            "def __eq__(self, other):",
                            "def _unrecognized_operator(self, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "astropy/units/core.py": [
                            [
                                "-",
                                "return False"
                            ],
                            [
                                "+",
                                "except (ValueError, UnitsError, TypeError):"
                            ],
                            [
                                "+",
                                "return NotImplemented"
                            ],
                            [
                                "+",
                                "return isinstance(other, type(self)) and self.name == other.name"
                            ],
                            [
                                "+",
                                "try:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 4,
                        "percentage": 44.44444444444444
                    }
                }
            }
        },
        "astropy__astropy-7671": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "astropy/utils/introspection.py": [
                            [
                                "+",
                                "expr = '^([1-9]\\\\d*!)?(0|[1-9]\\\\d*)(\\\\.(0|[1-9]\\\\d*))*'"
                            ],
                            [
                                "+",
                                "# from PEP440, https://www.python.org/dev/peps/pep-0440/, Appendix B"
                            ],
                            [
                                "+",
                                "# of the version number. Match the dotted numbers only. Regex taken"
                            ],
                            [
                                "+",
                                "version = m.group(0)"
                            ],
                            [
                                "+",
                                "m = re.match(expr, version)"
                            ],
                            [
                                "+",
                                "import re"
                            ],
                            [
                                "+",
                                "# LooseVersion raises a TypeError when strings like dev, rc1 are part"
                            ],
                            [
                                "+",
                                "if m:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 1,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "astropy__astropy-8707": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "astropy/io/fits/card.py",
                        "astropy/io/fits/header.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 68,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-8872": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/units/quantity.py": [
                            "def __new__(cls, value, unit=None, dtype=None, copy=True, order=None,"
                        ]
                    },
                    "lines": {
                        "astropy/units/quantity.py": [
                            [
                                "+",
                                "if value.dtype.kind in 'iu':"
                            ],
                            [
                                "-",
                                "or value.dtype.fields)"
                            ],
                            [
                                "-",
                                "value.dtype.fields):"
                            ],
                            [
                                "-",
                                "except that any input that cannot represent float (integer and bool)"
                            ],
                            [
                                "+",
                                "except that any integer and (non-Quantity) object inputs are converted"
                            ],
                            [
                                "+",
                                "to float by default."
                            ],
                            [
                                "-",
                                "is converted to float."
                            ],
                            [
                                "-",
                                "if dtype is None and (not (np.can_cast(np.float32, value.dtype)"
                            ],
                            [
                                "+",
                                "if dtype is None and value.dtype.kind in 'iuO':"
                            ],
                            [
                                "-",
                                "or value.dtype.kind == 'O'):"
                            ],
                            [
                                "-",
                                "if not (np.can_cast(np.float32, value.dtype) or"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-10097": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/core/validators.py": [
                            [
                                "+",
                                "r'(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?'  # user:pass authentication"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-10554": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/compiler.py"
                    ],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def clear_select_fields(self):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "+",
                                "self.select += col,"
                            ],
                            [
                                "+",
                                "def add_select_col(self, col):"
                            ],
                            [
                                "+",
                                "self.values_select += col.output_field.name,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 1,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "django__django-10880": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/aggregates.py": [
                            "def get_group_by_cols(self):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-10914": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/conf/global_settings.py": [
                            "def gettext_noop(s):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-10973": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/postgresql/client.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 35,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-10999": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/dateparse.py": [
                            [
                                "-",
                                "r'(?:(?P<minutes>-?\\d+):)?'"
                            ],
                            [
                                "+",
                                "r'(?:(?P<minutes>\\d+):)?'"
                            ],
                            [
                                "+",
                                "r'(?P<sign>-?)'"
                            ],
                            [
                                "+",
                                "r'(?P<seconds>\\d+)'"
                            ],
                            [
                                "-",
                                "r'(?P<seconds>-?\\d+)'"
                            ],
                            [
                                "+",
                                "r'((?:(?P<hours>\\d+):)(?=\\d+:\\d+))?'"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 100
                    },
                    "lines": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "django__django-11066": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/contenttypes/management/__init__.py": [
                            "def _rename(self, apps, schema_editor, old_model, new_model):"
                        ]
                    },
                    "lines": {
                        "django/contrib/contenttypes/management/__init__.py": [
                            [
                                "-",
                                "content_type.save(update_fields={'model'})"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-11087": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/deletion.py": [
                            "def collect(self, objs, source=None, nullable=False, collect_related=True,",
                            "def add_field_update(self, field, value, objs):",
                            "def can_fast_delete(self, objs, from_field=None):"
                        ]
                    },
                    "lines": {
                        "django/db/models/deletion.py": [
                            [
                                "+",
                                "# as interactions between both features are hard to"
                            ],
                            [
                                "+",
                                "if sub_objs:"
                            ],
                            [
                                "-",
                                "if (signals.pre_delete.has_listeners(model) or"
                            ],
                            [
                                "+",
                                "if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):"
                            ],
                            [
                                "-",
                                "signals.post_delete.has_listeners(model) or"
                            ],
                            [
                                "+",
                                "signals.pre_delete.has_listeners(model) or"
                            ],
                            [
                                "-",
                                "elif sub_objs:"
                            ],
                            [
                                "+",
                                "# receivers are connected for the related model as"
                            ],
                            [
                                "+",
                                "related_model = related.related_model"
                            ],
                            [
                                "+",
                                "def _has_signal_listeners(self, model):"
                            ],
                            [
                                "+",
                                "return ("
                            ],
                            [
                                "+",
                                "if self._has_signal_listeners(model):"
                            ],
                            [
                                "+",
                                "# they'll never be exposed to the user. Skip field"
                            ],
                            [
                                "+",
                                "for rel in get_candidate_relations_to_delete(related_model._meta)"
                            ],
                            [
                                "+",
                                "# deferring when some relationships are select_related"
                            ],
                            [
                                "+",
                                "))"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "# get right. This should only happen in the rare"
                            ],
                            [
                                "-",
                                "field.remote_field.on_delete(self, field, sub_objs, self.using)"
                            ],
                            [
                                "+",
                                "signals.post_delete.has_listeners(model)"
                            ],
                            [
                                "+",
                                "(rf.attname for rf in rel.field.foreign_related_fields)"
                            ],
                            [
                                "+",
                                "# cases where .related_objects is overridden anyway."
                            ],
                            [
                                "+",
                                "from itertools import chain"
                            ],
                            [
                                "+",
                                "field.remote_field.on_delete(self, field, sub_objs, self.using)"
                            ],
                            [
                                "+",
                                "sub_objs = sub_objs.only(*tuple(referenced_fields))"
                            ],
                            [
                                "+",
                                "referenced_fields = set(chain.from_iterable("
                            ],
                            [
                                "+",
                                "# Non-referenced fields can be deferred if no signal"
                            ],
                            [
                                "-",
                                "signals.m2m_changed.has_listeners(model)):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 30,
                        "covered": 2,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "django__django-11095": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/admin/options.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11099": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/contrib/auth/validators.py": [
                            [
                                "+",
                                "regex = r'^[\\w.@+-]+\\Z'"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-11119": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/template/engine.py": [
                            "def render_to_string(self, template_name, context=None):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-11133": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/http/response.py": [
                            "def make_bytes(self, value):"
                        ]
                    },
                    "lines": {
                        "django/http/response.py": [
                            [
                                "-",
                                "if isinstance(value, bytes):"
                            ],
                            [
                                "+",
                                "if isinstance(value, (bytes, memoryview)):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11138": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/oracle/operations.py",
                        "django/db/backends/sqlite3/base.py",
                        "django/db/backends/sqlite3/operations.py"
                    ],
                    "functions": {
                        "django/db/backends/mysql/operations.py": [
                            "def date_trunc_sql(self, lookup_type, field_name):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/mysql/operations.py": [
                            [
                                "+",
                                "if settings.USE_TZ and self.connection.timezone_name != tzname:"
                            ],
                            [
                                "+",
                                "field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 59,
                        "covered": 2,
                        "percentage": 3.389830508474576
                    }
                }
            }
        },
        "django__django-11141": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/loader.py": [
                            "def load_disk(self):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/loader.py": [
                            [
                                "+",
                                "if migration_names or self.ignore_no_migrations:"
                            ],
                            [
                                "+",
                                "self.migrated_apps.add(app_config.label)"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "self.unmigrated_apps.add(app_config.label)"
                            ],
                            [
                                "-",
                                "self.migrated_apps.add(app_config.label)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 5,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-11149": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/options.py": [
                            "def get_queryset(self, request):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/options.py": [
                            [
                                "+",
                                "# also implies the 'view' permission."
                            ],
                            [
                                "+",
                                "def _has_any_perms_for_target_model(self, request, perms):"
                            ],
                            [
                                "+",
                                "for perm in perms"
                            ],
                            [
                                "+",
                                "Return True if the user has any of the given permissions ('add',"
                            ],
                            [
                                "+",
                                "opts = field.remote_field.model._meta"
                            ],
                            [
                                "-",
                                "return ("
                            ],
                            [
                                "+",
                                "# permissions. The user needs to have the change permission for the"
                            ],
                            [
                                "+",
                                "for field in opts.fields:"
                            ],
                            [
                                "-",
                                "request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) or"
                            ],
                            [
                                "-",
                                "break"
                            ],
                            [
                                "+",
                                "# Find the target model of an auto-created many-to-many relationship."
                            ],
                            [
                                "+",
                                "opts = self.opts"
                            ],
                            [
                                "-",
                                "request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))"
                            ],
                            [
                                "+",
                                "This method is called only when the ModelAdmin's model is for an"
                            ],
                            [
                                "-",
                                "# The model was auto-created as intermediary for a many-to-many"
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "+",
                                "'change', etc.) for the model that points to the through model."
                            ],
                            [
                                "-",
                                "if field.remote_field and field.remote_field.model != self.parent_model:"
                            ],
                            [
                                "+",
                                "# Same comment as has_add_permission()."
                            ],
                            [
                                "+",
                                "break"
                            ],
                            [
                                "+",
                                "ManyToManyField's implicit through model (if self.opts.auto_created)."
                            ],
                            [
                                "-",
                                "# Many-relationship; find the target model."
                            ],
                            [
                                "-",
                                "opts = self.opts"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "# Same comment as has_add_permission(). The 'change' permission"
                            ],
                            [
                                "+",
                                "if field.remote_field and field.remote_field.model != self.parent_model:"
                            ],
                            [
                                "+",
                                "return self._has_any_perms_for_target_model(request, ['view', 'change'])"
                            ],
                            [
                                "+",
                                "return self._has_any_perms_for_target_model(request, ['change'])"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "# Auto-created intermediate models don't have their own"
                            ],
                            [
                                "+",
                                "return any("
                            ],
                            [
                                "-",
                                "opts = field.remote_field.model._meta"
                            ],
                            [
                                "+",
                                "# intermediate model."
                            ],
                            [
                                "+",
                                "request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename(perm, opts)))"
                            ],
                            [
                                "-",
                                "for field in opts.fields:"
                            ],
                            [
                                "+",
                                "# related model in order to be able to do anything with the"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 42,
                        "covered": 6,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "django__django-11163": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-11179": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/deletion.py": [
                            "def delete(self):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-11206": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/numberformat.py": [
                            [
                                "+",
                                "if abs(number) < cutoff:"
                            ],
                            [
                                "+",
                                "# decimal places, consider it equal to '0'."
                            ],
                            [
                                "+",
                                "number = Decimal('0')"
                            ],
                            [
                                "+",
                                "# If the provided number is too small to affect any of the visible"
                            ],
                            [
                                "+",
                                "cutoff = Decimal('0.' + '1'.rjust(decimal_pos, '0'))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-11211": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11239": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/postgresql/client.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11265": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def split_exclude(self, filter_expr, can_reuse, names_with_path):",
                            "def trim_start(self, names_with_path):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "+",
                                "if first_join.join_type != LOUTER and not first_join.filtered_relation:"
                            ],
                            [
                                "-",
                                "# miss those rows that have nothing on the outer side."
                            ],
                            [
                                "+",
                                "# - INNER JOINs from filtered relations because we would miss their"
                            ],
                            [
                                "+",
                                "#   filters."
                            ],
                            [
                                "+",
                                "# - LEFT JOINs because we would miss those rows that have nothing on"
                            ],
                            [
                                "+",
                                "first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]"
                            ],
                            [
                                "-",
                                "# (that is, self). We can't do this for LEFT JOINs because we would"
                            ],
                            [
                                "+",
                                "query._filtered_relations = self._filtered_relations"
                            ],
                            [
                                "+",
                                "# (that is, self). We can't do this for:"
                            ],
                            [
                                "+",
                                "#   the outer side,"
                            ],
                            [
                                "-",
                                "if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type != LOUTER:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11276": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/utils/html.py": [
                            "def trim_punctuation(lead, middle, trail):",
                            "def trim_url(x, limit=trim_url_limit):",
                            "def is_email_simple(value):"
                        ]
                    },
                    "lines": {
                        "django/utils/html.py": [
                            [
                                "-",
                                "ord(\"'\"): '&#39;',"
                            ],
                            [
                                "-",
                                "If input URL is HTML-escaped, unescape it so that it can be safely fed"
                            ],
                            [
                                "+",
                                "url = smart_urlquote(html.unescape(middle))"
                            ],
                            [
                                "+",
                                "url = smart_urlquote('http://%s' % html.unescape(middle))"
                            ],
                            [
                                "-",
                                "http://example.com?x=1&amp;y=&lt;2&gt; => http://example.com?x=1&y=<2>"
                            ],
                            [
                                "-",
                                "def unescape(text):"
                            ],
                            [
                                "-",
                                "ord('\"'): '&quot;',"
                            ],
                            [
                                "-",
                                "to smart_urlquote. For example:"
                            ],
                            [
                                "-",
                                "'&gt;', '>').replace('&quot;', '\"').replace('&#39;', \"'\")"
                            ],
                            [
                                "+",
                                "return mark_safe(html.escape(str(text)))"
                            ],
                            [
                                "-",
                                "_html_escapes = {"
                            ],
                            [
                                "-",
                                "ord('>'): '&gt;',"
                            ],
                            [
                                "-",
                                "ord('<'): '&lt;',"
                            ],
                            [
                                "-",
                                "\"\"\""
                            ],
                            [
                                "-",
                                "url = smart_urlquote('http://%s' % unescape(middle))"
                            ],
                            [
                                "-",
                                "middle_unescaped = unescape(middle)"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "middle_unescaped = html.unescape(middle)"
                            ],
                            [
                                "-",
                                "url = smart_urlquote(unescape(middle))"
                            ],
                            [
                                "-",
                                "ord('&'): '&amp;',"
                            ],
                            [
                                "+",
                                "import html"
                            ],
                            [
                                "-",
                                "return text.replace('&amp;', '&').replace('&lt;', '<').replace("
                            ],
                            [
                                "-",
                                "}"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 1,
                        "percentage": 4.166666666666666
                    }
                }
            }
        },
        "django__django-11292": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/base.py": [
                            "def create_parser(self, prog_name, subcommand, **kwargs):",
                            "class DjangoHelpFormatter(HelpFormatter):",
                            "def execute(self, *args, **options):"
                        ]
                    },
                    "lines": {
                        "django/core/management/base.py": [
                            [
                                "-",
                                "'--no-color', '--force-color',"
                            ],
                            [
                                "+",
                                "help='Skip system checks.',"
                            ],
                            [
                                "+",
                                "base_stealth_options = ('stderr', 'stdout')"
                            ],
                            [
                                "-",
                                "base_stealth_options = ('skip_checks', 'stderr', 'stdout')"
                            ],
                            [
                                "+",
                                "parser.add_argument("
                            ],
                            [
                                "+",
                                "if self.requires_system_checks and not options['skip_checks']:"
                            ],
                            [
                                "-",
                                "if self.requires_system_checks and not options.get('skip_checks'):"
                            ],
                            [
                                "+",
                                "'--no-color', '--force-color', '--skip-checks',"
                            ],
                            [
                                "+",
                                "'--skip-checks', action='store_true',"
                            ],
                            [
                                "+",
                                "if self.requires_system_checks:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 1,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "django__django-11299": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def _add_q(self, q_object, used_aliases, branch_negated=False,"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-11333": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/urls/base.py"
                    ],
                    "functions": {
                        "django/urls/resolvers.py": [
                            "def __repr__(self):"
                        ]
                    },
                    "lines": {
                        "django/urls/resolvers.py": [
                            [
                                "+",
                                "def _get_cached_resolver(urlconf=None):"
                            ],
                            [
                                "-",
                                "@functools.lru_cache(maxsize=None)"
                            ],
                            [
                                "+",
                                "@functools.lru_cache(maxsize=None)"
                            ],
                            [
                                "+",
                                "return _get_cached_resolver(urlconf)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 1,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "django__django-11400": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py",
                        "django/db/models/fields/reverse_related.py"
                    ],
                    "functions": {
                        "django/contrib/admin/filters.py": [
                            "def has_output(self):",
                            "def choices(self, changelist):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/filters.py": [
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "ordering = self.field_admin_ordering(field, request, model_admin)"
                            ],
                            [
                                "+",
                                "Return the model admin's ordering for related field, if provided."
                            ],
                            [
                                "+",
                                "return related_admin.get_ordering(request)"
                            ],
                            [
                                "+",
                                "return ()"
                            ],
                            [
                                "+",
                                "def field_admin_ordering(self, field, request, model_admin):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 7,
                        "percentage": 29.166666666666668
                    }
                }
            }
        },
        "django__django-11433": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/forms/models.py": [
                            [
                                "+",
                                "form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "if ("
                            ],
                            [
                                "+",
                                "f.has_default() and"
                            ],
                            [
                                "+",
                                "cleaned_data.get(f.name) in form[f.name].field.empty_values"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-11451": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/contrib/auth/backends.py": [
                            [
                                "+",
                                "if username is None or password is None:"
                            ],
                            [
                                "+",
                                "return"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11477": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/urls/resolvers.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11490": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/compiler.py": [
                            "def get_combinator_sql(self, combinator, all):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/compiler.py": [
                            [
                                "+",
                                "compiler.query = compiler.query.clone()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11532": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/core/mail/utils.py",
                        "django/core/validators.py",
                        "django/utils/encoding.py",
                        "django/utils/html.py"
                    ],
                    "functions": {
                        "django/core/mail/message.py": [
                            "def sanitize_address(addr, encoding):"
                        ]
                    },
                    "lines": {
                        "django/core/mail/message.py": [
                            [
                                "-",
                                "domain = domain.encode('idna').decode('ascii')"
                            ],
                            [
                                "-",
                                "domain.encode('ascii')"
                            ],
                            [
                                "+",
                                "domain = punycode(domain)"
                            ],
                            [
                                "-",
                                "from django.utils.encoding import force_str"
                            ],
                            [
                                "-",
                                "except UnicodeEncodeError:"
                            ],
                            [
                                "-",
                                "try:"
                            ],
                            [
                                "+",
                                "from django.utils.encoding import force_str, punycode"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/checks.py": [
                            "def _check_list_display_item(self, obj, item, label):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/checks.py": [
                            [
                                "+",
                                "\"callable, an attribute of '%s', or an attribute or \""
                            ],
                            [
                                "+",
                                "\"The value of '%s' refers to '%s', which is not a \""
                            ],
                            [
                                "+",
                                "\"method on '%s.%s'.\" % ("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 40,
                        "covered": 37,
                        "percentage": 92.5
                    }
                }
            }
        },
        "django__django-11555": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/compiler.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11603": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/aggregates.py": [
                            "def _get_repr_options(self):"
                        ]
                    },
                    "lines": {
                        "django/db/models/aggregates.py": [
                            [
                                "+",
                                "allow_distinct = True"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11728": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admindocs/utils.py": [
                            "def replace_unnamed_groups(pattern):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admindocs/utils.py": [
                            [
                                "-",
                                "break"
                            ],
                            [
                                "-",
                                "# named capture group pattern has been reached."
                            ],
                            [
                                "+",
                                "# named capture group pattern has been reached."
                            ],
                            [
                                "-",
                                "group_indices.append((start, start + 1 + idx))"
                            ],
                            [
                                "+",
                                "break"
                            ],
                            [
                                "+",
                                "3. ^(?P<a>\\w+)/b/(\\w+) ==> ^<a>/b/(\\w+)"
                            ],
                            [
                                "+",
                                "# If brackets are balanced, the end of the string for the current"
                            ],
                            [
                                "+",
                                "4. ^(?P<a>\\w+)/b/(?P<c>\\w+) ==> ^<a>/b/<c>"
                            ],
                            [
                                "-",
                                "if unmatched_open_brackets == 0:"
                            ],
                            [
                                "+",
                                "group_indices.append((start, start + 2 + idx))"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "4. ^(?P<a>\\w+)/b/((x|y)\\w+) ==> ^(?P<a>\\w+)/b/<var>"
                            ],
                            [
                                "+",
                                "group_pattern_and_name.append((pattern[start:end + idx + 1], group_name))"
                            ],
                            [
                                "-",
                                "# If brackets are balanced, the end of the string for the current"
                            ],
                            [
                                "+",
                                "if unmatched_open_brackets == 0:"
                            ],
                            [
                                "+",
                                "3. ^(?P<a>\\w+)/b/(\\w+) ==> ^(?P<a>\\w+)/b/<var>"
                            ],
                            [
                                "-",
                                "group_pattern_and_name.append((pattern[start:end + idx], group_name))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11734": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py",
                        "django/db/models/fields/related_lookups.py"
                    ],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def split_exclude(self, filter_expr, can_reuse, names_with_path):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "+",
                                "if isinstance(filter_rhs, OuterRef):"
                            ],
                            [
                                "+",
                                "filter_expr = (filter_lhs, OuterRef(filter_rhs))"
                            ],
                            [
                                "+",
                                "elif isinstance(filter_rhs, F):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 1,
                        "percentage": 10.0
                    }
                }
            }
        },
        "django__django-11740": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/autodetector.py": [
                            "def generate_altered_fields(self):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/autodetector.py": [
                            [
                                "+",
                                "dependencies.extend(self._get_dependencies_for_foreign_key(new_field))"
                            ],
                            [
                                "-",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 3,
                        "percentage": 60.0
                    }
                }
            }
        },
        "django__django-11749": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/__init__.py": [
                            "def get_actions(parser):"
                        ]
                    },
                    "lines": {
                        "django/core/management/__init__.py": [
                            [
                                "+",
                                "for opt in group._group_actions if group.required"
                            ],
                            [
                                "+",
                                "opt"
                            ],
                            [
                                "+",
                                "opt.dest in options and"
                            ],
                            [
                                "+",
                                "mutually_exclusive_required_options = {"
                            ],
                            [
                                "+",
                                "for opt in parser_actions if ("
                            ],
                            [
                                "+",
                                "(opt.required or opt in mutually_exclusive_required_options)"
                            ],
                            [
                                "-",
                                "for opt in parser_actions if opt.required and opt.dest in options"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "for group in parser._mutually_exclusive_groups"
                            ],
                            [
                                "+",
                                "}"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11790": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/auth/forms.py": [
                            "def __init__(self, request=None, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/contrib/auth/forms.py": [
                            [
                                "+",
                                "self.fields['username'].max_length = username_max_length"
                            ],
                            [
                                "-",
                                "self.fields['username'].max_length = self.username_field.max_length or 254"
                            ],
                            [
                                "+",
                                "self.fields['username'].widget.attrs['maxlength'] = username_max_length"
                            ],
                            [
                                "+",
                                "username_max_length = self.username_field.max_length or 254"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11815": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/db/migrations/serializer.py": [
                            [
                                "-",
                                "imports = {'import %s' % module, *v_imports}"
                            ],
                            [
                                "+",
                                "'%s.%s[%r]' % (module, enum_class.__name__, self.value.name),"
                            ],
                            [
                                "+",
                                "return ("
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "{'import %s' % module},"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-11820": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/base.py": [
                            "def _check_ordering(cls):"
                        ]
                    },
                    "lines": {
                        "django/db/models/base.py": [
                            [
                                "+",
                                "# pk is an alias that won't be found by opts.get_field."
                            ],
                            [
                                "+",
                                "_cls = None"
                            ],
                            [
                                "+",
                                "if part == 'pk':"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 4,
                        "percentage": 57.14285714285714
                    }
                }
            }
        },
        "django__django-11848": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/http.py": [
                            [
                                "+",
                                "# interpreted as representing the past."
                            ],
                            [
                                "+",
                                "year += current_century"
                            ],
                            [
                                "+",
                                "if year - (current_year % 100) > 50:"
                            ],
                            [
                                "+",
                                "year += current_century - 100"
                            ],
                            [
                                "+",
                                "# year that appears to be more than 50 years in the future are"
                            ],
                            [
                                "+",
                                "current_century = current_year - (current_year % 100)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 4,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-11880": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/fields.py": [
                            "def __deepcopy__(self, memo):"
                        ]
                    },
                    "lines": {
                        "django/forms/fields.py": [
                            [
                                "+",
                                "result.error_messages = self.error_messages.copy()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11885": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/admin/utils.py"
                    ],
                    "functions": {
                        "django/db/models/deletion.py": [
                            "def add(self, objs, source=None, nullable=False, reverse_dependency=False):",
                            "def can_fast_delete(self, objs, from_field=None):",
                            "def add_field_update(self, field, value, objs):",
                            "def __init__(self, using):",
                            "def collect(self, objs, source=None, nullable=False, collect_related=True,"
                        ]
                    },
                    "lines": {
                        "django/db/models/deletion.py": [
                            [
                                "+",
                                "self.dependencies[source._meta.concrete_model].add(model._meta.concrete_model)"
                            ],
                            [
                                "-",
                                "**{\"%s__in\" % related.field.name: objs}"
                            ],
                            [
                                "+",
                                "model_fast_deletes[related_model].append(field)"
                            ],
                            [
                                "+",
                                "# It's something like generic foreign key."
                            ],
                            [
                                "+",
                                "sub_objs = self.related_objects(related_model, [field], batch)"
                            ],
                            [
                                "+",
                                "from collections import Counter, defaultdict"
                            ],
                            [
                                "-",
                                "parents = set(model._meta.get_parent_list())"
                            ],
                            [
                                "-",
                                "self.dependencies.setdefault("
                            ],
                            [
                                "+",
                                "from django.db.models import query_utils, signals, sql"
                            ],
                            [
                                "-",
                                "sub_objs = field.bulk_related_objects(new_objs, self.using)"
                            ],
                            [
                                "+",
                                "def get_del_batches(self, objs, fields):"
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "+",
                                "# exposed to the user. Skip field deferring when some"
                            ],
                            [
                                "+",
                                "# relationships are select_related as interactions between both"
                            ],
                            [
                                "-",
                                "self.field_updates = {}  # {model: {(field, value): {instances}}}"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "field = related.field"
                            ],
                            [
                                "-",
                                "continue"
                            ],
                            [
                                "-",
                                "source._meta.concrete_model, set()).add(model._meta.concrete_model)"
                            ],
                            [
                                "+",
                                "if field.remote_field.on_delete == DO_NOTHING:"
                            ],
                            [
                                "-",
                                "self.field_updates.setdefault("
                            ],
                            [
                                "+",
                                "# features are hard to get right. This should only happen in"
                            ],
                            [
                                "+",
                                "for related_model, related_fields in model_fast_deletes.items():"
                            ],
                            [
                                "-",
                                "(field, value), set()).update(objs)"
                            ],
                            [
                                "-",
                                "return related.related_model._base_manager.using(self.using).filter("
                            ],
                            [
                                "+",
                                "if self.can_fast_delete(related_model, from_field=field):"
                            ],
                            [
                                "+",
                                "# are connected for the related model as they'll never be"
                            ],
                            [
                                "+",
                                "model_fast_deletes = defaultdict(list)"
                            ],
                            [
                                "-",
                                "self.dependencies = {}  # {model: {models}}"
                            ],
                            [
                                "+",
                                "from functools import partial, reduce"
                            ],
                            [
                                "+",
                                "batches = self.get_del_batches(new_objs, [field])"
                            ],
                            [
                                "-",
                                "field = related.field"
                            ],
                            [
                                "+",
                                "for field in model._meta.private_fields:"
                            ],
                            [
                                "-",
                                "if field.remote_field.on_delete == DO_NOTHING:"
                            ],
                            [
                                "-",
                                "instances = self.data.setdefault(model, set())"
                            ],
                            [
                                "+",
                                "Get a QuerySet of the related model to objs via related fields."
                            ],
                            [
                                "-",
                                "model, {}).setdefault("
                            ],
                            [
                                "+",
                                "if keep_parents and related.model in parents:"
                            ],
                            [
                                "+",
                                "model = objs._meta.model"
                            ],
                            [
                                "+",
                                "self.fast_deletes.append(sub_objs)"
                            ],
                            [
                                "-",
                                "from collections import Counter"
                            ],
                            [
                                "-",
                                "from django.db.models import signals, sql"
                            ],
                            [
                                "+",
                                "if hasattr(field, 'bulk_related_objects'):"
                            ],
                            [
                                "+",
                                "for related in get_candidate_relations_to_delete(model._meta):"
                            ],
                            [
                                "+",
                                "self.field_updates[model][field, value].update(objs)"
                            ],
                            [
                                "+",
                                "query_utils.Q(**{'%s__in' % related_field.name: objs})"
                            ],
                            [
                                "+",
                                "return"
                            ],
                            [
                                "+",
                                "self.field_updates = defaultdict(partial(defaultdict, set))"
                            ],
                            [
                                "+",
                                "sub_objs = self.related_objects(related_model, related_fields, batch)"
                            ],
                            [
                                "+",
                                "predicate = reduce(operator.or_, ("
                            ],
                            [
                                "-",
                                "for field in model._meta.private_fields:"
                            ],
                            [
                                "-",
                                "self.collect(sub_objs, source=model, nullable=True)"
                            ],
                            [
                                "-",
                                "if keep_parents and related.model in parents:"
                            ],
                            [
                                "-",
                                "def get_del_batches(self, objs, field):"
                            ],
                            [
                                "+",
                                "import operator"
                            ],
                            [
                                "-",
                                "Get a QuerySet of objects related to `objs` via the relation `related`."
                            ],
                            [
                                "+",
                                "self.collect(sub_objs, source=model, nullable=True)"
                            ],
                            [
                                "+",
                                "field_names = [field.name for field in fields]"
                            ],
                            [
                                "-",
                                "field.remote_field.on_delete(self, field, sub_objs, self.using)"
                            ],
                            [
                                "-",
                                "if hasattr(field, 'bulk_related_objects'):"
                            ],
                            [
                                "-",
                                "def related_objects(self, related, objs):"
                            ],
                            [
                                "-",
                                "for related in get_candidate_relations_to_delete(model._meta):"
                            ],
                            [
                                "+",
                                "# Preserve parent reverse relationships if keep_parents=True."
                            ],
                            [
                                "+",
                                "self.dependencies = defaultdict(set)  # {model: {models}}"
                            ],
                            [
                                "+",
                                "if keep_parents:"
                            ],
                            [
                                "+",
                                "for related_field in related_fields"
                            ],
                            [
                                "+",
                                "# {model: {(field, value): {instances}}}"
                            ],
                            [
                                "+",
                                "if not collect_related:"
                            ],
                            [
                                "+",
                                "instances = self.data[model]"
                            ],
                            [
                                "-",
                                "model = type(objs)"
                            ],
                            [
                                "+",
                                "batches = self.get_del_batches(new_objs, related_fields)"
                            ],
                            [
                                "+",
                                "def related_objects(self, related_model, related_fields, objs):"
                            ],
                            [
                                "+",
                                "parents = set(model._meta.get_parent_list())"
                            ],
                            [
                                "-",
                                "self.data = {}"
                            ],
                            [
                                "-",
                                "# Preserve parent reverse relationships if keep_parents=True."
                            ],
                            [
                                "+",
                                "sub_objs = field.bulk_related_objects(new_objs, self.using)"
                            ],
                            [
                                "+",
                                "connections[self.using].ops.bulk_batch_size(field_names, objs), 1)"
                            ],
                            [
                                "-",
                                "if collect_related:"
                            ],
                            [
                                "-",
                                "if keep_parents:"
                            ],
                            [
                                "-",
                                "sub_objs = sub_objs.only(*tuple(referenced_fields))"
                            ],
                            [
                                "+",
                                "self.data = defaultdict(set)"
                            ],
                            [
                                "-",
                                "if sub_objs:"
                            ],
                            [
                                "-",
                                "# It's something like generic foreign key."
                            ],
                            [
                                "+",
                                "# Non-referenced fields can be deferred if no signal receivers"
                            ],
                            [
                                "+",
                                "# the rare cases where .related_objects is overridden anyway."
                            ],
                            [
                                "+",
                                "return related_model._base_manager.using(self.using).filter(predicate)"
                            ],
                            [
                                "+",
                                "continue"
                            ],
                            [
                                "-",
                                "connections[self.using].ops.bulk_batch_size([field.name], objs), 1)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    },
                    "lines": {
                        "total": 124,
                        "covered": 30,
                        "percentage": 24.193548387096776
                    }
                }
            }
        },
        "django__django-11951": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/query.py": [
                            "def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):"
                        ]
                    },
                    "lines": {
                        "django/db/models/query.py": [
                            [
                                "+",
                                "max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)"
                            ],
                            [
                                "+",
                                "batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-11964": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/enums.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11999": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/__init__.py": [
                            "def contribute_to_class(self, cls, name, private_only=False):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/__init__.py": [
                            [
                                "-",
                                "setattr(cls, 'get_%s_display' % self.name,"
                            ],
                            [
                                "+",
                                "'get_%s_display' % self.name,"
                            ],
                            [
                                "+",
                                "cls,"
                            ],
                            [
                                "+",
                                "if not hasattr(cls, 'get_%s_display' % self.name):"
                            ],
                            [
                                "-",
                                "partialmethod(cls._get_FIELD_display, field=self))"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "setattr("
                            ],
                            [
                                "+",
                                "partialmethod(cls._get_FIELD_display, field=self),"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12039": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/ddl_references.py": [
                            "def col_str(column, idx):",
                            "def __init__(self, table, columns, quote_name, col_suffixes=()):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/ddl_references.py": [
                            [
                                "-",
                                "return self.quote_name(column) + self.col_suffixes[idx]"
                            ],
                            [
                                "+",
                                "return col"
                            ],
                            [
                                "+",
                                "col = self.quote_name(column)"
                            ],
                            [
                                "-",
                                "return self.quote_name(column)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 5,
                        "percentage": 55.55555555555556
                    }
                }
            }
        },
        "django__django-12050": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def resolve_lookup_value(self, value, can_reuse, allow_joins, simple_col):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "-",
                                "if isinstance(sub_value, F):"
                            ],
                            [
                                "-",
                                "if hasattr(sub_value, 'resolve_expression'):"
                            ],
                            [
                                "-",
                                "resolved_values.append(sub_value)"
                            ],
                            [
                                "-",
                                "self, reuse=can_reuse, allow_joins=allow_joins,"
                            ],
                            [
                                "-",
                                "resolved_values.append(sub_value.resolve_expression("
                            ],
                            [
                                "-",
                                "))"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "+",
                                "return type(value)("
                            ],
                            [
                                "-",
                                "resolved_values = []"
                            ],
                            [
                                "-",
                                "for sub_value in value:"
                            ],
                            [
                                "+",
                                "for sub_value in value"
                            ],
                            [
                                "-",
                                "simple_col=simple_col,"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "self.resolve_lookup_value(sub_value, can_reuse, allow_joins, simple_col)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 1,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "django__django-12125": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/serializer.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12143": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/options.py": [
                            "def change_view(self, request, object_id, form_url='', extra_context=None):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/options.py": [
                            [
                                "+",
                                "r'{}-\\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name)"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "pk_pattern = re.compile("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-12155": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/admindocs/views.py"
                    ],
                    "functions": {
                        "django/contrib/admindocs/utils.py": [
                            "def get_view_name(view_func):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admindocs/utils.py": [
                            [
                                "-",
                                "Based on https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation"
                            ],
                            [
                                "+",
                                "if not docstring:"
                            ],
                            [
                                "-",
                                "def trim_docstring(docstring):"
                            ],
                            [
                                "-",
                                "# Convert tabs to spaces and split into lines"
                            ],
                            [
                                "+",
                                "docstring = cleandoc(docstring)"
                            ],
                            [
                                "-",
                                "docstring = trim_docstring(docstring)"
                            ],
                            [
                                "+",
                                "return '', '', {}"
                            ],
                            [
                                "-",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "from inspect import cleandoc"
                            ],
                            [
                                "-",
                                "Uniformly trim leading/trailing whitespace from docstrings."
                            ],
                            [
                                "-",
                                "trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]"
                            ],
                            [
                                "-",
                                "return \"\\n\".join(trimmed).strip()"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "return ''"
                            ],
                            [
                                "-",
                                "lines = docstring.expandtabs().splitlines()"
                            ],
                            [
                                "-",
                                "if not docstring or not docstring.strip():"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 1,
                        "percentage": 5.0
                    }
                }
            }
        },
        "django__django-12193": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/forms/widgets.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12209": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/base.py": [
                            "def _save_table(self, raw=False, cls=None, force_insert=False,"
                        ]
                    },
                    "lines": {
                        "django/db/models/base.py": [
                            [
                                "+",
                                "not raw and"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12262": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-12273": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12276": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/widgets.py": [
                            "def value_from_datadict(self, data, files, name):"
                        ]
                    },
                    "lines": {
                        "django/forms/widgets.py": [
                            [
                                "+",
                                "def use_required_attribute(self, initial):"
                            ],
                            [
                                "-",
                                "def use_required_attribute(self, initial):"
                            ],
                            [
                                "+",
                                "return super().use_required_attribute(initial) and not initial"
                            ],
                            [
                                "-",
                                "return super().use_required_attribute(initial) and not initial"
                            ],
                            [
                                "-",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "django__django-12304": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/enums.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12308": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/contrib/admin/utils.py": [
                            [
                                "+",
                                "elif isinstance(field, models.JSONField) and value:"
                            ],
                            [
                                "+",
                                "except TypeError:"
                            ],
                            [
                                "+",
                                "try:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-12325": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/options.py"
                    ],
                    "functions": {
                        "django/db/models/base.py": [
                            "def __new__(cls, name, bases, attrs, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/db/models/base.py": [
                            [
                                "+",
                                "if isinstance(field, OneToOneField) and field.remote_field.parent_link:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 1,
                        "percentage": 12.5
                    }
                }
            }
        },
        "django__django-12406": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/related.py"
                    ],
                    "functions": {},
                    "lines": {
                        "django/forms/models.py": [
                            [
                                "+",
                                "(required and initial is not None) or"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "-",
                                "self.empty_label = empty_label"
                            ],
                            [
                                "-",
                                "HiddenInput, MultipleHiddenInput, SelectMultiple,"
                            ],
                            [
                                "-",
                                "self.empty_label = None"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "if ("
                            ],
                            [
                                "+",
                                "(isinstance(self.widget, RadioSelect) and not blank)"
                            ],
                            [
                                "+",
                                "blank=False, **kwargs):"
                            ],
                            [
                                "+",
                                "self.empty_label = None"
                            ],
                            [
                                "+",
                                "HiddenInput, MultipleHiddenInput, RadioSelect, SelectMultiple,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 3,
                        "percentage": 17.647058823529413
                    }
                }
            }
        },
        "django__django-12419": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/conf/global_settings.py": [
                            "def gettext_noop(s):"
                        ]
                    },
                    "lines": {
                        "django/conf/global_settings.py": [
                            [
                                "+",
                                "SECURE_REFERRER_POLICY = 'same-origin'"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-12663": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12708": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/base/schema.py": [
                            "def alter_index_together(self, model, old_index_together, new_index_together):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/base/schema.py": [
                            [
                                "-",
                                "self._delete_composed_index(model, fields, {'index': True}, self.sql_delete_index)"
                            ],
                            [
                                "+",
                                "self.sql_delete_index,"
                            ],
                            [
                                "+",
                                "{'index': True, 'unique': False},"
                            ],
                            [
                                "+",
                                "self._delete_composed_index("
                            ],
                            [
                                "+",
                                "fields,"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "model,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12713": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/options.py": [
                            "def formfield_for_manytomany(self, db_field, request, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/options.py": [
                            [
                                "+",
                                "kwargs['widget'] = AutocompleteSelectMultiple("
                            ],
                            [
                                "+",
                                "db_field.remote_field,"
                            ],
                            [
                                "+",
                                "self.admin_site,"
                            ],
                            [
                                "+",
                                "using=db,"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "kwargs['widget'] = widgets.ManyToManyRawIdWidget("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 19,
                        "percentage": 76.0
                    }
                }
            }
        },
        "django__django-12741": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/core/management/commands/flush.py"
                    ],
                    "functions": {
                        "django/db/backends/base/operations.py": [
                            "def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False"
                        ]
                    },
                    "lines": {
                        "django/db/backends/base/operations.py": [
                            [
                                "+",
                                "using=self.connection.alias,"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "with transaction.atomic("
                            ],
                            [
                                "+",
                                "savepoint=self.connection.features.can_rollback_ddl,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 3,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-12754": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/autodetector.py": [
                            "def generate_created_models(self):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/autodetector.py": [
                            [
                                "+",
                                "# Depend on the removal of base fields if the new model has"
                            ],
                            [
                                "+",
                                "new_base_model_state.fields,"
                            ],
                            [
                                "+",
                                ").intersection(model_state.fields)"
                            ],
                            [
                                "+",
                                "new_base_model_state = self.to_state.models.get((base_app_label, base_name))"
                            ],
                            [
                                "+",
                                "old_base_model_state = self.from_state.models.get((base_app_label, base_name))"
                            ],
                            [
                                "+",
                                "if old_base_model_state and new_base_model_state:"
                            ],
                            [
                                "+",
                                "for removed_base_field in removed_base_fields:"
                            ],
                            [
                                "+",
                                "dependencies.append((base_app_label, base_name, removed_base_field, False))"
                            ],
                            [
                                "+",
                                "removed_base_fields = set(old_base_model_state.fields).difference("
                            ],
                            [
                                "+",
                                "# a field with the same name."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12774": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/query.py": [
                            "def in_bulk(self, id_list=None, *, field_name='pk'):"
                        ]
                    },
                    "lines": {
                        "django/db/models/query.py": [
                            [
                                "+",
                                "constraint.fields[0]"
                            ],
                            [
                                "+",
                                "field_name not in unique_fields"
                            ],
                            [
                                "+",
                                "if len(constraint.fields) == 1"
                            ],
                            [
                                "+",
                                "for constraint in opts.total_unique_constraints"
                            ],
                            [
                                "+",
                                "not opts.get_field(field_name).unique and"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "if ("
                            ],
                            [
                                "+",
                                "field_name != 'pk' and"
                            ],
                            [
                                "+",
                                "opts = self.model._meta"
                            ],
                            [
                                "+",
                                "]"
                            ],
                            [
                                "+",
                                "unique_fields = ["
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 1,
                        "percentage": 8.333333333333332
                    }
                }
            }
        },
        "django__django-12858": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12965": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/compiler.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13012": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/expressions.py": [
                            "def set_source_expressions(self, exprs):"
                        ]
                    },
                    "lines": {
                        "django/db/models/expressions.py": [
                            [
                                "+",
                                "def get_group_by_cols(self, alias=None):"
                            ],
                            [
                                "+",
                                "return self.expression.get_group_by_cols(alias=alias)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-13023": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13028": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13033": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/compiler.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13089": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/cache/backends/db.py": [
                            "def _cull(self, db, cursor, now):"
                        ]
                    },
                    "lines": {
                        "django/core/cache/backends/db.py": [
                            [
                                "+",
                                "[last_cache_key[0]],"
                            ],
                            [
                                "+",
                                "if last_cache_key:"
                            ],
                            [
                                "+",
                                "'DELETE FROM %s WHERE cache_key < %%s' % table,"
                            ],
                            [
                                "+",
                                "last_cache_key = cursor.fetchone()"
                            ],
                            [
                                "+",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 4,
                        "percentage": 44.44444444444444
                    }
                }
            }
        },
        "django__django-13109": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/related.py": [
                            "def validate(self, value, model_instance):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-13112": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/related.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13121": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/base/operations.py",
                        "django/db/backends/mysql/operations.py",
                        "django/db/models/expressions.py"
                    ],
                    "functions": {
                        "django/db/backends/sqlite3/operations.py": [
                            "def date_extract_sql(self, lookup_type, field_name):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/sqlite3/operations.py": [
                            [
                                "-",
                                "return str(duration_microseconds(timedelta))"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "def date_interval_sql(self, timedelta):"
                            ],
                            [
                                "-",
                                "from django.utils.duration import duration_microseconds"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 67,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13128": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/expressions.py": [
                            "def compile(self, side, compiler, connection):",
                            "def set_source_expressions(self, exprs):",
                            "def as_sql(self, compiler, connection):"
                        ]
                    },
                    "lines": {
                        "django/db/models/expressions.py": [
                            [
                                "+",
                                "rhs_type = None"
                            ],
                            [
                                "+",
                                "return TemporalSubtraction(self.lhs, self.rhs).resolve_expression("
                            ],
                            [
                                "+",
                                "lhs_type = None"
                            ],
                            [
                                "+",
                                "return super().as_sql(compiler, connection)"
                            ],
                            [
                                "-",
                                "c.lhs = c.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)"
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "-",
                                "except FieldError:"
                            ],
                            [
                                "+",
                                "query, allow_joins, reuse, summarize, for_save,"
                            ],
                            [
                                "-",
                                "datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}"
                            ],
                            [
                                "-",
                                "):"
                            ],
                            [
                                "-",
                                "not connection.features.has_native_duration_field and"
                            ],
                            [
                                "-",
                                "if ("
                            ],
                            [
                                "+",
                                "if connection.features.has_native_duration_field:"
                            ],
                            [
                                "+",
                                "c.rhs = rhs"
                            ],
                            [
                                "+",
                                "if not isinstance(self, (DurationExpression, TemporalSubtraction)):"
                            ],
                            [
                                "+",
                                "lhs_type = lhs.output_field.get_internal_type()"
                            ],
                            [
                                "+",
                                "rhs_type = rhs.output_field.get_internal_type()"
                            ],
                            [
                                "-",
                                "c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)"
                            ],
                            [
                                "+",
                                "if 'DurationField' in {lhs_type, rhs_type} and lhs_type != rhs_type:"
                            ],
                            [
                                "+",
                                "datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}"
                            ],
                            [
                                "+",
                                "c.lhs = lhs"
                            ],
                            [
                                "+",
                                "lhs = self.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)"
                            ],
                            [
                                "-",
                                "if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:"
                            ],
                            [
                                "-",
                                "lhs_type = self.lhs.output_field.get_internal_type()"
                            ],
                            [
                                "-",
                                "return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)"
                            ],
                            [
                                "-",
                                "rhs_type = None"
                            ],
                            [
                                "+",
                                "return DurationExpression(self.lhs, self.connector, self.rhs).resolve_expression("
                            ],
                            [
                                "-",
                                "lhs_type = None"
                            ],
                            [
                                "+",
                                "except (AttributeError, FieldError):"
                            ],
                            [
                                "+",
                                "rhs = self.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)"
                            ],
                            [
                                "+",
                                "if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:"
                            ],
                            [
                                "-",
                                "rhs_type = self.rhs.output_field.get_internal_type()"
                            ],
                            [
                                "-",
                                "lhs_type != rhs_type"
                            ],
                            [
                                "-",
                                "'DurationField' in {lhs_type, rhs_type} and"
                            ],
                            [
                                "-",
                                "return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)"
                            ],
                            [
                                "-",
                                "try:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 37,
                        "covered": 1,
                        "percentage": 2.7027027027027026
                    }
                }
            }
        },
        "django__django-13158": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13195": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/messages/storage/cookie.py",
                        "django/contrib/sessions/middleware.py"
                    ],
                    "functions": {
                        "django/http/response.py": [
                            "def set_signed_cookie(self, key, value, salt='', **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/http/response.py": [
                            [
                                "+",
                                "# - the samesite is \"none\"."
                            ],
                            [
                                "+",
                                "key.startswith(('__Secure-', '__Host-')) or"
                            ],
                            [
                                "+",
                                "secure = ("
                            ],
                            [
                                "+",
                                "# Browsers can ignore the Set-Cookie header if the cookie doesn't use"
                            ],
                            [
                                "+",
                                "expires='Thu, 01 Jan 1970 00:00:00 GMT', samesite=samesite,"
                            ],
                            [
                                "-",
                                "# with __Host- or __Secure- and the cookie doesn't use the secure flag."
                            ],
                            [
                                "-",
                                "expires='Thu, 01 Jan 1970 00:00:00 GMT',"
                            ],
                            [
                                "-",
                                "def delete_cookie(self, key, path='/', domain=None):"
                            ],
                            [
                                "+",
                                "(samesite and samesite.lower() == 'none')"
                            ],
                            [
                                "+",
                                "def delete_cookie(self, key, path='/', domain=None, samesite=None):"
                            ],
                            [
                                "+",
                                "# - the cookie name starts with \"__Host-\" or \"__Secure-\", or"
                            ],
                            [
                                "-",
                                "# Most browsers ignore the Set-Cookie header if the cookie name starts"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "-",
                                "secure = key.startswith(('__Secure-', '__Host-'))"
                            ],
                            [
                                "+",
                                "# the secure flag and:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13212": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/forms/fields.py"
                    ],
                    "functions": {
                        "django/core/validators.py": [
                            "def __init__(self, message=None, code=None, allowlist=None, *, whitelist=None):",
                            "def validate_ipv46_address(value):",
                            "def __init__(self, max_digits, decimal_places):",
                            "def __init__(self, message=None, code=None):",
                            "def __init__(self, schemes=None, **kwargs):",
                            "def validate_ipv4_address(value):",
                            "def __call__(self, value):"
                        ]
                    },
                    "lines": {
                        "django/core/validators.py": [
                            [
                                "-",
                                "raise ValidationError(self.messages['invalid'])"
                            ],
                            [
                                "-",
                                "raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')"
                            ],
                            [
                                "+",
                                "raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})"
                            ],
                            [
                                "+",
                                "raise ValidationError(self.messages['invalid'], code='invalid', params={'value': value})"
                            ],
                            [
                                "+",
                                "params={'max': self.decimal_places, 'value': value},"
                            ],
                            [
                                "+",
                                "raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid', params={'value': value})"
                            ],
                            [
                                "-",
                                "raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')"
                            ],
                            [
                                "+",
                                "'value': value,"
                            ],
                            [
                                "-",
                                "params={'max': self.max_digits},"
                            ],
                            [
                                "+",
                                "params={'max': self.max_digits, 'value': value},"
                            ],
                            [
                                "-",
                                "raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')"
                            ],
                            [
                                "+",
                                "raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid', params={'value': value})"
                            ],
                            [
                                "-",
                                "params={'max': self.decimal_places},"
                            ],
                            [
                                "+",
                                "params={'max': (self.max_digits - self.decimal_places), 'value': value},"
                            ],
                            [
                                "-",
                                "'allowed_extensions': ', '.join(self.allowed_extensions)"
                            ],
                            [
                                "-",
                                "params={'max': (self.max_digits - self.decimal_places)},"
                            ],
                            [
                                "+",
                                "'allowed_extensions': ', '.join(self.allowed_extensions),"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 26,
                        "covered": 2,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "django__django-13279": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/sessions/backends/base.py": [
                            "def decode(self, session_data):",
                            "def _hash(self, value):"
                        ]
                    },
                    "lines": {
                        "django/contrib/sessions/backends/base.py": [
                            [
                                "+",
                                "return self._legacy_encode(session_dict)"
                            ],
                            [
                                "+",
                                "if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':"
                            ],
                            [
                                "+",
                                "return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')"
                            ],
                            [
                                "+",
                                "serialized = self.serializer().dumps(session_dict)"
                            ],
                            [
                                "+",
                                "# RemovedInDjango40Warning."
                            ],
                            [
                                "+",
                                "# RemovedInDjango40Warning: DEFAULT_HASHING_ALGORITHM will be removed."
                            ],
                            [
                                "+",
                                "hash = self._hash(serialized)"
                            ],
                            [
                                "+",
                                "def _legacy_encode(self, session_dict):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 1,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "django__django-13297": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/views/generic/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13315": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/forms/models.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13343": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/files.py": [
                            "def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **k",
                            "def deconstruct(self):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/files.py": [
                            [
                                "+",
                                "kwargs['storage'] = getattr(self, '_storage_callable', self.storage)"
                            ],
                            [
                                "+",
                                "self._storage_callable = self.storage"
                            ],
                            [
                                "+",
                                "# Hold a reference to the callable for deconstruct()."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-13344": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/sessions/middleware.py",
                        "django/middleware/cache.py",
                        "django/middleware/security.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13346": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/json.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13363": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/db/models/functions/datetime.py": [
                            [
                                "+",
                                "tzname = self.get_tzname()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-13401": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13406": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13410": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/files/locks.py": [
                            "def unlock(f):"
                        ]
                    },
                    "lines": {
                        "django/core/files/locks.py": [
                            [
                                "+",
                                "except BlockingIOError:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 8,
                        "percentage": 88.88888888888889
                    }
                }
            }
        },
        "django__django-13417": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/query.py": [
                            "def ordered(self):"
                        ]
                    },
                    "lines": {
                        "django/db/models/query.py": [
                            [
                                "+",
                                "elif ("
                            ],
                            [
                                "+",
                                "self.query.default_ordering and"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "# A default ordering doesn't affect GROUP BY queries."
                            ],
                            [
                                "+",
                                "not self.query.group_by"
                            ],
                            [
                                "+",
                                "self.query.get_meta().ordering and"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "django__django-13449": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/expressions.py": [
                            "def as_sql(self, compiler, connection, template=None):",
                            "def desc(self):"
                        ]
                    },
                    "lines": {
                        "django/db/models/expressions.py": [
                            [
                                "-",
                                "class Window(Expression):"
                            ],
                            [
                                "+",
                                "return super(Window, copy).as_sqlite(compiler, connection)"
                            ],
                            [
                                "+",
                                "copy.set_source_expressions(source_expressions)"
                            ],
                            [
                                "+",
                                "class Window(SQLiteNumericMixin, Expression):"
                            ],
                            [
                                "+",
                                "if isinstance(self.output_field, fields.DecimalField):"
                            ],
                            [
                                "+",
                                "def as_sqlite(self, compiler, connection):"
                            ],
                            [
                                "+",
                                "source_expressions = copy.get_source_expressions()"
                            ],
                            [
                                "+",
                                "source_expressions[0].output_field = fields.FloatField()"
                            ],
                            [
                                "+",
                                "# Casting to numeric must be outside of the window expression."
                            ],
                            [
                                "+",
                                "return self.as_sql(compiler, connection)"
                            ],
                            [
                                "+",
                                "copy = self.copy()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 1,
                        "percentage": 8.333333333333332
                    }
                }
            }
        },
        "django__django-13512": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/admin/utils.py"
                    ],
                    "functions": {
                        "django/forms/fields.py": [
                            "def bound_data(self, data, initial):"
                        ]
                    },
                    "lines": {
                        "django/forms/fields.py": [
                            [
                                "+",
                                "return json.dumps(value, ensure_ascii=False, cls=self.encoder)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-13513": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/views/debug.py": [
                            "def _get_lines_from_file(self, filename, lineno, context_lines, loader=None, mod",
                            "def explicit_or_implicit_cause(exc_value):"
                        ]
                    },
                    "lines": {
                        "django/views/debug.py": [
                            [
                                "+",
                                "return frames"
                            ],
                            [
                                "+",
                                "'exc_cause': exc_cause,"
                            ],
                            [
                                "-",
                                "# other exception."
                            ],
                            [
                                "-",
                                "def get_traceback_frames(self):"
                            ],
                            [
                                "-",
                                "exc_value = exceptions.pop()"
                            ],
                            [
                                "+",
                                "}"
                            ],
                            [
                                "-",
                                "tb = exc_value.__traceback__"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "+",
                                "'exc_cause_explicit': exc_cause_explicit,"
                            ],
                            [
                                "-",
                                "tb = tb.tb_next"
                            ],
                            [
                                "+",
                                "frames.extend("
                            ],
                            [
                                "+",
                                "def get_exception_traceback_frames(self, exc_value, tb):"
                            ],
                            [
                                "+",
                                "def get_traceback_frames(self):"
                            ],
                            [
                                "-",
                                "})"
                            ],
                            [
                                "-",
                                "frames.append({"
                            ],
                            [
                                "+",
                                "exc_value = exceptions.pop()"
                            ],
                            [
                                "+",
                                "exc_value = self._get_explicit_or_implicit_cause(exc_value)"
                            ],
                            [
                                "+",
                                "self.get_exception_traceback_frames(exc_value, exc_value.__traceback__),"
                            ],
                            [
                                "+",
                                "suppress_context = getattr(exc_value, '__suppress_context__', None)"
                            ],
                            [
                                "+",
                                "def _get_explicit_or_implicit_cause(self, exc_value):"
                            ],
                            [
                                "-",
                                "if not tb.tb_next and exceptions:"
                            ],
                            [
                                "+",
                                "tb = tb.tb_next"
                            ],
                            [
                                "+",
                                "frames.extend(self.get_exception_traceback_frames(exc_value, tb))"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "-",
                                "# If the traceback for current exception is consumed, try the"
                            ],
                            [
                                "-",
                                "return frames"
                            ],
                            [
                                "-",
                                "exc_value = explicit_or_implicit_cause(exc_value)"
                            ],
                            [
                                "+",
                                "exc_cause = self._get_explicit_or_implicit_cause(exc_value)"
                            ],
                            [
                                "+",
                                "exc_cause_explicit = getattr(exc_value, '__cause__', True)"
                            ],
                            [
                                "+",
                                "while exceptions:"
                            ],
                            [
                                "-",
                                "'exc_cause_explicit': getattr(exc_value, '__cause__', True),"
                            ],
                            [
                                "-",
                                "'exc_cause': explicit_or_implicit_cause(exc_value),"
                            ],
                            [
                                "+",
                                "yield {"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 43,
                        "covered": 9,
                        "percentage": 20.930232558139537
                    }
                }
            }
        },
        "django__django-13516": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/base.py": [
                            "def __init__(self, out, ending='\\n'):"
                        ]
                    },
                    "lines": {
                        "django/core/management/base.py": [
                            [
                                "+",
                                "def flush(self):"
                            ],
                            [
                                "+",
                                "if hasattr(self._out, 'flush'):"
                            ],
                            [
                                "+",
                                "self._out.flush()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-13551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/auth/tokens.py": [
                            "def _make_token_with_timestamp(self, user, timestamp, legacy=False):",
                            "def _make_hash_value(self, user, timestamp):"
                        ]
                    },
                    "lines": {
                        "django/contrib/auth/tokens.py": [
                            [
                                "+",
                                "email_field = user.get_email_field_name()"
                            ],
                            [
                                "+",
                                "invalidated when it's used:"
                            ],
                            [
                                "-",
                                "after a password reset to produce a token that invalidated when it's"
                            ],
                            [
                                "+",
                                "Hash the user's primary key, email (if available), and some user state"
                            ],
                            [
                                "+",
                                "email = getattr(user, email_field, '') or ''"
                            ],
                            [
                                "-",
                                "used:"
                            ],
                            [
                                "+",
                                "return f'{user.pk}{user.password}{login_timestamp}{timestamp}{email}'"
                            ],
                            [
                                "-",
                                "Hash the user's primary key and some user state that's sure to change"
                            ],
                            [
                                "+",
                                "that's sure to change after a password reset to produce a token that is"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 1,
                        "percentage": 10.0
                    }
                }
            }
        },
        "django__django-13568": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/contrib/auth/checks.py": [
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "if not cls._meta.get_field(cls.USERNAME_FIELD).unique and not any("
                            ],
                            [
                                "+",
                                "constraint.fields == (cls.USERNAME_FIELD,)"
                            ],
                            [
                                "+",
                                "for constraint in cls._meta.total_unique_constraints"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-13569": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/functions/math.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13590": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def resolve_lookup_value(self, value, can_reuse, allow_joins):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "+",
                                "type_ = type(value)"
                            ],
                            [
                                "+",
                                "return type_(*values)"
                            ],
                            [
                                "+",
                                "if hasattr(type_, '_make'):  # namedtuple"
                            ],
                            [
                                "+",
                                "return type_(values)"
                            ],
                            [
                                "+",
                                "values = ("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "django__django-13658": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/core/management/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13670": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/utils/dateformat.py": [
                            "def W(self):"
                        ]
                    },
                    "lines": {
                        "django/utils/dateformat.py": [
                            [
                                "+",
                                "return '%02d' % (self.data.year % 100)"
                            ],
                            [
                                "+",
                                "\"\"\"Year, 2 digits with leading zeros; e.g. '99'.\"\"\""
                            ],
                            [
                                "-",
                                "\"Year, 2 digits; e.g. '99'\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-13741": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/auth/forms.py": [
                            "def __init__(self, *args, **kwargs):",
                            "class ReadOnlyPasswordHashField(forms.Field):"
                        ]
                    },
                    "lines": {
                        "django/contrib/auth/forms.py": [
                            [
                                "-",
                                "return False"
                            ],
                            [
                                "-",
                                "# This is done here, rather than on the field, because the"
                            ],
                            [
                                "-",
                                "# Regardless of what the user provides, return the initial value."
                            ],
                            [
                                "-",
                                "return self.initial.get('password')"
                            ],
                            [
                                "+",
                                "kwargs.setdefault('disabled', True)"
                            ],
                            [
                                "-",
                                "return initial"
                            ],
                            [
                                "-",
                                "# field does not have access to the initial value"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "def has_changed(self, initial, data):"
                            ],
                            [
                                "-",
                                "def bound_data(self, data, initial):"
                            ],
                            [
                                "-",
                                "def clean_password(self):"
                            ],
                            [
                                "-",
                                "# render an input field."
                            ],
                            [
                                "-",
                                "# Always return initial because the widget doesn't"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13786": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/operations/models.py": [
                            "def reduce(self, operation, app_label):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/operations/models.py": [
                            [
                                "+",
                                "for key in operation.ALTER_OPTION_KEYS:"
                            ],
                            [
                                "+",
                                "options = {**self.options, **operation.options}"
                            ],
                            [
                                "+",
                                "options.pop(key, None)"
                            ],
                            [
                                "+",
                                "options=options,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 2,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-13794": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/utils/functional.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13807": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/sqlite3/base.py": [
                            "def check_constraints(self, table_names=None):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/sqlite3/base.py": [
                            [
                                "+",
                                "cursor.execute("
                            ],
                            [
                                "+",
                                "'PRAGMA foreign_key_check(%s)'"
                            ],
                            [
                                "+",
                                "self.ops.quote_name(primary_key_column_name),"
                            ],
                            [
                                "+",
                                "self.ops.quote_name(table_name),"
                            ],
                            [
                                "-",
                                "primary_key_column_name, column_name, table_name"
                            ],
                            [
                                "+",
                                ").fetchall()"
                            ],
                            [
                                "+",
                                "% self.ops.quote_name(table_name)"
                            ],
                            [
                                "+",
                                "self.ops.quote_name(column_name),"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 3,
                        "percentage": 27.27272727272727
                    }
                }
            }
        },
        "django__django-13809": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/commands/runserver.py": [
                            "def inner_run(self, *args, **options):",
                            "def add_arguments(self, parser):"
                        ]
                    },
                    "lines": {
                        "django/core/management/commands/runserver.py": [
                            [
                                "+",
                                "help='Skip system checks.',"
                            ],
                            [
                                "+",
                                "if not options['skip_checks']:"
                            ],
                            [
                                "+",
                                "parser.add_argument("
                            ],
                            [
                                "+",
                                "'--skip-checks', action='store_true',"
                            ],
                            [
                                "+",
                                "self.stdout.write('Performing system checks...\\n\\n')"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 4,
                        "percentage": 44.44444444444444
                    }
                }
            }
        },
        "django__django-13810": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/handlers/base.py": [
                            "def load_middleware(self, is_async=False):"
                        ]
                    },
                    "lines": {
                        "django/core/handlers/base.py": [
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "handler = adapted_handler"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 4,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "django__django-13820": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/loader.py": [
                            "def load_disk(self):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/loader.py": [
                            [
                                "+",
                                "# Empty directories are namespaces. Namespace packages have no"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "-",
                                "# Empty directories are namespaces."
                            ],
                            [
                                "+",
                                "if ("
                            ],
                            [
                                "-",
                                "self.unmigrated_apps.add(app_config.label)"
                            ],
                            [
                                "-",
                                "continue"
                            ],
                            [
                                "+",
                                "# https://docs.python.org/3/reference/import.html#namespace-packages"
                            ],
                            [
                                "+",
                                "getattr(module, '__file__', None) is None and"
                            ],
                            [
                                "+",
                                "self.unmigrated_apps.add(app_config.label)"
                            ],
                            [
                                "+",
                                "continue"
                            ],
                            [
                                "+",
                                "# __file__ and don't use a list for __path__. See"
                            ],
                            [
                                "+",
                                "not isinstance(module.__path__, list)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 2,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "django__django-13821": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/db/backends/sqlite3/base.py": [
                            [
                                "+",
                                "raise ImproperlyConfigured("
                            ],
                            [
                                "+",
                                "'SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version"
                            ],
                            [
                                "+",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 3,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-13837": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/autoreload.py": [
                            [
                                "+",
                                "# see https://docs.python.org/3/reference/import.html#main-spec"
                            ],
                            [
                                "-",
                                "django_main_path = Path(django.__main__.__file__)"
                            ],
                            [
                                "+",
                                "if __main__.__spec__ is not None and __main__.__spec__.parent:"
                            ],
                            [
                                "+",
                                "import __main__"
                            ],
                            [
                                "-",
                                "import django.__main__"
                            ],
                            [
                                "+",
                                "args += ['-m', __main__.__spec__.parent]"
                            ],
                            [
                                "+",
                                "# __spec__ is set when the server was started with the `-m` option,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 3,
                        "percentage": 30.0
                    }
                }
            }
        },
        "django__django-13925": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13933": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/forms/models.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13964": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14007": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/compiler.py": [
                            "def execute_sql(self, returning_fields=None):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/compiler.py": [
                            [
                                "+",
                                "opts = self.query.get_meta()"
                            ],
                            [
                                "+",
                                "converters = self.get_converters(cols)"
                            ],
                            [
                                "+",
                                "cols = [field.get_col(opts.db_table) for field in self.returning_fields]"
                            ],
                            [
                                "+",
                                "rows = list(self.apply_converters(rows, converters))"
                            ],
                            [
                                "+",
                                "rows = self.connection.ops.fetch_returned_insert_rows(cursor)"
                            ],
                            [
                                "+",
                                "rows = [self.connection.ops.fetch_returned_insert_columns("
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "cursor, opts.db_table, opts.pk.column,"
                            ],
                            [
                                "+",
                                "),)]"
                            ],
                            [
                                "+",
                                "cursor, self.returning_params,"
                            ],
                            [
                                "+",
                                "if converters:"
                            ],
                            [
                                "+",
                                "rows = [(self.connection.ops.last_insert_id("
                            ],
                            [
                                "+",
                                "return rows"
                            ],
                            [
                                "+",
                                "elif self.connection.features.can_return_columns_from_insert:"
                            ],
                            [
                                "+",
                                ")]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 21,
                        "covered": 6,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-14011": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/core/servers/basehttp.py",
                        "django/db/backends/sqlite3/features.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 21,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14017": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/query_utils.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14034": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/forms/boundfield.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14053": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/staticfiles/storage.py": [
                            "def post_process(self, paths, dry_run=False, **options):"
                        ]
                    },
                    "lines": {
                        "django/contrib/staticfiles/storage.py": [
                            [
                                "+",
                                "processed_adjustable_paths = {}"
                            ],
                            [
                                "-",
                                "# Do a single pass first. Post-process all files once, then repeat for"
                            ],
                            [
                                "+",
                                "# Yield adjustable files with final, hashed name."
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "-",
                                "# adjustable files."
                            ],
                            [
                                "+",
                                "# adjustable files and exceptions, and collecting adjustable files."
                            ],
                            [
                                "+",
                                "# Do a single pass first. Post-process all files once, yielding not"
                            ],
                            [
                                "+",
                                "if name not in adjustable_paths or isinstance(processed, Exception):"
                            ],
                            [
                                "+",
                                "yield from processed_adjustable_paths.values()"
                            ],
                            [
                                "+",
                                "processed_adjustable_paths[name] = (name, hashed_name, processed)"
                            ],
                            [
                                "+",
                                "# Adjustable files to yield at end, keyed by the original path."
                            ],
                            [
                                "+",
                                "# Overwrite since hashed_name may be newer."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 3,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-14089": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/utils/datastructures.py": [
                            "def discard(self, item):"
                        ]
                    },
                    "lines": {
                        "django/utils/datastructures.py": [
                            [
                                "+",
                                "return reversed(self.dict)"
                            ],
                            [
                                "+",
                                "def __reversed__(self):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-14122": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/compiler.py": [
                            "def get_group_by(self, select, order_by):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/compiler.py": [
                            [
                                "+",
                                "# the SELECT clause are already part of the GROUP BY."
                            ],
                            [
                                "+",
                                "if not self._meta_ordering:"
                            ],
                            [
                                "+",
                                "# Skip references to the SELECT clause, as all expressions in"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 8,
                        "percentage": 72.72727272727273
                    }
                }
            }
        },
        "django__django-14140": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/query_utils.py": [
                            "def deconstruct(self):"
                        ]
                    },
                    "lines": {
                        "django/db/models/query_utils.py": [
                            [
                                "+",
                                "kwargs['_connector'] = self.connector"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "-",
                                "child = self.children[0]"
                            ],
                            [
                                "-",
                                "args, kwargs = (), {}"
                            ],
                            [
                                "-",
                                "args = tuple(self.children)"
                            ],
                            [
                                "-",
                                "if self.connector != self.default:"
                            ],
                            [
                                "+",
                                "kwargs = {}"
                            ],
                            [
                                "+",
                                "if self.connector != self.default:"
                            ],
                            [
                                "-",
                                "if len(self.children) == 1 and not isinstance(self.children[0], Q):"
                            ],
                            [
                                "-",
                                "kwargs = {'_connector': self.connector}"
                            ],
                            [
                                "+",
                                "args = tuple(self.children)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 1,
                        "percentage": 8.333333333333332
                    }
                }
            }
        },
        "django__django-14155": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/urls/resolvers.py": [
                            "def __getitem__(self, index):"
                        ]
                    },
                    "lines": {
                        "django/urls/resolvers.py": [
                            [
                                "+",
                                "if isinstance(self.func, functools.partial):"
                            ],
                            [
                                "+",
                                "self.app_names, self.namespaces, self.route,"
                            ],
                            [
                                "+",
                                "func = repr(self.func)"
                            ],
                            [
                                "+",
                                "func = self._func_path"
                            ],
                            [
                                "+",
                                "'app_names=%r, namespaces=%r, route=%r)' % ("
                            ],
                            [
                                "-",
                                "return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % ("
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '"
                            ],
                            [
                                "-",
                                "self._func_path, self.args, self.kwargs, self.url_name,"
                            ],
                            [
                                "+",
                                "return ("
                            ],
                            [
                                "+",
                                "func, self.args, self.kwargs, self.url_name,"
                            ],
                            [
                                "-",
                                "self.app_names, self.namespaces, self.route,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 1,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "django__django-14170": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/base/operations.py"
                    ],
                    "functions": {
                        "django/db/models/lookups.py": [
                            "class IRegex(Regex):"
                        ]
                    },
                    "lines": {
                        "django/db/models/lookups.py": [
                            [
                                "+",
                                "year, iso_year=iso_year,"
                            ],
                            [
                                "-",
                                "bounds = connection.ops.year_lookup_bounds_for_date_field(year)"
                            ],
                            [
                                "-",
                                "bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)"
                            ],
                            [
                                "+",
                                "bounds = connection.ops.year_lookup_bounds_for_date_field("
                            ],
                            [
                                "+",
                                "from django.db.models.functions import ExtractIsoYear"
                            ],
                            [
                                "+",
                                "iso_year = isinstance(self.lhs, ExtractIsoYear)"
                            ],
                            [
                                "+",
                                "bounds = connection.ops.year_lookup_bounds_for_datetime_field("
                            ],
                            [
                                "+",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 31,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14238": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14311": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/autoreload.py": [
                            [
                                "+",
                                "name = spec.parent"
                            ],
                            [
                                "+",
                                "name = spec.name"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "args += ['-m', name]"
                            ],
                            [
                                "+",
                                "spec = __main__.__spec__"
                            ],
                            [
                                "+",
                                "if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 3,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-14315": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/base/client.py"
                    ],
                    "functions": {
                        "django/db/backends/postgresql/client.py": [
                            "def settings_to_cmd_args_env(cls, settings_dict, parameters):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/postgresql/client.py": [
                            [
                                "+",
                                "return args, (env or None)"
                            ],
                            [
                                "-",
                                "return args, env"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14349": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/validators.py": [
                            "def __init__(self, schemes=None, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/core/validators.py": [
                            [
                                "+",
                                "unsafe_chars = frozenset('\\t\\r\\n')"
                            ],
                            [
                                "+",
                                "raise ValidationError(self.message, code=self.code, params={'value': value})"
                            ],
                            [
                                "+",
                                "if self.unsafe_chars.intersection(value):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14351": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/lookups.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14373": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/utils/dateformat.py": [
                            "def y(self):"
                        ]
                    },
                    "lines": {
                        "django/utils/dateformat.py": [
                            [
                                "+",
                                "\"\"\"Year, 4 digits with leading zeros; e.g. '1999'.\"\"\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 3,
                        "percentage": 75.0
                    }
                }
            }
        },
        "django__django-14376": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/mysql/client.py"
                    ],
                    "functions": {
                        "django/db/backends/mysql/base.py": [
                            "def get_connection_params(self):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 4,
                        "percentage": 30.76923076923077
                    }
                }
            }
        },
        "django__django-14404": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/sites.py": [
                            "def autocomplete_view(self, request):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/sites.py": [
                            [
                                "-",
                                "return HttpResponsePermanentRedirect(path)"
                            ],
                            [
                                "-",
                                "match = resolve(path, urlconf)"
                            ],
                            [
                                "+",
                                "return HttpResponsePermanentRedirect('%s/' % request.path)"
                            ],
                            [
                                "+",
                                "match = resolve('%s/' % request.path_info, urlconf)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-14434": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/base/schema.py": [
                            "def create_unique_name(*args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/base/schema.py": [
                            [
                                "-",
                                "name = IndexName(model._meta.db_table, columns, '_uniq', create_unique_name)"
                            ],
                            [
                                "-",
                                "table=table,"
                            ],
                            [
                                "+",
                                "name = IndexName(table, columns, '_uniq', create_unique_name)"
                            ],
                            [
                                "+",
                                "table=Table(table, self.quote_name),"
                            ],
                            [
                                "-",
                                "columns = Expressions(model._meta.db_table, expressions, compiler, self.quote_value)"
                            ],
                            [
                                "+",
                                "columns = Expressions(table, expressions, compiler, self.quote_value)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 2,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-14493": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/staticfiles/storage.py": [
                            "def post_process(self, paths, dry_run=False, **options):"
                        ]
                    },
                    "lines": {
                        "django/contrib/staticfiles/storage.py": [
                            [
                                "+",
                                "substitutions = False"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14500": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/executor.py": [
                            "def unapply_migration(self, state, migration, fake=False):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/executor.py": [
                            [
                                "+",
                                "# For replacement migrations, also record individual statuses."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 4,
                        "percentage": 80.0
                    }
                }
            }
        },
        "django__django-14534": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/boundfield.py": [
                            "def template_name(self):"
                        ]
                    },
                    "lines": {
                        "django/forms/boundfield.py": [
                            [
                                "+",
                                "return self.data['attrs'].get('id')"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-14539": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/utils/html.py": [
                            "def trim_punctuation(lead, middle, trail):"
                        ]
                    },
                    "lines": {
                        "django/utils/html.py": [
                            [
                                "+",
                                "middle = middle[:-punctuation_count]"
                            ],
                            [
                                "+",
                                "trail = middle[-punctuation_count:] + trail"
                            ],
                            [
                                "+",
                                "punctuation_count = len(middle_unescaped) - len(stripped)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-14559": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/query.py": [
                            "def bulk_update(self, objs, fields, batch_size=None):"
                        ]
                    },
                    "lines": {
                        "django/db/models/query.py": [
                            [
                                "-",
                                "return"
                            ],
                            [
                                "+",
                                "return 0"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 4,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "django__django-14580": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/serializer.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14608": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/formsets.py": [
                            "def full_clean(self):"
                        ]
                    },
                    "lines": {
                        "django/forms/formsets.py": [
                            [
                                "+",
                                "error_class='nonform'"
                            ],
                            [
                                "+",
                                "e.error_list,"
                            ],
                            [
                                "-",
                                "self._non_form_errors = self.error_class(e.error_list)"
                            ],
                            [
                                "+",
                                "self._non_form_errors = self.error_class("
                            ],
                            [
                                "+",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-14631": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/forms/boundfield.py"
                    ],
                    "functions": {
                        "django/forms/forms.py": [
                            "def has_changed(self):",
                            "def __repr__(self):",
                            "def _widget_data_value(self, widget, html_name):",
                            "def full_clean(self):"
                        ]
                    },
                    "lines": {
                        "django/forms/forms.py": [
                            [
                                "-",
                                "initial_value = self[name].initial"
                            ],
                            [
                                "-",
                                "bf = self[name]"
                            ],
                            [
                                "+",
                                "value = field.clean(value, bf.initial)"
                            ],
                            [
                                "-",
                                "initial_value = field.to_python("
                            ],
                            [
                                "-",
                                "# the widget."
                            ],
                            [
                                "-",
                                "value = field.clean(value, initial)"
                            ],
                            [
                                "+",
                                "return [name for name, bf in self._bound_items() if bf._has_changed()]"
                            ],
                            [
                                "-",
                                "# Always assume data has changed if validation fails."
                            ],
                            [
                                "-",
                                "except ValidationError:"
                            ],
                            [
                                "-",
                                "return self._widget_data_value(field.widget, html_name)"
                            ],
                            [
                                "-",
                                "if field.has_changed(initial_value, data_value):"
                            ],
                            [
                                "-",
                                "self._widget_data_value(hidden_widget, initial_prefixed_name)"
                            ],
                            [
                                "-",
                                "initial_prefixed_name = self.add_initial_prefix(name)"
                            ],
                            [
                                "+",
                                "\"\"\"Yield (name, bf) pairs, where bf is a BoundField object.\"\"\""
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "-",
                                "# Use the BoundField's initial as this is the value passed to"
                            ],
                            [
                                "+",
                                "def _bound_items(self):"
                            ],
                            [
                                "+",
                                "for name in self.fields:"
                            ],
                            [
                                "-",
                                "if not field.show_hidden_initial:"
                            ],
                            [
                                "+",
                                "\"\"\"Yield the form's fields as BoundField objects.\"\"\""
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "for name, field in self.fields.items():"
                            ],
                            [
                                "-",
                                "continue"
                            ],
                            [
                                "-",
                                "return data"
                            ],
                            [
                                "-",
                                "data.append(name)"
                            ],
                            [
                                "-",
                                "hidden_widget = field.hidden_widget()"
                            ],
                            [
                                "-",
                                "initial = self.get_initial_for_field(field, name)"
                            ],
                            [
                                "-",
                                "data = []"
                            ],
                            [
                                "+",
                                "yield name, self[name]"
                            ],
                            [
                                "+",
                                "field = bf.field"
                            ],
                            [
                                "+",
                                "for name, bf in self._bound_items():"
                            ],
                            [
                                "+",
                                "value = bf.initial if field.disabled else bf.data"
                            ],
                            [
                                "-",
                                "def _field_data_value(self, field, html_name):"
                            ],
                            [
                                "-",
                                "try:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 59,
                        "covered": 6,
                        "percentage": 10.16949152542373
                    }
                }
            }
        },
        "django__django-14672": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/reverse_related.py": [
                            "def __init__(self, field, to, related_name=None, related_query_name=None,"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/reverse_related.py": [
                            [
                                "-",
                                "self.through_fields,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-14725": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/models.py": [
                            "def modelformset_factory(model, form=ModelForm, formfield_callback=None,",
                            "def save_m2m():",
                            "def inlineformset_factory(parent_model, model, form=ModelForm,"
                        ]
                    },
                    "lines": {
                        "django/forms/models.py": [
                            [
                                "+",
                                "absolute_max=None, can_delete_extra=True, renderer=None,"
                            ],
                            [
                                "+",
                                "return self.save_existing_objects(commit)"
                            ],
                            [
                                "+",
                                "if self.edit_only:"
                            ],
                            [
                                "-",
                                "return self.save_existing_objects(commit) + self.save_new_objects(commit)"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "'edit_only': edit_only,"
                            ],
                            [
                                "+",
                                "FormSet.edit_only = edit_only"
                            ],
                            [
                                "+",
                                "edit_only=False):"
                            ],
                            [
                                "+",
                                "return self.save_existing_objects(commit) + self.save_new_objects(commit)"
                            ],
                            [
                                "-",
                                "absolute_max=None, can_delete_extra=True, renderer=None):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14752": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/views/autocomplete.py": [
                            "def get(self, request, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/views/autocomplete.py": [
                            [
                                "+",
                                "Convert the provided model object to a dictionary that is added to the"
                            ],
                            [
                                "+",
                                "def serialize_result(self, obj, to_field_name):"
                            ],
                            [
                                "+",
                                "return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}"
                            ],
                            [
                                "+",
                                "serialize_result(), by default:"
                            ],
                            [
                                "+",
                                "results list."
                            ],
                            [
                                "+",
                                "Return a JsonResponse with search results as defined in"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 5,
                        "percentage": 45.45454545454545
                    }
                }
            }
        },
        "django__django-14765": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/db/migrations/state.py": [
                            [
                                "+",
                                "real_apps = set()"
                            ],
                            [
                                "+",
                                "assert isinstance(real_apps, set)"
                            ],
                            [
                                "+",
                                "if real_apps is None:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 4,
                        "percentage": 57.14285714285714
                    }
                }
            }
        },
        "django__django-14771": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/autoreload.py": [
                            [
                                "+",
                                "if sys.implementation.name == 'cpython':"
                            ],
                            [
                                "+",
                                "for key, value in sys._xoptions.items()"
                            ],
                            [
                                "+",
                                "args.extend("
                            ],
                            [
                                "+",
                                "f'-X{key}' if value is True else f'-X{key}={value}'"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-14787": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/utils/decorators.py": [
                            "def _wrapper(self, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/utils/decorators.py": [
                            [
                                "+",
                                "bound_method = wraps(method)(partial(method.__get__(self, type(self))))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-14792": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/timezone.py": [
                            [
                                "+",
                                "Return the offset for fixed offset timezones, or the name of timezone if"
                            ],
                            [
                                "-",
                                "return str(timezone)"
                            ],
                            [
                                "+",
                                "not set."
                            ],
                            [
                                "+",
                                "return timezone.tzname(None) or str(timezone)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 2,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-14855": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/helpers.py": [
                            "def get_admin_url(self, remote_field, remote_obj):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/helpers.py": [
                            [
                                "+",
                                "url = reverse("
                            ],
                            [
                                "+",
                                "url_name,"
                            ],
                            [
                                "+",
                                "args=[quote(remote_obj.pk)],"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "current_app=self.model_admin.admin_site.name,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "django__django-14915": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/forms/models.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14999": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/operations/models.py": [
                            "def database_forwards(self, app_label, schema_editor, from_state, to_state):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/operations/models.py": [
                            [
                                "+",
                                "new_db_table = new_model._meta.db_table"
                            ],
                            [
                                "-",
                                "new_model._meta.db_table,"
                            ],
                            [
                                "-",
                                "new_model,"
                            ],
                            [
                                "+",
                                "if old_db_table == new_db_table:"
                            ],
                            [
                                "+",
                                "return"
                            ],
                            [
                                "-",
                                "schema_editor.alter_db_table("
                            ],
                            [
                                "-",
                                "old_model._meta.db_table,"
                            ],
                            [
                                "+",
                                "old_db_table = old_model._meta.db_table"
                            ],
                            [
                                "+",
                                "# Don't alter when a table name is not changed."
                            ],
                            [
                                "+",
                                "schema_editor.alter_db_table(new_model, old_db_table, new_db_table)"
                            ],
                            [
                                "-",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15022": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/options.py": [
                            "def construct_search(field_name):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/options.py": [
                            [
                                "+",
                                "term_queries = []"
                            ],
                            [
                                "+",
                                "term_queries.append(or_queries)"
                            ],
                            [
                                "+",
                                "queryset = queryset.filter(models.Q(*term_queries))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-15037": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/commands/inspectdb.py": [
                            "def table2model(table_name):"
                        ]
                    },
                    "lines": {
                        "django/core/management/commands/inspectdb.py": [
                            [
                                "+",
                                "ref_pk_column = connection.introspection.get_primary_key_column(cursor, ref_db_table)"
                            ],
                            [
                                "+",
                                "if ref_pk_column and ref_pk_column != ref_db_column:"
                            ],
                            [
                                "+",
                                "ref_db_column, ref_db_table = relations[column_name]"
                            ],
                            [
                                "+",
                                "'self' if ref_db_table == table_name"
                            ],
                            [
                                "+",
                                "else table2model(ref_db_table)"
                            ],
                            [
                                "+",
                                "extra_params['to_field'] = ref_db_column"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 2,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-15098": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/translation/trans_real.py": [
                            [
                                "-",
                                "language_code_prefix_re = _lazy_re_compile(r'^/(\\w+([@-]\\w+)?)(/|$)')"
                            ],
                            [
                                "+",
                                "language_code_prefix_re = _lazy_re_compile(r'^/(\\w+([@-]\\w+){0,2})(/|$)')"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 100
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15103": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/utils/html.py"
                    ],
                    "functions": {},
                    "lines": {
                        "django/template/defaultfilters.py": [
                            [
                                "+",
                                "tag (with an optional id)."
                            ],
                            [
                                "-",
                                "tag."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 17,
                        "covered": 2,
                        "percentage": 11.76470588235294
                    }
                }
            }
        },
        "django__django-15104": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/autodetector.py": [
                            "def only_relation_agnostic_fields(self, fields):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15127": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/messages/apps.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 100
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15128": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def combine(self, rhs, connector):",
                            "def change_aliases(self, change_map):",
                            "def prefix_gen():"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "-",
                                "if self.alias_prefix != outer_query.alias_prefix:"
                            ],
                            [
                                "-",
                                "# table on both sides."
                            ],
                            [
                                "-",
                                "# Base table must be present in the query - this is the same"
                            ],
                            [
                                "-",
                                "that the outer query's aliases and this query's aliases will not"
                            ],
                            [
                                "-",
                                "after this call."
                            ],
                            [
                                "+",
                                "# as T4 -> T6 while combining two querysets. To prevent this, change an"
                            ],
                            [
                                "+",
                                "# except if the alias is the base table since it must be present in the"
                            ],
                            [
                                "-",
                                "outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)"
                            ],
                            [
                                "+",
                                "# updated twice (e.g. T4 -> T5, T5 -> T6, so also T4 -> T6) depending"
                            ],
                            [
                                "-",
                                "self.get_initial_alias()"
                            ],
                            [
                                "+",
                                "rhs.bump_prefix(self, exclude={initial_alias})"
                            ],
                            [
                                "+",
                                "# If lhs and rhs shares the same alias prefix, it is possible to have"
                            ],
                            [
                                "+",
                                "that the other query's aliases and this query's aliases will not"
                            ],
                            [
                                "+",
                                "# query on both sides."
                            ],
                            [
                                "+",
                                "# alias prefix of the rhs and update current aliases accordingly,"
                            ],
                            [
                                "+",
                                "if alias not in exclude"
                            ],
                            [
                                "+",
                                "after this call. To prevent changing aliases use the exclude parameter."
                            ],
                            [
                                "+",
                                "if exclude is None:"
                            ],
                            [
                                "+",
                                "initial_alias = self.get_initial_alias()"
                            ],
                            [
                                "+",
                                "# on their order in change_map."
                            ],
                            [
                                "+",
                                "exclude = {}"
                            ],
                            [
                                "+",
                                "# If keys and values of change_map were to intersect, an alias might be"
                            ],
                            [
                                "+",
                                "other_query.subq_aliases = other_query.subq_aliases.union(self.subq_aliases)"
                            ],
                            [
                                "+",
                                "if self.alias_prefix != other_query.alias_prefix:"
                            ],
                            [
                                "+",
                                "def bump_prefix(self, other_query, exclude=None):"
                            ],
                            [
                                "-",
                                "def bump_prefix(self, outer_query):"
                            ],
                            [
                                "+",
                                "# conflicting alias changes like T4 -> T5, T5 -> T6, which might end up"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 28,
                        "covered": 1,
                        "percentage": 3.571428571428571
                    }
                }
            }
        },
        "django__django-15161": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/expressions.py": [
                            "def as_sql(self, *args, **kwargs):",
                            "def select_format(self, compiler, sql, params):",
                            "def relabeled_clone(self, relabels):",
                            "def copy(self):",
                            "def __repr__(self):",
                            "def get_group_by_cols(self, alias=None):"
                        ]
                    },
                    "lines": {
                        "django/db/models/expressions.py": [
                            [
                                "+",
                                "@deconstructible(path='django.db.models.Func')"
                            ],
                            [
                                "+",
                                "@deconstructible(path='django.db.models.Case')"
                            ],
                            [
                                "+",
                                "@deconstructible(path='django.db.models.Value')"
                            ],
                            [
                                "+",
                                "@deconstructible(path='django.db.models.OrderBy')"
                            ],
                            [
                                "+",
                                "@deconstructible(path='django.db.models.ExpressionWrapper')"
                            ],
                            [
                                "+",
                                "@deconstructible(path='django.db.models.When')"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15252": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/executor.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15268": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/operations/models.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15277": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15278": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/sqlite3/schema.py": [
                            "def delete_model(self, model, handle_autom2m=True):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/sqlite3/schema.py": [
                            [
                                "+",
                                "# ADD COLUMN."
                            ],
                            [
                                "+",
                                "# Primary keys and unique fields are not supported in ALTER TABLE"
                            ],
                            [
                                "+",
                                "not field.null or self.effective_default(field) is not None"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "if ("
                            ],
                            [
                                "+",
                                "field.primary_key or field.unique or"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 7,
                        "percentage": 53.84615384615385
                    }
                }
            }
        },
        "django__django-15280": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/related_descriptors.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15315": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/__init__.py": [
                            "def __lt__(self, other):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/__init__.py": [
                            [
                                "-",
                                "self.model._meta.app_label if hasattr(self, 'model') else None,"
                            ],
                            [
                                "-",
                                "))"
                            ],
                            [
                                "-",
                                "self.model._meta.model_name if hasattr(self, 'model') else None,"
                            ],
                            [
                                "-",
                                "self.creation_counter,"
                            ],
                            [
                                "+",
                                "return hash(self.creation_counter)"
                            ],
                            [
                                "-",
                                "return hash(("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15368": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/query.py": [
                            "def bulk_update(self, objs, fields, batch_size=None):"
                        ]
                    },
                    "lines": {
                        "django/db/models/query.py": [
                            [
                                "-",
                                "from django.db.models.expressions import Case, Expression, F, Ref, Value, When"
                            ],
                            [
                                "+",
                                "if not hasattr(attr, 'resolve_expression'):"
                            ],
                            [
                                "+",
                                "from django.db.models.expressions import Case, F, Ref, Value, When"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-15375": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/aggregates.py": [
                            "def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize"
                        ]
                    },
                    "lines": {
                        "django/db/models/aggregates.py": [
                            [
                                "+",
                                "coalesce.is_summary = c.is_summary"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 3,
                        "percentage": 75.0
                    }
                }
            }
        },
        "django__django-15380": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/autodetector.py": [
                            "def generate_renamed_fields(self):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15382": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/expressions.py": [
                            "def __invert__(self):"
                        ]
                    },
                    "lines": {
                        "django/db/models/expressions.py": [
                            [
                                "+",
                                "query=query,"
                            ],
                            [
                                "+",
                                "sql, params = super().as_sql("
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "+",
                                "compiler,"
                            ],
                            [
                                "+",
                                "return '', ()"
                            ],
                            [
                                "+",
                                "**extra_context,"
                            ],
                            [
                                "+",
                                "connection,"
                            ],
                            [
                                "+",
                                "template=template,"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "if self.negated:"
                            ],
                            [
                                "+",
                                "raise"
                            ],
                            [
                                "+",
                                "except EmptyResultSet:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 19,
                        "covered": 7,
                        "percentage": 36.84210526315789
                    }
                }
            }
        },
        "django__django-15467": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/options.py": [
                            "def formfield_for_foreignkey(self, db_field, request, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/options.py": [
                            [
                                "+",
                                ")"
                            ],
                            [
                                "-",
                                "kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None"
                            ],
                            [
                                "+",
                                "kwargs.get(\"empty_label\", _(\"None\")) if db_field.blank else None"
                            ],
                            [
                                "+",
                                "kwargs[\"empty_label\"] = ("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15499": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/operations/models.py": [
                            "def reduce(self, operation, app_label):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/operations/models.py": [
                            [
                                "+",
                                "CreateModel("
                            ],
                            [
                                "+",
                                "self.name,"
                            ],
                            [
                                "+",
                                "fields=self.fields,"
                            ],
                            [
                                "+",
                                "elif ("
                            ],
                            [
                                "+",
                                "isinstance(operation, AlterModelManagers)"
                            ],
                            [
                                "+",
                                "return ["
                            ],
                            [
                                "+",
                                "bases=self.bases,"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "),"
                            ],
                            [
                                "+",
                                "and self.name_lower == operation.name_lower"
                            ],
                            [
                                "+",
                                "options=self.options,"
                            ],
                            [
                                "+",
                                "managers=operation.managers,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 1,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "django__django-15503": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/json.py": [
                            "def as_oracle(self, compiler, connection):",
                            "def as_sql(self, compiler, connection):",
                            "def as_sqlite(self, compiler, connection):",
                            "class HasAnyKeys(HasKeys):",
                            "def as_sql(self, compiler, connection, template=None):",
                            "def __init__(self, key_transform, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/json.py": [
                            [
                                "-",
                                "% ("
                            ],
                            [
                                "+",
                                "def compile_json_path_final_key(self, key_transform):"
                            ],
                            [
                                "+",
                                "# Compile the final key without interpreting ints as array elements."
                            ],
                            [
                                "-",
                                "return HasKey(self.lhs.lhs, self.lhs.key_name).as_sql("
                            ],
                            [
                                "-",
                                "rhs_params.append("
                            ],
                            [
                                "+",
                                "has_key_expr = HasKeyOrArrayIndex(self.lhs.lhs, self.lhs.key_name)"
                            ],
                            [
                                "+",
                                "rhs_params.append(lhs_json_path + rhs_json_path)"
                            ],
                            [
                                "-",
                                "compile_json_path(rhs_key_transforms, include_root=False),"
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "-",
                                "lhs_json_path,"
                            ],
                            [
                                "+",
                                "*rhs_key_transforms, final_key = rhs_key_transforms"
                            ],
                            [
                                "+",
                                "return compile_json_path([key_transform], include_root=False)"
                            ],
                            [
                                "+",
                                "rhs_json_path = compile_json_path(rhs_key_transforms, include_root=False)"
                            ],
                            [
                                "-",
                                "\"%s%s\""
                            ],
                            [
                                "+",
                                "rhs_json_path += self.compile_json_path_final_key(final_key)"
                            ],
                            [
                                "-",
                                "sql, params = HasKey("
                            ],
                            [
                                "-",
                                "has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)"
                            ],
                            [
                                "+",
                                "return \".%s\" % json.dumps(key_transform)"
                            ],
                            [
                                "+",
                                "sql, params = HasKeyOrArrayIndex("
                            ],
                            [
                                "+",
                                "class HasKeyOrArrayIndex(HasKey):"
                            ],
                            [
                                "+",
                                "return HasKeyOrArrayIndex(self.lhs.lhs, self.lhs.key_name).as_sql("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 1,
                        "percentage": 4.545454545454546
                    }
                }
            }
        },
        "django__django-15525": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/core/serializers/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15554": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def join(self, join, reuse=None):",
                            "def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):",
                            "def build_filter(",
                            "def build_filtered_relation_q(",
                            "def count_active_tables(self):",
                            "def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True):",
                            "def transform(field, alias, *, name, previous):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "-",
                                "if (reuse is None or a in reuse) and j.equals(join)"
                            ],
                            [
                                "+",
                                "self,"
                            ],
                            [
                                "-",
                                "a"
                            ],
                            [
                                "+",
                                "opts,"
                            ],
                            [
                                "+",
                                "parameter and force the relation on the given connections."
                            ],
                            [
                                "+",
                                "reuse_with_filtered_relation=reuse_with_filtered_relation,"
                            ],
                            [
                                "+",
                                "The 'reuse_with_filtered_relation' parameter is used when computing"
                            ],
                            [
                                "+",
                                "names,"
                            ],
                            [
                                "+",
                                "for a, j in self.alias_map.items()"
                            ],
                            [
                                "+",
                                "if (reuse is None or a in reuse) and j == join"
                            ],
                            [
                                "+",
                                "def setup_joins("
                            ],
                            [
                                "+",
                                "will be reused."
                            ],
                            [
                                "+",
                                "The 'reuse_with_filtered_relation' can be used to force 'can_reuse'"
                            ],
                            [
                                "+",
                                "a"
                            ],
                            [
                                "+",
                                "reuse_with_filtered_relation=True,"
                            ],
                            [
                                "-",
                                "def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True):"
                            ],
                            [
                                "+",
                                "connection,"
                            ],
                            [
                                "-",
                                "reuse_aliases = ["
                            ],
                            [
                                "+",
                                "If 'reuse_with_filtered_relation' is True, then only joins in can_reuse"
                            ],
                            [
                                "+",
                                "alias,"
                            ],
                            [
                                "+",
                                "reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "FilteredRelation instances."
                            ],
                            [
                                "+",
                                "alias = self.join("
                            ],
                            [
                                "+",
                                "can_reuse=None,"
                            ],
                            [
                                "+",
                                "if reuse_with_filtered_relation and reuse:"
                            ],
                            [
                                "-",
                                "alias = self.join(connection, reuse=reuse)"
                            ],
                            [
                                "-",
                                "]"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "-",
                                "def join(self, join, reuse=None):"
                            ],
                            [
                                "+",
                                "def join(self, join, reuse=None, reuse_with_filtered_relation=False):"
                            ],
                            [
                                "+",
                                "reuse_aliases = ["
                            ],
                            [
                                "-",
                                "reuse = can_reuse if join.m2m else None"
                            ],
                            [
                                "+",
                                "allow_many=True,"
                            ],
                            [
                                "+",
                                "a for a, j in self.alias_map.items() if a in reuse and j.equals(join)"
                            ],
                            [
                                "+",
                                "reuse_with_filtered_relation=False,"
                            ],
                            [
                                "-",
                                "for a, j in self.alias_map.items()"
                            ],
                            [
                                "+",
                                "]"
                            ],
                            [
                                "+",
                                "reuse=reuse,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 41,
                        "covered": 1,
                        "percentage": 2.4390243902439024
                    }
                }
            }
        },
        "django__django-15561": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {
                        "django/db/backends/base/schema.py": [
                            "def _field_should_be_altered(self, old_field, new_field):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/base/schema.py": [
                            [
                                "+",
                                "for attr in new_field.non_db_attrs:"
                            ],
                            [
                                "+",
                                "for attr in old_field.non_db_attrs:"
                            ],
                            [
                                "-",
                                "for attr in non_database_attrs:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 35,
                        "covered": 14,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-15563": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/compiler.py",
                        "django/db/models/sql/subqueries.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15569": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/query_utils.py": [
                            "def _unregister_lookup(cls, lookup, lookup_name=None):"
                        ]
                    },
                    "lines": {
                        "django/db/models/query_utils.py": [
                            [
                                "+",
                                "cls._clear_cached_lookups()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15572": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/template/autoreload.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15629": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/base/schema.py",
                        "django/db/backends/oracle/features.py",
                        "django/db/backends/sqlite3/schema.py",
                        "django/db/models/fields/related.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 41,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15695": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/operations/models.py": [
                            "def database_forwards(self, app_label, schema_editor, from_state, to_state):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/operations/models.py": [
                            [
                                "+",
                                "# Don't alter when the index name is not changed."
                            ],
                            [
                                "+",
                                "return"
                            ],
                            [
                                "+",
                                "if old_index.name == self.new_name:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15731": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/manager.py": [
                            "def check(self, **kwargs):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 4,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15732": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/base/schema.py": [
                            "def create_unique_name(*args, **kwargs):",
                            "def alter_unique_together(self, model, old_unique_together, new_unique_together)",
                            "def _delete_composed_index(self, model, fields, constraint_kwargs, sql):",
                            "def _create_unique_sql("
                        ]
                    },
                    "lines": {
                        "django/db/backends/base/schema.py": [
                            [
                                "+",
                                "self._unique_constraint_name(model._meta.db_table, columns, quote=False)"
                            ],
                            [
                                "+",
                                "if default_name in constraint_names:"
                            ],
                            [
                                "+",
                                "def create_unique_name(*args, **kwargs):"
                            ],
                            [
                                "+",
                                "create_unique_name = self._create_index_name"
                            ],
                            [
                                "+",
                                "# Constraint matching the unique_together name."
                            ],
                            [
                                "+",
                                "fields,"
                            ],
                            [
                                "+",
                                "{\"unique\": True, \"primary_key\": False},"
                            ],
                            [
                                "+",
                                "name = self._unique_constraint_name(table, columns, quote=True)"
                            ],
                            [
                                "+",
                                "constraint_kwargs.get(\"unique\") is True"
                            ],
                            [
                                "+",
                                "def _unique_constraint_name(self, table, columns, quote=True):"
                            ],
                            [
                                "+",
                                "return IndexName(table, columns, \"_uniq\", create_unique_name)"
                            ],
                            [
                                "-",
                                "model, fields, {\"unique\": True}, self.sql_delete_unique"
                            ],
                            [
                                "-",
                                "return self.quote_name(self._create_index_name(*args, **kwargs))"
                            ],
                            [
                                "+",
                                "and self.connection.features.allows_multiple_constraints_on_same_fields"
                            ],
                            [
                                "+",
                                "default_name = str("
                            ],
                            [
                                "+",
                                "and constraint_names"
                            ],
                            [
                                "-",
                                "name = IndexName(table, columns, \"_uniq\", create_unique_name)"
                            ],
                            [
                                "+",
                                "if quote:"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "if ("
                            ],
                            [
                                "+",
                                "self.sql_delete_unique,"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "return self.quote_name(self._create_index_name(*args, **kwargs))"
                            ],
                            [
                                "-",
                                "def create_unique_name(*args, **kwargs):"
                            ],
                            [
                                "+",
                                "constraint_names = [default_name]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 29,
                        "covered": 3,
                        "percentage": 10.344827586206897
                    }
                }
            }
        },
        "django__django-15741": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/formats.py": [
                            [
                                "+",
                                "format_type = str(format_type)  # format_type may be lazy."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15814": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def deferred_to_data(self, target):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "+",
                                "cur_model = cur_model._meta.concrete_model"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15851": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/postgresql/client.py": [
                            "def settings_to_cmd_args_env(cls, settings_dict, parameters):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15863": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/template/defaultfilters.py": [
                            [
                                "+",
                                "input_val = str(text)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-15916": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/models.py": [
                            "def __new__(mcs, name, bases, attrs):",
                            "def __init__(self, options=None):"
                        ]
                    },
                    "lines": {
                        "django/forms/models.py": [
                            [
                                "-",
                                "break"
                            ],
                            [
                                "-",
                                "formfield_callback,"
                            ],
                            [
                                "-",
                                "for b in bases:"
                            ],
                            [
                                "+",
                                "self.formfield_callback = getattr(options, \"formfield_callback\", None)"
                            ],
                            [
                                "-",
                                "if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):"
                            ],
                            [
                                "-",
                                "base_formfield_callback = None"
                            ],
                            [
                                "-",
                                "formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)"
                            ],
                            [
                                "+",
                                "opts.formfield_callback,"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "base_formfield_callback = b.Meta.formfield_callback"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 12,
                        "covered": 2,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "django__django-15930": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/expressions.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15957": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/related_descriptors.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 32,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15973": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/autodetector.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15987": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/commands/loaddata.py": [
                            "def fixture_dirs(self):"
                        ]
                    },
                    "lines": {
                        "django/core/management/commands/loaddata.py": [
                            [
                                "+",
                                "if app_dir in [str(d) for d in fixture_dirs]:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-16032": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/related_lookups.py",
                        "django/db/models/sql/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16082": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/expressions.py": [
                            "def __hash__(self):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-16100": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/options.py": [
                            "def changelist_view(self, request, extra_context=None):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/options.py": [
                            [
                                "+",
                                "with transaction.atomic(using=router.db_for_write(self.model)):"
                            ],
                            [
                                "+",
                                "change_msg = self.construct_change_message("
                            ],
                            [
                                "+",
                                "request, form, None"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 17,
                        "percentage": 85.0
                    }
                }
            }
        },
        "django__django-16116": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/commands/makemigrations.py": [
                            "def handle(self, *app_labels, **options):",
                            "def add_arguments(self, parser):"
                        ]
                    },
                    "lines": {
                        "django/core/management/commands/makemigrations.py": [
                            [
                                "-",
                                "help=\"Exit with a non-zero status if model changes are missing migrations.\","
                            ],
                            [
                                "+",
                                "help=("
                            ],
                            [
                                "+",
                                "\"Exit with a non-zero status if model changes are missing migrations \""
                            ],
                            [
                                "+",
                                "\"and don't actually write them.\""
                            ],
                            [
                                "+",
                                "),"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 4,
                        "percentage": 44.44444444444444
                    }
                }
            }
        },
        "django__django-16136": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/views/generic/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16139": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/auth/forms.py": [
                            "def __init__(self, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/contrib/auth/forms.py": [
                            [
                                "+",
                                "f\"../../{self.instance.pk}/password/\""
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "password.help_text = password.help_text.format("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-16145": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/commands/runserver.py": [
                            "def inner_run(self, *args, **options):"
                        ]
                    },
                    "lines": {
                        "django/core/management/commands/runserver.py": [
                            [
                                "+",
                                "addr = self.addr"
                            ],
                            [
                                "-",
                                "\"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else self.addr,"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "addr = f\"[{self.addr}]\""
                            ],
                            [
                                "+",
                                "addr = \"0.0.0.0\""
                            ],
                            [
                                "+",
                                "if self._raw_ipv6:"
                            ],
                            [
                                "+",
                                "elif self.addr == \"0\":"
                            ],
                            [
                                "+",
                                "\"addr\": addr,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 1,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "django__django-16255": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/sitemaps/__init__.py": [
                            "def get_latest_lastmod(self):"
                        ]
                    },
                    "lines": {
                        "django/contrib/sitemaps/__init__.py": [
                            [
                                "-",
                                "return max([self.lastmod(item) for item in self.items()])"
                            ],
                            [
                                "+",
                                "return max([self.lastmod(item) for item in self.items()], default=None)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16256": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/contenttypes/fields.py"
                    ],
                    "functions": {
                        "django/db/models/fields/related_descriptors.py": [
                            "def create(self, **kwargs):",
                            "def update_or_create(self, *, through_defaults=None, **kwargs):",
                            "def get_or_create(self, **kwargs):",
                            "class Child(Model):",
                            "def update_or_create(self, **kwargs):",
                            "def create(self, *, through_defaults=None, **kwargs):",
                            "def get_or_create(self, *, through_defaults=None, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/related_descriptors.py": [
                            [
                                "+",
                                "return await sync_to_async(self.create)("
                            ],
                            [
                                "+",
                                "aget_or_create.alters_data = True"
                            ],
                            [
                                "+",
                                "async def aupdate_or_create(self, **kwargs):"
                            ],
                            [
                                "+",
                                "from asgiref.sync import sync_to_async"
                            ],
                            [
                                "+",
                                "return await sync_to_async(self.update_or_create)("
                            ],
                            [
                                "+",
                                "return await sync_to_async(self.create)(**kwargs)"
                            ],
                            [
                                "+",
                                "aupdate_or_create.alters_data = True"
                            ],
                            [
                                "+",
                                "acreate.alters_data = True"
                            ],
                            [
                                "+",
                                "async def aget_or_create(self, **kwargs):"
                            ],
                            [
                                "+",
                                "return await sync_to_async(self.get_or_create)(**kwargs)"
                            ],
                            [
                                "+",
                                "return await sync_to_async(self.get_or_create)("
                            ],
                            [
                                "+",
                                "async def aget_or_create(self, *, through_defaults=None, **kwargs):"
                            ],
                            [
                                "+",
                                "async def acreate(self, **kwargs):"
                            ],
                            [
                                "+",
                                "return await sync_to_async(self.update_or_create)(**kwargs)"
                            ],
                            [
                                "+",
                                "async def aupdate_or_create(self, *, through_defaults=None, **kwargs):"
                            ],
                            [
                                "+",
                                "through_defaults=through_defaults, **kwargs"
                            ],
                            [
                                "+",
                                "async def acreate(self, *, through_defaults=None, **kwargs):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 30,
                        "covered": 2,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "django__django-16263": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/expressions.py",
                        "django/db/models/query_utils.py",
                        "django/db/models/sql/where.py"
                    ],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def build_filter(",
                            "def resolve_lookup_value(self, value, can_reuse, allow_joins):",
                            "def _add_q(",
                            "def get_aggregation(self, using, added_aggregate_names):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "+",
                                ") or any(self.where.split_having_qualify()[1:])"
                            ],
                            [
                                "+",
                                "if summarize:"
                            ],
                            [
                                "+",
                                "for alias, annotation in self.annotation_select.items()"
                            ],
                            [
                                "-",
                                "has_existing_aggregate_annotations = any("
                            ],
                            [
                                "+",
                                "Ref(alias, annotation): annotation"
                            ],
                            [
                                "-",
                                "existing_annotations = ["
                            ],
                            [
                                "-",
                                "def solve_lookup_type(self, lookup):"
                            ],
                            [
                                "+",
                                "if annotation:"
                            ],
                            [
                                "+",
                                "# selected aggregate and window annotations but also by filters against"
                            ],
                            [
                                "+",
                                "# are requested."
                            ],
                            [
                                "+",
                                "for alias, annotation in existing_annotations.items()"
                            ],
                            [
                                "-",
                                "if expression:"
                            ],
                            [
                                "+",
                                "annotation_mask.add(name)"
                            ],
                            [
                                "+",
                                "alias: annotation"
                            ],
                            [
                                "+",
                                "expression = self.annotations[annotation]"
                            ],
                            [
                                "-",
                                "for annotation in existing_annotations"
                            ],
                            [
                                "+",
                                "or getattr(annotation, \"contains_over_clause\", True)"
                            ],
                            [
                                "+",
                                "}"
                            ],
                            [
                                "+",
                                "summarize=False,"
                            ],
                            [
                                "-",
                                "# must produce just one result and thus must not use GROUP BY. But we"
                            ],
                            [
                                "+",
                                "annotation, expression_lookups = refs_expression("
                            ],
                            [
                                "+",
                                "condition = filter_expr.resolve_expression("
                            ],
                            [
                                "+",
                                "# Existing usage of aggregation can be determined by the presence of"
                            ],
                            [
                                "-",
                                "or existing_annotations"
                            ],
                            [
                                "+",
                                "for name in added_aggregate_names:"
                            ],
                            [
                                "+",
                                "self, allow_joins=allow_joins, summarize=summarize"
                            ],
                            [
                                "+",
                                "# aliased aggregate and windows via HAVING / QUALIFY."
                            ],
                            [
                                "+",
                                "# aggregates to be pushed to the outer query."
                            ],
                            [
                                "+",
                                "replacements = {"
                            ],
                            [
                                "+",
                                "# GROUP BY."
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "+",
                                "if existing_annotations:"
                            ],
                            [
                                "+",
                                "annotation_mask = set()"
                            ],
                            [
                                "-",
                                "annotation"
                            ],
                            [
                                "+",
                                "# get_aggregation() must produce just one result and thus must not use"
                            ],
                            [
                                "-",
                                "if getattr(annotation, \"contains_aggregate\", True)"
                            ],
                            [
                                "+",
                                "or has_existing_aggregation"
                            ],
                            [
                                "+",
                                "self.set_annotation_mask(added_aggregate_names)"
                            ],
                            [
                                "-",
                                "expression, expression_lookups = refs_expression("
                            ],
                            [
                                "+",
                                "replacements"
                            ],
                            [
                                "+",
                                "def solve_lookup_type(self, lookup, summarize=False):"
                            ],
                            [
                                "+",
                                "inner_query.set_annotation_mask(annotation_mask)"
                            ],
                            [
                                "-",
                                "lookups, parts, reffed_expression = self.solve_lookup_type(arg)"
                            ],
                            [
                                "+",
                                "has_existing_aggregation = any("
                            ],
                            [
                                "+",
                                "if inner_query.default_cols and has_existing_aggregation:"
                            ],
                            [
                                "+",
                                "lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)"
                            ],
                            [
                                "-",
                                "if inner_query.default_cols and has_existing_aggregate_annotations:"
                            ],
                            [
                                "+",
                                "# they are unnecessary given only the summarized aggregations"
                            ],
                            [
                                "-",
                                "]"
                            ],
                            [
                                "+",
                                "annotation_mask |= inner_query.annotations[name].get_refs()"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "summarize=summarize,"
                            ],
                            [
                                "+",
                                "for annotation in existing_annotations.values()"
                            ],
                            [
                                "+",
                                "self.annotations[name] = self.annotations[name].replace_expressions("
                            ],
                            [
                                "+",
                                "# Existing aggregations would cause incorrect results as"
                            ],
                            [
                                "+",
                                "existing_annotations = {"
                            ],
                            [
                                "-",
                                "for alias, annotation in self.annotations.items()"
                            ],
                            [
                                "+",
                                "getattr(annotation, \"contains_aggregate\", True)"
                            ],
                            [
                                "+",
                                "# Inline reference to existing annotations and mask them as"
                            ],
                            [
                                "-",
                                "condition = filter_expr.resolve_expression(self, allow_joins=allow_joins)"
                            ],
                            [
                                "+",
                                "# Mask existing annotations that are not referenced by"
                            ],
                            [
                                "-",
                                "# Existing annotations would cause incorrect results as get_aggregation()"
                            ],
                            [
                                "+",
                                "expression = Ref(annotation, expression)"
                            ],
                            [
                                "-",
                                "# aren't smart enough to remove the existing annotations from the"
                            ],
                            [
                                "-",
                                "# query, so those would force us to use GROUP BY."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "functions": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 85,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16315": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/query.py",
                        "django/db/models/sql/compiler.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16333": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/auth/forms.py": [
                            "def save(self, commit=True):"
                        ]
                    },
                    "lines": {
                        "django/contrib/auth/forms.py": [
                            [
                                "+",
                                "if hasattr(self, \"save_m2m\"):"
                            ],
                            [
                                "+",
                                "self.save_m2m()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16429": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/timesince.py": [
                            [
                                "+",
                                "tzinfo=d.tzinfo,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16454": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/base.py": [
                            "def error(self, message):"
                        ]
                    },
                    "lines": {
                        "django/core/management/base.py": [
                            [
                                "+",
                                "kwargs[\"parser_class\"] = partial("
                            ],
                            [
                                "+",
                                "return super().add_subparsers(**kwargs)"
                            ],
                            [
                                "+",
                                "if issubclass(parser_class, CommandParser):"
                            ],
                            [
                                "+",
                                "from functools import partial"
                            ],
                            [
                                "+",
                                "called_from_command_line=self.called_from_command_line,"
                            ],
                            [
                                "+",
                                "parser_class = kwargs.get(\"parser_class\", type(self))"
                            ],
                            [
                                "+",
                                "parser_class,"
                            ],
                            [
                                "+",
                                "def add_subparsers(self, **kwargs):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-16485": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/template/defaultfilters.py": [
                            [
                                "-",
                                "if not m and p < 0:"
                            ],
                            [
                                "+",
                                "if not m and p <= 0:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16493": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/files.py": [
                            "def deconstruct(self):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/files.py": [
                            [
                                "+",
                                "if storage is not default_storage:"
                            ],
                            [
                                "+",
                                "storage = getattr(self, \"_storage_callable\", self.storage)"
                            ],
                            [
                                "+",
                                "kwargs[\"storage\"] = storage"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-16502": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/core/servers/basehttp.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16527": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-16560": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/postgres/constraints.py"
                    ],
                    "functions": {
                        "django/db/models/constraints.py": [
                            "def __init__(self, *args, name=None, violation_error_message=None):",
                            "def clone(self):",
                            "def __eq__(self, other):",
                            "def remove_sql(self, model, schema_editor):",
                            "def deconstruct(self):",
                            "def __init__(",
                            "def __repr__(self):",
                            "def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):"
                        ]
                    },
                    "lines": {
                        "django/db/models/constraints.py": [
                            [
                                "+",
                                "if violation_error_code is not None:"
                            ],
                            [
                                "+",
                                "self.violation_error_code = violation_error_code"
                            ],
                            [
                                "+",
                                "if self.violation_error_code is not None:"
                            ],
                            [
                                "+",
                                "name=name,"
                            ],
                            [
                                "+",
                                "self.get_violation_error_message(),"
                            ],
                            [
                                "+",
                                "self.get_violation_error_message(), code=self.violation_error_code"
                            ],
                            [
                                "+",
                                "code=self.violation_error_code,"
                            ],
                            [
                                "+",
                                "#     self, *, name, violation_error_code=None, violation_error_message=None"
                            ],
                            [
                                "+",
                                "and self.violation_error_code == other.violation_error_code"
                            ],
                            [
                                "+",
                                "super().__init__("
                            ],
                            [
                                "+",
                                "self, *, check, name, violation_error_code=None, violation_error_message=None"
                            ],
                            [
                                "-",
                                "return \"<%s: check=%s name=%s%s>\" % ("
                            ],
                            [
                                "+",
                                "violation_error_code = None"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "violation_error_message=violation_error_message,"
                            ],
                            [
                                "+",
                                "return \"<%s: check=%s name=%s%s%s>\" % ("
                            ],
                            [
                                "+",
                                "violation_error_code=violation_error_code,"
                            ],
                            [
                                "-",
                                "# def __init__(self, *, name, violation_error_message=None):"
                            ],
                            [
                                "-",
                                "return \"<%s:%s%s%s%s%s%s%s%s>\" % ("
                            ],
                            [
                                "+",
                                "# ):"
                            ],
                            [
                                "+",
                                "else \" violation_error_code=%r\" % self.violation_error_code"
                            ],
                            [
                                "+",
                                "self, *args, name=None, violation_error_code=None, violation_error_message=None"
                            ],
                            [
                                "-",
                                "def __init__(self, *, check, name, violation_error_message=None):"
                            ],
                            [
                                "-",
                                "super().__init__(name=name, violation_error_message=violation_error_message)"
                            ],
                            [
                                "+",
                                "if self.violation_error_code is None"
                            ],
                            [
                                "+",
                                "\"\""
                            ],
                            [
                                "+",
                                "# def __init__("
                            ],
                            [
                                "+",
                                "kwargs[\"violation_error_code\"] = self.violation_error_code"
                            ],
                            [
                                "+",
                                "return \"<%s:%s%s%s%s%s%s%s%s%s>\" % ("
                            ],
                            [
                                "+",
                                "),"
                            ],
                            [
                                "+",
                                "violation_error_code=None,"
                            ],
                            [
                                "+",
                                "def __init__("
                            ],
                            [
                                "+",
                                "raise ValidationError("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 57,
                        "covered": 6,
                        "percentage": 10.526315789473683
                    }
                }
            }
        },
        "django__django-16569": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/formsets.py": [
                            "def add_fields(self, form, index):"
                        ]
                    },
                    "lines": {
                        "django/forms/formsets.py": [
                            [
                                "+",
                                "self.can_delete_extra or (index is not None and index < initial_form_count)"
                            ],
                            [
                                "+",
                                "if self.can_delete and ("
                            ],
                            [
                                "+",
                                "):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-16595": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/operations/fields.py": [
                            "def migration_name_fragment(self):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/operations/fields.py": [
                            [
                                "-",
                                "if isinstance(operation, RemoveField) and self.is_same_field_operation("
                            ],
                            [
                                "+",
                                "if isinstance("
                            ],
                            [
                                "+",
                                ") and self.is_same_field_operation(operation):"
                            ],
                            [
                                "-",
                                "):"
                            ],
                            [
                                "+",
                                "operation, (AlterField, RemoveField)"
                            ],
                            [
                                "-",
                                "operation"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16612": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/sites.py": [
                            "def catch_all_view(self, request, url):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/sites.py": [
                            [
                                "+",
                                "request.get_full_path(force_append_slash=True)"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "return HttpResponsePermanentRedirect("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-16631": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/auth/__init__.py"
                    ],
                    "functions": {
                        "django/contrib/auth/base_user.py": [
                            "def get_session_auth_hash(self):"
                        ]
                    },
                    "lines": {
                        "django/contrib/auth/base_user.py": [
                            [
                                "+",
                                "return self._get_session_auth_hash()"
                            ],
                            [
                                "+",
                                "secret=secret,"
                            ],
                            [
                                "+",
                                "for fallback_secret in settings.SECRET_KEY_FALLBACKS:"
                            ],
                            [
                                "+",
                                "yield self._get_session_auth_hash(secret=fallback_secret)"
                            ],
                            [
                                "+",
                                "from django.conf import settings"
                            ],
                            [
                                "+",
                                "def _get_session_auth_hash(self, secret=None):"
                            ],
                            [
                                "+",
                                "def get_session_auth_fallback_hash(self):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 31,
                        "covered": 1,
                        "percentage": 3.225806451612903
                    }
                }
            }
        },
        "django__django-16642": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/http/response.py": [
                            "def set_headers(self, filelike):"
                        ]
                    },
                    "lines": {
                        "django/http/response.py": [
                            [
                                "+",
                                "\"br\": \"application/x-brotli\","
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-16661": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/options.py": [
                            "def lookup_allowed(self, lookup, value):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/options.py": [
                            [
                                "+",
                                "and field is not model._meta.auto_field"
                            ],
                            [
                                "-",
                                "# model anyways. For example, if you filter on employee__department__id,"
                            ],
                            [
                                "+",
                                "model._meta.auto_field is None"
                            ],
                            [
                                "-",
                                "# then the id value would be found already from employee__department_id."
                            ],
                            [
                                "+",
                                "or part not in getattr(prev_field, \"to_fields\", [])"
                            ],
                            [
                                "-",
                                "# It is allowed to filter on values that would be found from local"
                            ],
                            [
                                "+",
                                "and ("
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "and field not in model._meta.parents.values()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 1,
                        "percentage": 10.0
                    }
                }
            }
        },
        "django__django-16662": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/writer.py": [
                            "def as_string(self):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/writer.py": [
                            [
                                "+",
                                "imports, key=lambda i: (i.split()[0] == \"from\", i.split()[1])"
                            ],
                            [
                                "+",
                                "sorted_imports = sorted("
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "# First group the \"import\" statements, then \"from ... import ...\"."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-16667": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/widgets.py": [
                            "def value_from_datadict(self, data, files, name):"
                        ]
                    },
                    "lines": {
                        "django/forms/widgets.py": [
                            [
                                "+",
                                "return \"0-0-0\""
                            ],
                            [
                                "+",
                                "except OverflowError:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16801": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/files.py": [
                            "def update_dimension_fields(self, instance, force=False, *args, **kwargs):",
                            "def contribute_to_class(self, cls, name, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/files.py": [
                            [
                                "-",
                                "has_dimension_fields = self.width_field or self.height_field"
                            ],
                            [
                                "-",
                                "# Nothing to update if the field doesn't have dimension fields or if"
                            ],
                            [
                                "-",
                                "# the field is deferred."
                            ],
                            [
                                "+",
                                "# with width_field/height_field."
                            ],
                            [
                                "-",
                                "if not has_dimension_fields or self.attname not in instance.__dict__:"
                            ],
                            [
                                "+",
                                "if self.attname not in instance.__dict__:"
                            ],
                            [
                                "+",
                                "# Nothing to update if the field is deferred."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "django__django-16819": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/operations/models.py": [
                            "def describe(self):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/operations/models.py": [
                            [
                                "+",
                                "def reduce(self, operation, app_label):"
                            ],
                            [
                                "+",
                                "if isinstance(operation, RemoveIndex) and self.index.name == operation.name:"
                            ],
                            [
                                "+",
                                "return []"
                            ],
                            [
                                "+",
                                "return super().reduce(operation, app_label)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-16877": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/template/defaultfilters.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16899": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/checks.py": [
                            "def _check_readonly_fields_item(self, obj, field_name, label):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/checks.py": [
                            [
                                "+",
                                "\"an attribute of '%s', or an attribute of '%s'.\""
                            ],
                            [
                                "+",
                                "\"The value of '%s' refers to '%s', which is not a callable, \""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 3,
                        "percentage": 60.0
                    }
                }
            }
        },
        "django__django-16901": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/where.py": [
                            "def as_sql(self, compiler, connection):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/where.py": [
                            [
                                "+",
                                "# are true."
                            ],
                            [
                                "+",
                                "#   (a OR b OR c OR ...) AND MOD(a + b + c + ..., 2) == 1"
                            ],
                            [
                                "+",
                                "# The result of an n-ary XOR is true when an odd number of operands"
                            ],
                            [
                                "+",
                                "rhs_sum = Mod(rhs_sum, 2)"
                            ],
                            [
                                "+",
                                "from django.db.models.functions import Mod"
                            ],
                            [
                                "+",
                                "if len(self.children) > 2:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "django__django-16938": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/core/serializers/python.py",
                        "django/core/serializers/xml_serializer.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16950": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/models.py": [
                            "def add_fields(self, form, index):"
                        ]
                    },
                    "lines": {
                        "django/forms/models.py": [
                            [
                                "+",
                                "# Don't ignore a parent's auto-generated key if it's not the"
                            ],
                            [
                                "+",
                                "if to_field.has_default() and ("
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "# parent model's pk and form data is provided."
                            ],
                            [
                                "-",
                                "if to_field.has_default():"
                            ],
                            [
                                "+",
                                "or not form.data"
                            ],
                            [
                                "+",
                                "to_field.attname == self.fk.remote_field.model._meta.pk.name"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 1,
                        "percentage": 12.5
                    }
                }
            }
        },
        "django__django-17029": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/apps/registry.py": [
                            "def clear_cache(self):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-17084": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-17087": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/serializer.py": [
                            "def serialize(self):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/serializer.py": [
                            [
                                "+",
                                "return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-7530": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/commands/makemigrations.py": [
                            "def handle(self, *app_labels, **options):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-9296": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/paginator.py": [
                            "def __init__(self, object_list, per_page, orphans=0,"
                        ]
                    },
                    "lines": {
                        "django/core/paginator.py": [
                            [
                                "+",
                                "for page_number in self.page_range:"
                            ],
                            [
                                "+",
                                "def __iter__(self):"
                            ],
                            [
                                "+",
                                "yield self.page(page_number)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-13989": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/axes/_axes.py": [
                            "def hist(self, x, bins=None, range=None, density=None, weights=None,"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/axes/_axes.py": [
                            [
                                "-",
                                "hist_kwargs = dict(density=density)"
                            ],
                            [
                                "+",
                                "hist_kwargs['density'] = density"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-14623": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/axes/_base.py",
                        "lib/matplotlib/ticker.py",
                        "lib/mpl_toolkits/mplot3d/axes3d.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-20488": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/image.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-20676": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/widgets.py": [
                            "def new_axes(self, ax):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/widgets.py": [
                            [
                                "+",
                                "positions = self.ax.get_ybound()"
                            ],
                            [
                                "-",
                                "self._edge_handles = ToolLineHandles(self.ax, self.extents,"
                            ],
                            [
                                "+",
                                "# Define initial position using the axis bounds to keep the same bounds"
                            ],
                            [
                                "+",
                                "positions = self.ax.get_xbound()"
                            ],
                            [
                                "+",
                                "self._edge_handles = ToolLineHandles(self.ax, positions,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "matplotlib__matplotlib-20826": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/axis.py": [
                            "def clear(self):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/axis.py": [
                            [
                                "+",
                                "# whether the grids are on"
                            ],
                            [
                                "+",
                                "mpl.rcParams['axes.grid.which'] in ('both', 'minor'))"
                            ],
                            [
                                "+",
                                "self._major_tick_kw['gridOn'] = ("
                            ],
                            [
                                "+",
                                "mpl.rcParams['axes.grid.which'] in ('both', 'major'))"
                            ],
                            [
                                "+",
                                "self._minor_tick_kw['gridOn'] = ("
                            ],
                            [
                                "+",
                                "mpl.rcParams['axes.grid'] and"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 2,
                        "percentage": 25.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-20859": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/legend.py": [
                            "def __init__("
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/legend.py": [
                            [
                                "+",
                                "raise TypeError("
                            ],
                            [
                                "+",
                                "\"Legend needs either Axes or FigureBase as parent\""
                            ],
                            [
                                "+",
                                "from matplotlib.figure import FigureBase"
                            ],
                            [
                                "-",
                                "raise TypeError(\"Legend needs either Axes or Figure as parent\")"
                            ],
                            [
                                "+",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 3,
                        "percentage": 37.5
                    }
                }
            }
        },
        "matplotlib__matplotlib-21568": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/dates.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-22719": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/category.py": [
                            "def convert(value, unit, axis):",
                            "def update(self, data):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/category.py": [
                            [
                                "+",
                                "if data.size and convertible:"
                            ],
                            [
                                "+",
                                "if values.size and is_numlike:"
                            ],
                            [
                                "-",
                                "if convertible:"
                            ],
                            [
                                "-",
                                "if is_numlike:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-22865": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/colorbar.py": [
                            "def _add_solids(self, X, Y, C):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/colorbar.py": [
                            [
                                "+",
                                "end_idx = len(X) if self._extend_upper() else -1"
                            ],
                            [
                                "+",
                                "start_idx = 0 if self._extend_lower() else 1"
                            ],
                            [
                                "+",
                                "self.dividers.set_segments(np.dstack([X, Y])[start_idx:end_idx])"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 5,
                        "percentage": 62.5
                    }
                }
            }
        },
        "matplotlib__matplotlib-22871": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/dates.py": [
                            "def format_ticks(self, values):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/dates.py": [
                            [
                                "+",
                                "unique = np.unique(tickdate[:, level])"
                            ],
                            [
                                "-",
                                "if len(np.unique(tickdate[:, level])) > 1:"
                            ],
                            [
                                "+",
                                "# if 1 is included in unique, the year is shown in ticks"
                            ],
                            [
                                "-",
                                "if level < 2:"
                            ],
                            [
                                "+",
                                "if level < 2 and np.any(unique == 1):"
                            ],
                            [
                                "+",
                                "if len(unique) > 1:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23299": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/__init__.py": [
                            "def rc_context(rc=None, fname=None):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/__init__.py": [
                            [
                                "+",
                                "orig = dict(rcParams.copy())"
                            ],
                            [
                                "+",
                                "del orig['backend']"
                            ],
                            [
                                "+",
                                "The :rc:`backend` will not be reset by the context manager."
                            ],
                            [
                                "-",
                                "orig = rcParams.copy()"
                            ],
                            [
                                "+",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23314": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/mpl_toolkits/mplot3d/axes3d.py": [
                            "def apply_aspect(self, position=None):"
                        ]
                    },
                    "lines": {
                        "lib/mpl_toolkits/mplot3d/axes3d.py": [
                            [
                                "+",
                                "if not self.get_visible():"
                            ],
                            [
                                "+",
                                "return"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23412": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/patches.py": [
                            "def draw(self, renderer):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/patches.py": [
                            [
                                "+",
                                "with cbook._setattr_cm(self, _dash_pattern=(self._dash_pattern)), \\"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 4,
                        "percentage": 80.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23476": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/figure.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24026": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "lib/matplotlib/stackplot.py": [
                            [
                                "+",
                                "colors = itertools.cycle(colors)"
                            ],
                            [
                                "+",
                                "facecolor=next(colors), label=next(labels, None),"
                            ],
                            [
                                "-",
                                "color = axes._get_lines.get_next_color()"
                            ],
                            [
                                "+",
                                "import itertools"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "colors = (axes._get_lines.get_next_color() for _ in y)"
                            ],
                            [
                                "-",
                                "facecolor=color, label=next(labels, None),"
                            ],
                            [
                                "+",
                                "facecolor=next(colors),"
                            ],
                            [
                                "+",
                                "label=next(labels, None),"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 2,
                        "percentage": 18.181818181818183
                    }
                }
            }
        },
        "matplotlib__matplotlib-24149": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/axes/_axes.py": [
                            "def _convert_dx(dx, x0, xconv, convert):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/axes/_axes.py": [
                            [
                                "+",
                                "except StopIteration:"
                            ],
                            [
                                "+",
                                "# this means we found no finite element, fall back to first"
                            ],
                            [
                                "+",
                                "# element unconditionally"
                            ],
                            [
                                "+",
                                "x = cbook.safe_first_element(xconv)"
                            ],
                            [
                                "+",
                                "x0 = cbook.safe_first_element(x0)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24177": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/axes/_base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24570": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/offsetbox.py": [
                            "def _get_aligned_offsets(hd_list, height, align=\"baseline\"):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/offsetbox.py": [
                            [
                                "-",
                                "elif align in [\"right\", \"bottom\"]:"
                            ],
                            [
                                "+",
                                "elif align in [\"left\", \"bottom\"]:"
                            ],
                            [
                                "+",
                                "elif align in [\"right\", \"top\"]:"
                            ],
                            [
                                "-",
                                "elif align in [\"left\", \"top\"]:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24627": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/axes/_base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24637": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/offsetbox.py": [
                            "def draw(self, renderer):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/offsetbox.py": [
                            [
                                "+",
                                "renderer.open_group(self.__class__.__name__, gid=self.get_gid())"
                            ],
                            [
                                "+",
                                "renderer.close_group(self.__class__.__name__)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24870": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/tri/_tricontour.py"
                    ],
                    "functions": {
                        "lib/matplotlib/contour.py": [
                            "def _autolev(self, N):",
                            "def _contour_args(self, args, kwargs):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/contour.py": [
                            [
                                "-",
                                "def _process_contour_level_args(self, args):"
                            ],
                            [
                                "+",
                                "def _process_contour_level_args(self, args, z_dtype):"
                            ],
                            [
                                "-",
                                "def _check_xyz(self, args, kwargs):"
                            ],
                            [
                                "-",
                                "args = args[3:]"
                            ],
                            [
                                "-",
                                "args = args[1:]"
                            ],
                            [
                                "+",
                                "if args:"
                            ],
                            [
                                "-",
                                "z = ma.asarray(args[0], dtype=np.float64)"
                            ],
                            [
                                "+",
                                "elif np.issubdtype(z_dtype, bool):"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "-",
                                "z = ma.asarray(args[2], dtype=np.float64)"
                            ],
                            [
                                "+",
                                "x, y, z = self._check_xyz(x, y, z_orig, kwargs)"
                            ],
                            [
                                "+",
                                "z = ma.asarray(z)"
                            ],
                            [
                                "-",
                                "levels_arg = 7  # Default, hard-wired."
                            ],
                            [
                                "-",
                                "x, y, z = self._check_xyz(args[:3], kwargs)"
                            ],
                            [
                                "+",
                                "levels_arg = [0, .5, 1]"
                            ],
                            [
                                "-",
                                "x, y = args[:2]"
                            ],
                            [
                                "+",
                                "self._process_contour_level_args(args, z.dtype)"
                            ],
                            [
                                "+",
                                "def _check_xyz(self, x, y, z, kwargs):"
                            ],
                            [
                                "+",
                                "x, y, z_orig, *args = args"
                            ],
                            [
                                "+",
                                "levels_arg = 7  # Default, hard-wired."
                            ],
                            [
                                "+",
                                "z, *args = args"
                            ],
                            [
                                "+",
                                "if self.filled:"
                            ],
                            [
                                "-",
                                "if len(args) == 0:"
                            ],
                            [
                                "-",
                                "self._process_contour_level_args(args)"
                            ],
                            [
                                "+",
                                "levels_arg = [.5]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 31,
                        "covered": 1,
                        "percentage": 3.225806451612903
                    }
                }
            }
        },
        "matplotlib__matplotlib-24970": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/colors.py": [
                            "def __call__(self, X, alpha=None, bytes=False):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/colors.py": [
                            [
                                "-",
                                "# Avoid converting large positive values to negative integers."
                            ],
                            [
                                "-",
                                "xa[xa < 0] = -1"
                            ],
                            [
                                "-",
                                "with np.errstate(invalid=\"ignore\"):"
                            ],
                            [
                                "-",
                                "np.clip(xa, -1, self.N, out=xa)"
                            ],
                            [
                                "+",
                                "# xa == 1 (== N after multiplication) is not out of range."
                            ],
                            [
                                "+",
                                "# Avoid converting large positive values to negative integers."
                            ],
                            [
                                "+",
                                "# We need this cast for unsigned ints as well as floats"
                            ],
                            [
                                "-",
                                "# Negative values are out of range, but astype(int) would"
                            ],
                            [
                                "-",
                                "xa = xa.astype(int)"
                            ],
                            [
                                "+",
                                "xa[xa < 0] = -1"
                            ],
                            [
                                "+",
                                "np.clip(xa, -1, self.N, out=xa)"
                            ],
                            [
                                "-",
                                "# truncate them towards zero."
                            ],
                            [
                                "+",
                                "with np.errstate(invalid=\"ignore\"):"
                            ],
                            [
                                "+",
                                "# Negative values are out of range, but astype(int) would"
                            ],
                            [
                                "-",
                                "xa[xa == self.N] = self.N - 1"
                            ],
                            [
                                "+",
                                "xa = xa.astype(int)"
                            ],
                            [
                                "+",
                                "# truncate them towards zero."
                            ],
                            [
                                "-",
                                "xa *= self.N"
                            ],
                            [
                                "+",
                                "xa[xa == self.N] = self.N - 1"
                            ],
                            [
                                "-",
                                "# xa == 1 (== N after multiplication) is not out of range."
                            ],
                            [
                                "+",
                                "xa *= self.N"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 21,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25122": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "lib/matplotlib/mlab.py": [
                            [
                                "-",
                                "result /= np.abs(window).sum()"
                            ],
                            [
                                "+",
                                "result = np.abs(result) / window.sum()"
                            ],
                            [
                                "-",
                                "result = np.abs(result) / np.abs(window).sum()"
                            ],
                            [
                                "+",
                                "result /= window.sum()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 4,
                        "percentage": 50.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25287": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/axis.py": [
                            "def _init(self):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/axis.py": [
                            [
                                "+",
                                "tick_color = mpl.rcParams['ytick.labelcolor']"
                            ],
                            [
                                "+",
                                "if mpl.rcParams['ytick.labelcolor'] == 'inherit':"
                            ],
                            [
                                "+",
                                "if mpl.rcParams['xtick.labelcolor'] == 'inherit':"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "color=tick_color"
                            ],
                            [
                                "+",
                                "tick_color = mpl.rcParams['xtick.labelcolor']"
                            ],
                            [
                                "+",
                                "tick_color = mpl.rcParams['ytick.color']"
                            ],
                            [
                                "+",
                                "tick_color = mpl.rcParams['xtick.color']"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 3,
                        "percentage": 27.27272727272727
                    }
                }
            }
        },
        "matplotlib__matplotlib-25311": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/offsetbox.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25332": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/cbook.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25479": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/colors.py"
                    ],
                    "functions": {
                        "lib/matplotlib/cm.py": [
                            "def register(self, cmap, *, name=None, force=False):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/cm.py": [
                            [
                                "+",
                                "# Someone may set the extremes of a builtin colormap and want to register it"
                            ],
                            [
                                "+",
                                "if self._cmaps[name].name != name:"
                            ],
                            [
                                "+",
                                "self._cmaps[name].name = name"
                            ],
                            [
                                "+",
                                "# builtin name, so we should update it to the registered name"
                            ],
                            [
                                "+",
                                "# with a different name for future lookups. The object would still have the"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25775": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/backends/backend_agg.py",
                        "lib/matplotlib/backends/backend_cairo.py"
                    ],
                    "functions": {
                        "lib/matplotlib/text.py": [
                            "def draw(self, renderer):",
                            "def __init__(self,",
                            "def get_rotation_mode(self):",
                            "def _reset_visual_defaults(",
                            "def update_from(self, other):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/text.py": [
                            [
                                "+",
                                "Antialiasing will be determined by :rc:`text.antialiased`"
                            ],
                            [
                                "+",
                                "antialiased=None,  # defaults to rcParams['text.antialiased']"
                            ],
                            [
                                "+",
                                "self._antialiased = antialiased"
                            ],
                            [
                                "+",
                                "self._antialiased = mpl.rcParams['text.antialiased']"
                            ],
                            [
                                "+",
                                "antialiased=antialiased"
                            ],
                            [
                                "+",
                                "antialiased=None"
                            ],
                            [
                                "+",
                                "Notes"
                            ],
                            [
                                "+",
                                "\"\"\"Return whether antialiased rendering is used.\"\"\""
                            ],
                            [
                                "+",
                                "self._antialiased = other._antialiased"
                            ],
                            [
                                "+",
                                "def set_antialiased(self, antialiased):"
                            ],
                            [
                                "+",
                                "if antialiased is not None:"
                            ],
                            [
                                "+",
                                "-----"
                            ],
                            [
                                "+",
                                "self.set_antialiased(antialiased)"
                            ],
                            [
                                "+",
                                "and the parameter *antialiased* will have no effect if the text contains"
                            ],
                            [
                                "+",
                                "math expressions."
                            ],
                            [
                                "+",
                                "antialiased : bool"
                            ],
                            [
                                "+",
                                "Set whether to use antialiased rendering."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 35,
                        "covered": 8,
                        "percentage": 22.857142857142858
                    }
                }
            }
        },
        "matplotlib__matplotlib-25960": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/figure.py": [
                            "def subfigures(self, nrows=1, ncols=1, squeeze=True,"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/figure.py": [
                            [
                                "+",
                                "sf._redo_transform_rel_fig(bbox=bbox)"
                            ],
                            [
                                "+",
                                "for sf, left, right in zip(sfrow, lefts, rights):"
                            ],
                            [
                                "-",
                                "rcParams when necessary."
                            ],
                            [
                                "+",
                                "constrained layout (see `~.ConstrainedLayoutEngine`), or zero if"
                            ],
                            [
                                "+",
                                "If not given, the values will be inferred from rcParams if using"
                            ],
                            [
                                "+",
                                "left=0, right=1, bottom=0, top=1)"
                            ],
                            [
                                "+",
                                "height_ratios=height_ratios,"
                            ],
                            [
                                "+",
                                "if self.get_layout_engine() is None and (wspace is not None or"
                            ],
                            [
                                "+",
                                "hspace is not None):"
                            ],
                            [
                                "-",
                                "If not given, the values will be inferred from a figure or"
                            ],
                            [
                                "-",
                                "height_ratios=height_ratios)"
                            ],
                            [
                                "+",
                                "# Gridspec wspace and hspace is ignored on subfigure instantiation,"
                            ],
                            [
                                "+",
                                "for sfrow, bottom, top in zip(sfarr, bottoms, tops):"
                            ],
                            [
                                "+",
                                "bbox = Bbox.from_extents(left, bottom, right, top)"
                            ],
                            [
                                "+",
                                "not using a layout engine."
                            ],
                            [
                                "+",
                                "# and no space is left.  So need to account for it here if required."
                            ],
                            [
                                "+",
                                "bottoms, tops, lefts, rights = gs.get_grid_positions(self)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 1,
                        "percentage": 5.555555555555555
                    }
                }
            }
        },
        "matplotlib__matplotlib-26113": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/axes/_axes.py": [
                            "def reduce_C_function(C: array) -> float"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26208": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/axes/_base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26291": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/mpl_toolkits/axes_grid1/inset_locator.py": [
                            "def draw(self, renderer):"
                        ]
                    },
                    "lines": {
                        "lib/mpl_toolkits/axes_grid1/inset_locator.py": [
                            [
                                "+",
                                "if renderer is None:"
                            ],
                            [
                                "+",
                                "renderer = ax.figure._get_renderer()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26342": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/collections.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26466": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/text.py": [
                            "def __init__(self,",
                            "def get_unit(self):",
                            "def __call__(self, renderer):",
                            "def __init__(self, artist, ref_coord, unit=\"points\"):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/text.py": [
                            [
                                "+",
                                "x, y = xy  # Make copy when xy is an array (and check the shape)."
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "-",
                                "self._ref_coord = ref_coord"
                            ],
                            [
                                "-",
                                "if unit == \"pixels\":"
                            ],
                            [
                                "-",
                                "return tr"
                            ],
                            [
                                "-",
                                "return renderer.points_to_pixels(1.)"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "self._ref_coord = x, y"
                            ],
                            [
                                "-",
                                "sc = self._get_scale(renderer)"
                            ],
                            [
                                "-",
                                "unit = self.get_unit()"
                            ],
                            [
                                "-",
                                "tr = Affine2D().scale(sc).translate(x, y)"
                            ],
                            [
                                "+",
                                "return Affine2D().scale(scale).translate(x, y)"
                            ],
                            [
                                "-",
                                "def _get_scale(self, renderer):"
                            ],
                            [
                                "+",
                                "self.xy = x, y"
                            ],
                            [
                                "-",
                                "return 1."
                            ],
                            [
                                "+",
                                "scale = 1 if self._unit == \"pixels\" else renderer.points_to_pixels(1)"
                            ],
                            [
                                "+",
                                "x, y = ref_coord  # Make copy when ref_coord is an array (and check the shape)."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 1,
                        "percentage": 5.555555555555555
                    }
                }
            }
        },
        "mwaskom__seaborn-3069": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "seaborn/_core/plot.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "mwaskom__seaborn-3187": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "seaborn/utils.py"
                    ],
                    "functions": {
                        "seaborn/_core/scales.py": [
                            "def spacer(x):"
                        ]
                    },
                    "lines": {
                        "seaborn/_core/scales.py": [
                            [
                                "+",
                                "# Avoid having an offset / scientific notation in a legend"
                            ],
                            [
                                "+",
                                "if hasattr(axis.major.formatter, \"set_useOffset\"):"
                            ],
                            [
                                "+",
                                "axis.major.formatter.set_scientific(False)"
                            ],
                            [
                                "+",
                                "# This could become an option (e.g. Continuous.label(offset=True))"
                            ],
                            [
                                "+",
                                "if hasattr(axis.major.formatter, \"set_scientific\"):"
                            ],
                            [
                                "+",
                                "# as we don't represent that anywhere so it ends up incorrect."
                            ],
                            [
                                "+",
                                "axis.major.formatter.set_useOffset(False)"
                            ],
                            [
                                "+",
                                "# in which case we would need to figure out how to show it."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pallets__flask-5014": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/flask/blueprints.py": [
                            "def __init__("
                        ]
                    },
                    "lines": {
                        "src/flask/blueprints.py": [
                            [
                                "+",
                                "if not name:"
                            ],
                            [
                                "+",
                                "raise ValueError(\"'name' may not be empty.\")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "psf__requests-1142": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "requests/models.py": [
                            "def prepare_body(self, data, files):"
                        ]
                    },
                    "lines": {
                        "requests/models.py": [
                            [
                                "+",
                                "elif self.method not in ('GET', 'HEAD'):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "psf__requests-1724": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "requests/sessions.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "psf__requests-1766": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "requests/auth.py": [
                            "def sha_utf8(x):"
                        ]
                    },
                    "lines": {
                        "requests/auth.py": [
                            [
                                "-",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 3,
                        "percentage": 75.0
                    }
                }
            }
        },
        "psf__requests-1921": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "requests/sessions.py": [
                            [
                                "+",
                                "merged_setting = dict((k, v) for (k, v) in merged_setting.items() if v is not None)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "psf__requests-2317": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "requests/sessions.py": [
                            "def request(self, method, url,"
                        ]
                    },
                    "lines": {
                        "requests/sessions.py": [
                            [
                                "+",
                                "method = to_native_string(method)"
                            ],
                            [
                                "+",
                                "from .compat import cookielib, OrderedDict, urljoin, urlparse"
                            ],
                            [
                                "-",
                                "from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "psf__requests-2931": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "requests/models.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "psf__requests-5414": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "requests/models.py": [
                            "def prepare_url(self, url, params):"
                        ]
                    },
                    "lines": {
                        "requests/models.py": [
                            [
                                "-",
                                "elif host.startswith(u'*'):"
                            ],
                            [
                                "+",
                                "elif host.startswith((u'*', u'.')):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "psf__requests-6028": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "requests/utils.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-2905": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "xarray/core/variable.py": [
                            [
                                "+",
                                "if isinstance(data, (pd.Series, pd.Index, pd.DataFrame)):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "pydata__xarray-3095": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/indexing.py"
                    ],
                    "functions": {
                        "xarray/core/variable.py": [
                            "def copy(self, deep=True, data=None):"
                        ]
                    },
                    "lines": {
                        "xarray/core/variable.py": [
                            [
                                "-",
                                "data = PandasIndexAdapter(self._data.array.copy(deep=True))"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "-",
                                "# point, which doesn't have a copy method, so make a deep copy"
                            ],
                            [
                                "-",
                                "data = self._data"
                            ],
                            [
                                "+",
                                "data = self._data.copy(deep=deep)"
                            ],
                            [
                                "-",
                                "if deep:"
                            ],
                            [
                                "-",
                                "# `PandasIndexAdapter` instance with it."
                            ],
                            [
                                "-",
                                "# self._data should be a `PandasIndexAdapter` instance at this"
                            ],
                            [
                                "-",
                                "# of the underlying `pandas.MultiIndex` and create a new"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 49,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-3151": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "xarray/core/combine.py": [
                            [
                                "+",
                                ".format(dim))"
                            ],
                            [
                                "+",
                                "\" global indexes along dimension {}\""
                            ],
                            [
                                "-",
                                "raise ValueError(\"Resulting object does not have monotonic\""
                            ],
                            [
                                "-",
                                "for dim in concatenated.dims:"
                            ],
                            [
                                "-",
                                "\" global indexes along dimension {}\""
                            ],
                            [
                                "+",
                                "or indexes.is_monotonic_decreasing):"
                            ],
                            [
                                "+",
                                "raise ValueError(\"Resulting object does not have monotonic\""
                            ],
                            [
                                "+",
                                "indexes = concatenated.indexes.get(dim)"
                            ],
                            [
                                "+",
                                "for dim in concat_dims:"
                            ],
                            [
                                "-",
                                "if dim in concatenated:"
                            ],
                            [
                                "-",
                                "indexes = concatenated.indexes.get(dim)"
                            ],
                            [
                                "+",
                                "if not (indexes.is_monotonic_increasing"
                            ],
                            [
                                "-",
                                ".format(dim))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 2,
                        "percentage": 13.333333333333334
                    }
                }
            }
        },
        "pydata__xarray-3305": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/dataset.py",
                        "xarray/core/variable.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 21,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-3677": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/dataset.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-3993": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/dataarray.py",
                        "xarray/core/dataset.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 47,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-4075": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/weighted.py": [
                            "def _sum_of_weights("
                        ]
                    },
                    "lines": {
                        "xarray/core/weighted.py": [
                            [
                                "+",
                                "# bool -> int, because ``xr.dot([True, True], [True, True])`` -> True"
                            ],
                            [
                                "+",
                                "mask, self.weights.astype(int), dim=dim, skipna=False"
                            ],
                            [
                                "+",
                                "if self.weights.dtype == bool:"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "# (and not 2); GH4074"
                            ],
                            [
                                "+",
                                "sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)"
                            ],
                            [
                                "+",
                                "sum_of_weights = self._reduce("
                            ],
                            [
                                "+",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 1,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "pydata__xarray-4094": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/dataarray.py": [
                            "def to_unstacked_dataset(self, dim, level=0):"
                        ]
                    },
                    "lines": {
                        "xarray/core/dataarray.py": [
                            [
                                "+",
                                "data_dict[k] = self.sel({variable_dim: k}, drop=True).squeeze(drop=True)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "pydata__xarray-4356": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "xarray/core/nanops.py": [
                            [
                                "+",
                                "null_mask = (np.take(mask.shape, axis).prod() - mask.sum(axis) - min_count) < 0"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 5,
                        "percentage": 83.33333333333334
                    }
                }
            }
        },
        "pydata__xarray-4629": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "pydata__xarray-4687": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/computation.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-4695": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/dataarray.py": [
                            "def __getitem__(self, key) -> \"DataArray\":"
                        ]
                    },
                    "lines": {
                        "xarray/core/dataarray.py": [
                            [
                                "+",
                                "return self.data_array.sel(key)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "pydata__xarray-4966": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/coding/variables.py": [
                            "def decode(self, variable, name=None):"
                        ]
                    },
                    "lines": {
                        "xarray/coding/variables.py": [
                            [
                                "+",
                                "if unsigned == \"false\":"
                            ],
                            [
                                "+",
                                "elif data.dtype.kind == \"u\":"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 6,
                        "percentage": 75.0
                    }
                }
            }
        },
        "pydata__xarray-6461": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/computation.py": [
                            "def where(cond, x, y, keep_attrs=None):"
                        ]
                    },
                    "lines": {
                        "xarray/core/computation.py": [
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "keep_attrs = lambda attrs, context: attrs[1]"
                            ],
                            [
                                "+",
                                "keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-6599": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/computation.py": [
                            "def to_floatable(x: DataArray) -> DataArray:"
                        ]
                    },
                    "lines": {
                        "xarray/core/computation.py": [
                            [
                                "+",
                                "# datetimes"
                            ],
                            [
                                "+",
                                "# timedeltas"
                            ],
                            [
                                "+",
                                "return x.astype(float)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 3,
                        "percentage": 50.0
                    }
                }
            }
        },
        "pydata__xarray-6721": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/common.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-6744": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/rolling.py": [
                            "def __init__("
                        ]
                    },
                    "lines": {
                        "xarray/core/rolling.py": [
                            [
                                "+",
                                "def __iter__(self) -> Iterator[tuple[DataArray, DataArray]]:"
                            ],
                            [
                                "+",
                                "window0 = int(self.window[0])"
                            ],
                            [
                                "+",
                                "offset = (window0 + 1) // 2 if self.center[0] else 1"
                            ],
                            [
                                "+",
                                "starts = stops - window0"
                            ],
                            [
                                "+",
                                "starts[: window0 - offset] = 0"
                            ],
                            [
                                "+",
                                "dim0 = self.dim[0]"
                            ],
                            [
                                "+",
                                "window = self.obj.isel({dim0: slice(start, stop)})"
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "+",
                                "stops = np.arange(offset, self.obj.sizes[dim0] + offset)"
                            ],
                            [
                                "+",
                                "counts = window.count(dim=dim0)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 16,
                        "covered": 6,
                        "percentage": 37.5
                    }
                }
            }
        },
        "pydata__xarray-6938": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/dataset.py",
                        "xarray/core/variable.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-6992": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/indexes.py"
                    ],
                    "functions": {
                        "xarray/core/dataset.py": [
                            "def reset_index(",
                            "def set_index("
                        ]
                    },
                    "lines": {
                        "xarray/core/dataset.py": [
                            [
                                "-",
                                "drop_variables: list[Hashable] = []"
                            ],
                            [
                                "-",
                                "if k not in dims_or_levels"
                            ],
                            [
                                "+",
                                "idx = index.keep_levels(keep_level_vars)"
                            ],
                            [
                                "+",
                                "if isinstance(index, PandasMultiIndex):"
                            ],
                            [
                                "+",
                                "if drop:"
                            ],
                            [
                                "-",
                                "drop_indexes: list[Hashable] = []"
                            ],
                            [
                                "-",
                                "if level_vars:"
                            ],
                            [
                                "+",
                                "if not isinstance(idx, PandasMultiIndex):"
                            ],
                            [
                                "+",
                                "drop_variables.update(all_index_coord_names)"
                            ],
                            [
                                "-",
                                "k: self._variables[k] for k in current_coord_names"
                            ],
                            [
                                "+",
                                "[k for k in level_names if k not in keep_level_vars]"
                            ],
                            [
                                "+",
                                "index_coord_names = self.xindexes.get_all_coords(dim, errors=\"ignore\")"
                            ],
                            [
                                "+",
                                "level_names = index.index.names"
                            ],
                            [
                                "-",
                                "# special case for pd.MultiIndex (name is an index level):"
                            ],
                            [
                                "-",
                                "new_indexes.update({k: idx for k in idx_vars})"
                            ],
                            [
                                "+",
                                "if index.dim not in dims_or_levels and keep_level_vars:"
                            ],
                            [
                                "+",
                                "all_index_coord_names.update("
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "-",
                                "idx_vars = idx.create_variables(level_vars)"
                            ],
                            [
                                "+",
                                "drop_indexes.update(all_index_coord_names)"
                            ],
                            [
                                "-",
                                "k: v for k, v in self._indexes.items() if k not in maybe_drop_indexes"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "new_variables.update(idx_vars)"
                            ],
                            [
                                "+",
                                "# do not drop the multi-index completely"
                            ],
                            [
                                "+",
                                "drop_or_convert(level_names)"
                            ],
                            [
                                "+",
                                "def drop_or_convert(var_names):"
                            ],
                            [
                                "+",
                                "# re-add deindexed coordinates (convert to base variables)"
                            ],
                            [
                                "-",
                                "if index not in replaced_indexes:"
                            ],
                            [
                                "+",
                                "k: self._variables[k]"
                            ],
                            [
                                "-",
                                "if drop:"
                            ],
                            [
                                "+",
                                "# instead replace it by a new (multi-)index with dropped level(s)"
                            ],
                            [
                                "+",
                                "keep_level_vars = {"
                            ],
                            [
                                "+",
                                "all_index_coord_names = set(index_coord_names)"
                            ],
                            [
                                "+",
                                "coord_names = self._coord_names - drop_variables | set(new_variables)"
                            ],
                            [
                                "+",
                                "idx_var_names = set(self.xindexes.get_all_coords(name))"
                            ],
                            [
                                "-",
                                "level_names = index.index.names"
                            ],
                            [
                                "+",
                                "new_variables[k] = self._variables[k].to_base_variable()"
                            ],
                            [
                                "+",
                                "# drop any pre-existing index involved and its corresponding coordinates"
                            ],
                            [
                                "+",
                                "drop_indexes: set[Hashable] = set()"
                            ],
                            [
                                "+",
                                "all_var_names.update(var_names)"
                            ],
                            [
                                "-",
                                "replaced_indexes.append(index)"
                            ],
                            [
                                "-",
                                "drop_variables.append(name)"
                            ],
                            [
                                "+",
                                "all_var_names: set[Hashable] = set()"
                            ],
                            [
                                "+",
                                "variables, coord_names=coord_names, indexes=indexes"
                            ],
                            [
                                "+",
                                "for k in level_names"
                            ],
                            [
                                "+",
                                "# trick to preserve coordinate order in this case"
                            ],
                            [
                                "-",
                                "k: self._variables[k]"
                            ],
                            [
                                "+",
                                "drop_indexes.update(idx_var_names)"
                            ],
                            [
                                "+",
                                "k: self._variables[k].to_base_variable() for k in var_names"
                            ],
                            [
                                "-",
                                "new_variables: dict[Hashable, IndexVariable] = {}"
                            ],
                            [
                                "+",
                                "drop_variables.update(keep_level_vars)"
                            ],
                            [
                                "+",
                                "# always drop the multi-index dimension variable"
                            ],
                            [
                                "+",
                                "k: self._variables[k] for k in index_coord_names"
                            ],
                            [
                                "+",
                                "idx_vars = idx.create_variables(keep_level_vars)"
                            ],
                            [
                                "-",
                                "# replace by a new index with dropped level(s) instead of just drop the index"
                            ],
                            [
                                "+",
                                "base_vars = {"
                            ],
                            [
                                "+",
                                "and k not in all_var_names"
                            ],
                            [
                                "+",
                                "drop_variables.update(var_names)"
                            ],
                            [
                                "+",
                                "k: v for k, v in self._indexes.items() if k not in drop_indexes"
                            ],
                            [
                                "-",
                                "maybe_drop_indexes: list[Hashable] = []"
                            ],
                            [
                                "-",
                                "maybe_drop_indexes += list(current_coord_names) + var_names"
                            ],
                            [
                                "+",
                                "}"
                            ],
                            [
                                "-",
                                "for k in level_names"
                            ],
                            [
                                "-",
                                "level_vars = {"
                            ],
                            [
                                "+",
                                "drop_variables: set[Hashable] = set()"
                            ],
                            [
                                "+",
                                "drop_or_convert(idx_var_names)"
                            ],
                            [
                                "+",
                                "k not in new_variables"
                            ],
                            [
                                "+",
                                "# multi-index reduced to single index"
                            ],
                            [
                                "+",
                                "# special case for pd.MultiIndex"
                            ],
                            [
                                "-",
                                "current_coord_names = self.xindexes.get_all_coords(dim, errors=\"ignore\")"
                            ],
                            [
                                "+",
                                "if ("
                            ],
                            [
                                "+",
                                "new_variables: dict[Hashable, Variable] = {}"
                            ],
                            [
                                "+",
                                "if dim in self._coord_names:"
                            ],
                            [
                                "-",
                                "if isinstance(index, PandasMultiIndex) and name not in self.dims:"
                            ],
                            [
                                "+",
                                "coord_names = self._coord_names - drop_variables"
                            ],
                            [
                                "+",
                                "and k in self._coord_names"
                            ],
                            [
                                "+",
                                "drop_variables.remove(dim)"
                            ],
                            [
                                "+",
                                "# backward compatibility: unique level coordinate renamed to dimension"
                            ],
                            [
                                "-",
                                "}"
                            ],
                            [
                                "+",
                                "seen: set[Index] = set()"
                            ],
                            [
                                "+",
                                "if index in seen:"
                            ],
                            [
                                "+",
                                "drop_variables.add(index.dim)"
                            ],
                            [
                                "-",
                                "idx = index.keep_levels(level_vars)"
                            ],
                            [
                                "-",
                                "replaced_indexes: list[PandasMultiIndex] = []"
                            ],
                            [
                                "+",
                                "return self._replace_with_new_dims("
                            ],
                            [
                                "-",
                                "drop_variables += var_names"
                            ],
                            [
                                "-",
                                "drop_indexes += list(self.xindexes.get_all_coords(name))"
                            ],
                            [
                                "+",
                                "seen.add(index)"
                            ],
                            [
                                "+",
                                "drop_or_convert("
                            ],
                            [
                                "+",
                                "if k not in dims_or_levels"
                            ],
                            [
                                "-",
                                "maybe_drop_indexes += list("
                            ],
                            [
                                "-",
                                "# drop any pre-existing index involved"
                            ],
                            [
                                "+",
                                "for k in drop_variables:"
                            ],
                            [
                                "-",
                                "coord_names = set(new_variables) | self._coord_names"
                            ],
                            [
                                "-",
                                "return self._replace(variables, coord_names=coord_names, indexes=indexes)"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "-",
                                "coord_names = self._coord_names - set(drop_variables) | set(new_variables)"
                            ],
                            [
                                "+",
                                "new_variables.update(base_vars)"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "new_indexes.update({k: idx for k in idx_vars})"
                            ],
                            [
                                "+",
                                "continue"
                            ],
                            [
                                "+",
                                "new_variables.update(idx_vars)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 108,
                        "covered": 1,
                        "percentage": 0.9259259259259258
                    }
                }
            }
        },
        "pydata__xarray-7229": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/computation.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 27,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-7233": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/rolling.py": [
                            "def construct("
                        ]
                    },
                    "lines": {
                        "xarray/core/rolling.py": [
                            [
                                "+",
                                "should_be_coords = (set(window_dim) & set(self.obj.coords)) | set("
                            ],
                            [
                                "+",
                                "self.obj.coords"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "# should handle window_dim being unindexed"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "pydata__xarray-7393": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/indexing.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-4551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "pylint/pyreverse/inspector.py",
                        "pylint/pyreverse/utils.py",
                        "pylint/pyreverse/writer.py"
                    ],
                    "functions": {
                        "pylint/pyreverse/diagrams.py": [
                            "def class_names(self, nodes):"
                        ]
                    },
                    "lines": {
                        "pylint/pyreverse/diagrams.py": [
                            [
                                "+",
                                "isinstance(node, (astroid.ClassDef, astroid.Name, astroid.Subscript))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 104,
                        "covered": 1,
                        "percentage": 0.9615384615384616
                    }
                }
            }
        },
        "pylint-dev__pylint-4604": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "pylint/constants.py"
                    ],
                    "functions": {
                        "pylint/checkers/variables.py": [
                            "def _store_type_annotation_node(self, type_annotation):"
                        ]
                    },
                    "lines": {
                        "pylint/checkers/variables.py": [
                            [
                                "+",
                                "self._store_type_annotation_node(type_annotation.expr)"
                            ],
                            [
                                "+",
                                "if isinstance(type_annotation, astroid.Attribute):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 2,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "pylint-dev__pylint-4661": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "pylint/config/__init__.py",
                        "setup.cfg"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-4970": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "pylint/checkers/similar.py": [
                            "def append_stream(self, streamid: str, stream: TextIO, encoding=None) -> None:"
                        ]
                    },
                    "lines": {
                        "pylint/checkers/similar.py": [
                            [
                                "+",
                                "return"
                            ],
                            [
                                "+",
                                "if self.min_lines == 0:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-6386": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "pylint/config/argument.py",
                        "pylint/config/arguments_manager.py",
                        "pylint/config/utils.py"
                    ],
                    "functions": {},
                    "lines": {
                        "pylint/lint/base_options.py": [
                            [
                                "+",
                                "\"metavar\": \"\","
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "functions": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-6528": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "pylint/lint/pylinter.py"
                    ],
                    "functions": {
                        "pylint/lint/expand_modules.py": [
                            "def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> b"
                        ]
                    },
                    "lines": {
                        "pylint/lint/expand_modules.py": [
                            [
                                "+",
                                "ignore_list_re: list[Pattern[str]],"
                            ],
                            [
                                "+",
                                "element: str,"
                            ],
                            [
                                "+",
                                "or _is_in_ignore_list_re(element, ignore_list_paths_re)"
                            ],
                            [
                                "+",
                                "basename = os.path.basename(element)"
                            ],
                            [
                                "+",
                                "or _is_in_ignore_list_re(basename, ignore_list_re)"
                            ],
                            [
                                "+",
                                "ignore_list: list[str],"
                            ],
                            [
                                "+",
                                "return ("
                            ],
                            [
                                "+",
                                "basename in ignore_list"
                            ],
                            [
                                "+",
                                "def _is_ignored_file("
                            ],
                            [
                                "+",
                                "ignore_list_paths_re: list[Pattern[str]],"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                ") -> bool:"
                            ],
                            [
                                "+",
                                "if _is_ignored_file("
                            ],
                            [
                                "+",
                                "something, ignore_list, ignore_list_re, ignore_list_paths_re"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "lines": {
                        "total": 33,
                        "covered": 5,
                        "percentage": 15.151515151515152
                    }
                }
            }
        },
        "pylint-dev__pylint-6903": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "pylint/lint/run.py": [
                            [
                                "+",
                                "# assume we have 1 CPU available"
                            ],
                            [
                                "+",
                                "# In K8s Pods also a fraction of a single core could be available"
                            ],
                            [
                                "+",
                                "if avail_cpu == 0:"
                            ],
                            [
                                "+",
                                "# As multiprocessing is not able to run only a \"fraction\" of process"
                            ],
                            [
                                "+",
                                "avail_cpu = 1"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "pylint-dev__pylint-7080": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "pylint/lint/expand_modules.py": [
                            "def _is_ignored_file("
                        ]
                    },
                    "lines": {
                        "pylint/lint/expand_modules.py": [
                            [
                                "+",
                                "element = os.path.normpath(element)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-7277": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "pylint/__init__.py": [
                            [
                                "+",
                                "if sys.path[0] in (\"\", \".\", cwd):"
                            ],
                            [
                                "+",
                                "sys.path.pop(0)"
                            ],
                            [
                                "+",
                                "env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "pylint-dev__pylint-8898": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "pylint/config/argument.py",
                        "pylint/utils/__init__.py"
                    ],
                    "functions": {
                        "pylint/utils/utils.py": [
                            "def _check_csv(value: list[str] | tuple[str] | str) -> Sequence[str]:"
                        ]
                    },
                    "lines": {
                        "pylint/utils/utils.py": [
                            [
                                "+",
                                "if char == \"{\":"
                            ],
                            [
                                "+",
                                "r\"\"\"Split a comma-separated list of regexps, taking care to avoid splitting"
                            ],
                            [
                                "+",
                                "open_braces = True"
                            ],
                            [
                                "+",
                                "elif char == \"}\" and open_braces:"
                            ],
                            [
                                "+",
                                "if char == \",\" and not open_braces:"
                            ],
                            [
                                "+",
                                "regexps[-1].append(char)"
                            ],
                            [
                                "+",
                                "yield from value"
                            ],
                            [
                                "+",
                                "regexps.append(None)"
                            ],
                            [
                                "-",
                                "from collections.abc import Sequence"
                            ],
                            [
                                "+",
                                "a regex employing a comma as quantifier, as in `\\d{1,2}`.\"\"\""
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "open_braces = False"
                            ],
                            [
                                "+",
                                "yield from (\"\".join(regexp).strip() for regexp in regexps if regexp is not None)"
                            ],
                            [
                                "+",
                                "from collections.abc import Iterable, Sequence"
                            ],
                            [
                                "+",
                                "if isinstance(value, (list, tuple)):"
                            ],
                            [
                                "+",
                                "from collections import deque"
                            ],
                            [
                                "+",
                                "regexps: deque[deque[str] | None] = deque([None])"
                            ],
                            [
                                "+",
                                "def _check_regexp_csv(value: list[str] | tuple[str] | str) -> Iterable[str]:"
                            ],
                            [
                                "+",
                                "elif regexps[-1] is None:"
                            ],
                            [
                                "+",
                                "# None is a sentinel value here"
                            ],
                            [
                                "+",
                                "regexps.pop()"
                            ],
                            [
                                "+",
                                "regexps.append(deque([char]))"
                            ],
                            [
                                "+",
                                "for char in value:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 28,
                        "covered": 1,
                        "percentage": 3.571428571428571
                    }
                }
            }
        },
        "pytest-dev__pytest-10051": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/logging.py": [
                            "def reset(self) -> None:",
                            "def messages(self) -> List[str]:"
                        ]
                    },
                    "lines": {
                        "src/_pytest/logging.py": [
                            [
                                "+",
                                "def clear(self) -> None:"
                            ],
                            [
                                "+",
                                "self.stream = StringIO()"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "self.handler.reset()"
                            ],
                            [
                                "+",
                                "self.handler.clear()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "pytest-dev__pytest-10081": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/unittest.py": [
                            "def runtest(self) -> None:"
                        ]
                    },
                    "lines": {
                        "src/_pytest/unittest.py": [
                            [
                                "+",
                                "skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)"
                            ],
                            [
                                "+",
                                "if self.config.getoption(\"usepdb\") and not skipped:"
                            ],
                            [
                                "+",
                                "# We need to consider if the test itself is skipped, or the whole class."
                            ],
                            [
                                "+",
                                "assert isinstance(self.parent, UnitTestCase)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "pytest-dev__pytest-10356": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "src/_pytest/mark/structures.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 34,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-5262": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/capture.py": [
                            "def name(self):"
                        ]
                    },
                    "lines": {
                        "src/_pytest/capture.py": [
                            [
                                "+",
                                "@property"
                            ],
                            [
                                "+",
                                "return self.buffer.mode.replace(\"b\", \"\")"
                            ],
                            [
                                "+",
                                "def mode(self):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "pytest-dev__pytest-5631": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "src/_pytest/compat.py": [
                            [
                                "-",
                                "return len(patchings)"
                            ],
                            [
                                "+",
                                "p"
                            ],
                            [
                                "+",
                                "mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())"
                            ],
                            [
                                "+",
                                "ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())"
                            ],
                            [
                                "+",
                                "for p in patchings"
                            ],
                            [
                                "+",
                                "return len("
                            ],
                            [
                                "-",
                                "mock_modules = [sys.modules.get(\"mock\"), sys.modules.get(\"unittest.mock\")]"
                            ],
                            [
                                "+",
                                "["
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "+",
                                "and (p.new is mock_sentinel or p.new is ut_mock_sentinel)"
                            ],
                            [
                                "+",
                                "]"
                            ],
                            [
                                "-",
                                "sentinels = [m.DEFAULT for m in mock_modules if m is not None]"
                            ],
                            [
                                "-",
                                "return len("
                            ],
                            [
                                "-",
                                "if any(mock_modules):"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "if not p.attribute_name"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 2,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "pytest-dev__pytest-5787": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/reports.py": [
                            "def _from_json(cls, reportdict):",
                            "def pytest_report_from_serializable(data):",
                            "def _to_json(self):"
                        ]
                    },
                    "lines": {
                        "src/_pytest/reports.py": [
                            [
                                "-",
                                "reprentry = ReprEntry("
                            ],
                            [
                                "+",
                                "return reportdict"
                            ],
                            [
                                "+",
                                "def deserialize_repr_crash(repr_crash_dict):"
                            ],
                            [
                                "+",
                                "Returns **kwargs that can be used to construct a TestReport or CollectReport instance."
                            ],
                            [
                                "-",
                                "reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]"
                            ],
                            [
                                "+",
                                "serialization."
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "+",
                                "def serialize_longrepr(rep):"
                            ],
                            [
                                "-",
                                "for entry_data in reprtraceback[\"reprentries\"]:"
                            ],
                            [
                                "-",
                                "style=data[\"style\"],"
                            ],
                            [
                                "-",
                                "):"
                            ],
                            [
                                "+",
                                "entry_data[\"data\"][key] = value.__dict__.copy()"
                            ],
                            [
                                "+",
                                "d[\"longrepr\"] = str(report.longrepr)"
                            ],
                            [
                                "-",
                                "if hasattr(value, \"__dict__\"):"
                            ],
                            [
                                "-",
                                "self.longrepr, \"reprcrash\""
                            ],
                            [
                                "-",
                                "elif name == \"result\":"
                            ],
                            [
                                "+",
                                "return reprcrash.__dict__.copy()"
                            ],
                            [
                                "-",
                                "d[\"longrepr\"] = disassembled_report(self)"
                            ],
                            [
                                "+",
                                "def serialize_repr_entry(entry):"
                            ],
                            [
                                "+",
                                "chain.append("
                            ],
                            [
                                "+",
                                "if data[\"reprfileloc\"]:"
                            ],
                            [
                                "+",
                                "kwargs = _report_kwargs_from_json(reportdict)"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "style=data[\"style\"],"
                            ],
                            [
                                "-",
                                "reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()"
                            ],
                            [
                                "+",
                                "_report_unserialization_failure(entry_type, TestReport, reportdict)"
                            ],
                            [
                                "-",
                                "and \"reprtraceback\" in reportdict[\"longrepr\"]"
                            ],
                            [
                                "+",
                                "return ReprFileLocation(**repr_crash_dict)"
                            ],
                            [
                                "+",
                                "elif name == \"result\":"
                            ],
                            [
                                "+",
                                "d[name] = str(d[name])"
                            ],
                            [
                                "-",
                                "\"reprcrash\" in reportdict[\"longrepr\"]"
                            ],
                            [
                                "-",
                                "unserialized_entries = []"
                            ],
                            [
                                "-",
                                "reprcrash = rep.longrepr.reprcrash.__dict__.copy()"
                            ],
                            [
                                "+",
                                "]"
                            ],
                            [
                                "+",
                                "exception_info = ReprExceptionInfo(reprtraceback, reprcrash)"
                            ],
                            [
                                "+",
                                "def _report_to_json(report):"
                            ],
                            [
                                "+",
                                "and \"reprtraceback\" in reportdict[\"longrepr\"]"
                            ],
                            [
                                "+",
                                "data = entry_data[\"data\"]"
                            ],
                            [
                                "+",
                                "if reportdict[\"longrepr\"][\"chain\"]:"
                            ],
                            [
                                "-",
                                "new_entries = []"
                            ],
                            [
                                "-",
                                "entry_data[\"data\"][key] = value.__dict__.copy()"
                            ],
                            [
                                "+",
                                "result[\"chain\"].append("
                            ],
                            [
                                "+",
                                "and \"reprcrash\" in reportdict[\"longrepr\"]"
                            ],
                            [
                                "+",
                                "This was originally the serialize_report() function from xdist (ca03269)."
                            ],
                            [
                                "+",
                                "result[\"chain\"] = []"
                            ],
                            [
                                "+",
                                "serialize_repr_traceback(repr_traceback),"
                            ],
                            [
                                "+",
                                "return reprentry"
                            ],
                            [
                                "-",
                                "if hasattr(self.longrepr, \"reprtraceback\") and hasattr("
                            ],
                            [
                                "-",
                                "if data[\"reprlocals\"]:"
                            ],
                            [
                                "-",
                                "if data[\"reprfileloc\"]:"
                            ],
                            [
                                "+",
                                "reprlocals=reprlocals,"
                            ],
                            [
                                "+",
                                "serialize_repr_entry(x) for x in reprtraceback.reprentries"
                            ],
                            [
                                "+",
                                "result[\"reprentries\"] = ["
                            ],
                            [
                                "+",
                                "reprfuncargs = None"
                            ],
                            [
                                "-",
                                "if hasattr(self.longrepr, \"toterminal\"):"
                            ],
                            [
                                "-",
                                "reprfuncargs=reprfuncargs,"
                            ],
                            [
                                "-",
                                "d[name] = str(d[name])"
                            ],
                            [
                                "+",
                                "\"reprcrash\": serialize_repr_crash(rep.longrepr.reprcrash),"
                            ],
                            [
                                "+",
                                "("
                            ],
                            [
                                "+",
                                "if data[\"reprlocals\"]:"
                            ],
                            [
                                "+",
                                "for repr_traceback_data, repr_crash_data, description in reportdict["
                            ],
                            [
                                "-",
                                "new_entries.append(entry_data)"
                            ],
                            [
                                "-",
                                "data = entry_data[\"data\"]"
                            ],
                            [
                                "-",
                                "unserialized_entries.append(reprentry)"
                            ],
                            [
                                "-",
                                "reprtraceback[\"reprentries\"] = new_entries"
                            ],
                            [
                                "+",
                                "reprfuncargs=reprfuncargs,"
                            ],
                            [
                                "-",
                                "return cls(**reportdict)"
                            ],
                            [
                                "+",
                                "from _pytest._code.code import ExceptionChainRepr"
                            ],
                            [
                                "+",
                                "Returns the contents of this report as a dict of builtin entries, suitable for"
                            ],
                            [
                                "-",
                                "_report_unserialization_failure(entry_type, cls, reportdict)"
                            ],
                            [
                                "-",
                                "\"type\": type(entry).__name__,"
                            ],
                            [
                                "+",
                                "entry_data = {\"type\": type(entry).__name__, \"data\": entry.__dict__.copy()}"
                            ],
                            [
                                "+",
                                "elif entry_type == \"ReprEntryNative\":"
                            ],
                            [
                                "+",
                                "reprtraceback = deserialize_repr_traceback("
                            ],
                            [
                                "-",
                                "if reportdict[\"longrepr\"]:"
                            ],
                            [
                                "+",
                                "if isinstance(d[name], (py.path.local, Path)):"
                            ],
                            [
                                "+",
                                "if data[\"reprfuncargs\"]:"
                            ],
                            [
                                "+",
                                "result[\"chain\"] = None"
                            ],
                            [
                                "-",
                                "d = self.__dict__.copy()"
                            ],
                            [
                                "-",
                                "reprlocals=reprlocals,"
                            ],
                            [
                                "+",
                                "reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])"
                            ],
                            [
                                "+",
                                "for repr_traceback, repr_crash, description in rep.longrepr.chain:"
                            ],
                            [
                                "-",
                                "reprfuncargs = None"
                            ],
                            [
                                "-",
                                "d[\"longrepr\"] = str(self.longrepr)"
                            ],
                            [
                                "+",
                                "d[\"longrepr\"] = serialize_longrepr(report)"
                            ],
                            [
                                "-",
                                "reprtraceback[\"reprentries\"] = unserialized_entries"
                            ],
                            [
                                "+",
                                "d[name] = None  # for now"
                            ],
                            [
                                "-",
                                "reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]"
                            ],
                            [
                                "+",
                                "lines=data[\"lines\"],"
                            ],
                            [
                                "+",
                                "deserialize_repr_entry(x) for x in repr_traceback_dict[\"reprentries\"]"
                            ],
                            [
                                "+",
                                "report.longrepr, \"reprcrash\""
                            ],
                            [
                                "+",
                                "result = reprtraceback.__dict__.copy()"
                            ],
                            [
                                "+",
                                "return ReprTraceback(**repr_traceback_dict)"
                            ],
                            [
                                "+",
                                "reprlocals = None"
                            ],
                            [
                                "+",
                                "serialize_repr_crash(repr_crash),"
                            ],
                            [
                                "-",
                                "for entry in reprtraceback[\"reprentries\"]:"
                            ],
                            [
                                "+",
                                "if isinstance(rep.longrepr, ExceptionChainRepr):"
                            ],
                            [
                                "+",
                                "if ("
                            ],
                            [
                                "-",
                                "elif entry_type == \"ReprEntryNative\":"
                            ],
                            [
                                "+",
                                "exception_info = ExceptionChainRepr(chain)"
                            ],
                            [
                                "-",
                                "if isinstance(d[name], (py.path.local, Path)):"
                            ],
                            [
                                "-",
                                "if data[\"reprfuncargs\"]:"
                            ],
                            [
                                "+",
                                "deserialize_repr_traceback(repr_traceback_data),"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "def _report_kwargs_from_json(reportdict):"
                            ],
                            [
                                "+",
                                "\"longrepr\""
                            ],
                            [
                                "+",
                                "def serialize_repr_traceback(reprtraceback):"
                            ],
                            [
                                "+",
                                "def deserialize_repr_traceback(repr_traceback_dict):"
                            ],
                            [
                                "-",
                                "\"data\": entry.__dict__.copy(),"
                            ],
                            [
                                "+",
                                "reprentry = ReprEntryNative(data[\"lines\"])"
                            ],
                            [
                                "-",
                                "reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])"
                            ],
                            [
                                "-",
                                "reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])"
                            ],
                            [
                                "-",
                                "entry_data = {"
                            ],
                            [
                                "+",
                                "reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])"
                            ],
                            [
                                "+",
                                "reportdict[\"longrepr\"]"
                            ],
                            [
                                "+",
                                "entry_type = entry_data[\"type\"]"
                            ],
                            [
                                "-",
                                "d[name] = None  # for now"
                            ],
                            [
                                "+",
                                "for key, value in entry_data[\"data\"].items():"
                            ],
                            [
                                "+",
                                "description,"
                            ],
                            [
                                "+",
                                "d[\"longrepr\"] = report.longrepr"
                            ],
                            [
                                "+",
                                "return d"
                            ],
                            [
                                "+",
                                "reprfileloc = None"
                            ],
                            [
                                "+",
                                "if entry_type == \"ReprEntry\":"
                            ],
                            [
                                "-",
                                "lines=data[\"lines\"],"
                            ],
                            [
                                "+",
                                "for name in d:"
                            ],
                            [
                                "+",
                                "if hasattr(report.longrepr, \"toterminal\"):"
                            ],
                            [
                                "+",
                                "reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])"
                            ],
                            [
                                "-",
                                "filelocrepr=reprfileloc,"
                            ],
                            [
                                "-",
                                "d[\"longrepr\"] = self.longrepr"
                            ],
                            [
                                "+",
                                "reprcrash = deserialize_repr_crash(reportdict[\"longrepr\"][\"reprcrash\"])"
                            ],
                            [
                                "-",
                                "reprlocals = None"
                            ],
                            [
                                "+",
                                "reprentry = ReprEntry("
                            ],
                            [
                                "+",
                                "\"reprtraceback\": serialize_repr_traceback(rep.longrepr.reprtraceback),"
                            ],
                            [
                                "+",
                                "repr_traceback_dict[\"reprentries\"] = ["
                            ],
                            [
                                "+",
                                "return result"
                            ],
                            [
                                "+",
                                "def serialize_repr_crash(reprcrash):"
                            ],
                            [
                                "+",
                                "deserialize_repr_crash(repr_crash_data),"
                            ],
                            [
                                "-",
                                "if ("
                            ],
                            [
                                "+",
                                "][\"chain\"]:"
                            ],
                            [
                                "+",
                                "return entry_data"
                            ],
                            [
                                "+",
                                "filelocrepr=reprfileloc,"
                            ],
                            [
                                "+",
                                "return _report_to_json(self)"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "result = {"
                            ],
                            [
                                "-",
                                "reprentry = ReprEntryNative(data[\"lines\"])"
                            ],
                            [
                                "-",
                                "def disassembled_report(rep):"
                            ],
                            [
                                "+",
                                "if hasattr(value, \"__dict__\"):"
                            ],
                            [
                                "+",
                                "def deserialize_repr_entry(entry_data):"
                            ],
                            [
                                "+",
                                "d = report.__dict__.copy()"
                            ],
                            [
                                "-",
                                "reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])"
                            ],
                            [
                                "-",
                                "reprentry = None"
                            ],
                            [
                                "-",
                                "entry_type = entry_data[\"type\"]"
                            ],
                            [
                                "+",
                                "return cls(**kwargs)"
                            ],
                            [
                                "-",
                                "for key, value in entry_data[\"data\"].items():"
                            ],
                            [
                                "-",
                                "return d"
                            ],
                            [
                                "-",
                                "reprfileloc = None"
                            ],
                            [
                                "-",
                                "if entry_type == \"ReprEntry\":"
                            ],
                            [
                                "-",
                                "for name in d:"
                            ],
                            [
                                "+",
                                "if hasattr(report.longrepr, \"reprtraceback\") and hasattr("
                            ],
                            [
                                "+",
                                "reportdict[\"longrepr\"][\"reprtraceback\"]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 181,
                        "covered": 21,
                        "percentage": 11.602209944751381
                    }
                }
            }
        },
        "pytest-dev__pytest-5809": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "src/_pytest/pastebin.py": [
                            [
                                "+",
                                "params = {\"code\": contents, \"lexer\": \"text\", \"expiry\": \"1week\"}"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 5,
                        "percentage": 83.33333333333334
                    }
                }
            }
        },
        "pytest-dev__pytest-5840": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "src/_pytest/config/__init__.py",
                        "src/_pytest/pathlib.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-6197": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/python.py": [
                            "class PyobjMixin(PyobjContext):",
                            "def _genfunctions(self, name, funcobj):",
                            "def isinitpath(self, path):"
                        ]
                    },
                    "lines": {
                        "src/_pytest/python.py": [
                            [
                                "-",
                                "def obj(self, value):"
                            ],
                            [
                                "+",
                                "self._obj = value"
                            ],
                            [
                                "-",
                                "self._ALLOW_MARKERS = False"
                            ],
                            [
                                "+",
                                "def obj(self, value):"
                            ],
                            [
                                "+",
                                "return obj"
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "-",
                                "return self._obj"
                            ],
                            [
                                "-",
                                "self.own_markers.extend(get_unpacked_marks(obj))"
                            ],
                            [
                                "-",
                                "@obj.setter"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "def __init__(self, fspath, parent=None, config=None, session=None, nodeid=None):"
                            ],
                            [
                                "+",
                                "self.own_markers.extend(get_unpacked_marks(self.obj))"
                            ],
                            [
                                "-",
                                "if fspath.basename == \"__init__.py\":"
                            ],
                            [
                                "-",
                                "self, fspath, parent=parent, config=config, session=session, nodeid=nodeid"
                            ],
                            [
                                "+",
                                "@obj.setter"
                            ],
                            [
                                "-",
                                "nodes.FSCollector.__init__("
                            ],
                            [
                                "-",
                                "self._obj = value"
                            ],
                            [
                                "-",
                                "self._mount_obj_if_needed()"
                            ],
                            [
                                "-",
                                "def _mount_obj_if_needed(self):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 1,
                        "percentage": 5.0
                    }
                }
            }
        },
        "pytest-dev__pytest-6202": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/python.py": [
                            "def getmodpath(self, stopatmodule=True, includemodule=False):"
                        ]
                    },
                    "lines": {
                        "src/_pytest/python.py": [
                            [
                                "-",
                                "s = \".\".join(parts)"
                            ],
                            [
                                "+",
                                "return \".\".join(parts)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "pytest-dev__pytest-7205": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "src/_pytest/setuponly.py": [
                            [
                                "+",
                                "tw.write(\"[{}]\".format(saferepr(fixturedef.cached_param, maxsize=42)))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "pytest-dev__pytest-7236": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/unittest.py": [
                            "def collect(self):",
                            "def _make_xunit_fixture(obj, setup_name, teardown_name, scope, pass_self):",
                            "def runtest(self):",
                            "def check_testcase_implements_trial_reporter(done=[]):"
                        ]
                    },
                    "lines": {
                        "src/_pytest/unittest.py": [
                            [
                                "-",
                                "skipped = getattr(cls, \"__unittest_skip__\", False)"
                            ],
                            [
                                "+",
                                "def _is_skipped(obj) -> bool:"
                            ],
                            [
                                "+",
                                "if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):"
                            ],
                            [
                                "+",
                                "skipped = _is_skipped(cls)"
                            ],
                            [
                                "+",
                                "if _is_skipped(self):"
                            ],
                            [
                                "-",
                                "if getattr(self, \"__unittest_skip__\", None):"
                            ],
                            [
                                "+",
                                "return bool(getattr(obj, \"__unittest_skip__\", False))"
                            ],
                            [
                                "+",
                                "\"\"\"Return True if the given object has been marked with @unittest.skip\"\"\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7324": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/mark/expression.py": [
                            "def not_expr(s: Scanner) -> ast.expr:",
                            "def __init__(self, matcher: Callable[[str], bool]) -> None:",
                            "def reject(self, expected: Sequence[TokenType]) -> \"NoReturn\":"
                        ]
                    },
                    "lines": {
                        "src/_pytest/mark/expression.py": [
                            [
                                "+",
                                "# is added to identifiers in the conversion to Python AST."
                            ],
                            [
                                "+",
                                "# True, False and None are legal match expression identifiers,"
                            ],
                            [
                                "-",
                                "return ast.Name(ident.value, ast.Load())"
                            ],
                            [
                                "+",
                                "return ast.Name(IDENT_PREFIX + ident.value, ast.Load())"
                            ],
                            [
                                "+",
                                "# but illegal as Python identifiers. To fix this, this prefix"
                            ],
                            [
                                "-",
                                "return self.matcher(key)"
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "+",
                                "return self.matcher(key[len(IDENT_PREFIX) :])"
                            ],
                            [
                                "+",
                                "IDENT_PREFIX = \"$\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7432": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "src/_pytest/skipping.py": [
                            [
                                "+",
                                "if ("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "pytest-dev__pytest-7490": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/skipping.py": [
                            "def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:"
                        ]
                    },
                    "lines": {
                        "src/_pytest/skipping.py": [
                            [
                                "+",
                                "if xfailed is None:"
                            ],
                            [
                                "+",
                                "if xfailed and not item.config.option.runxfail and not xfailed.run:"
                            ],
                            [
                                "-",
                                "if xfailed and not xfailed.run:"
                            ],
                            [
                                "+",
                                "# The test run may have added an xfail mark dynamically."
                            ],
                            [
                                "+",
                                "item._store[skipped_by_mark_key] = skipped is not None"
                            ],
                            [
                                "-",
                                "item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)"
                            ],
                            [
                                "-",
                                "xfail(\"[NOTRUN] \" + xfailed.reason)"
                            ],
                            [
                                "+",
                                "xfail(\"[NOTRUN] \" + xfailed.reason)"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)"
                            ],
                            [
                                "-",
                                "item._store[skipped_by_mark_key] = True"
                            ],
                            [
                                "-",
                                "item._store[skipped_by_mark_key] = False"
                            ],
                            [
                                "-",
                                "if not item.config.option.runxfail:"
                            ],
                            [
                                "+",
                                "xfailed = item._store.get(xfailed_key, None)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 1,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "pytest-dev__pytest-7521": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/capture.py": [
                            "def __init__(self, targetfd: int) -> None:"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7571": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/logging.py": [
                            "def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> Non",
                            "def _finalize(self) -> None:",
                            "def __init__(self, item: nodes.Node) -> None:"
                        ]
                    },
                    "lines": {
                        "src/_pytest/logging.py": [
                            [
                                "+",
                                "self._initial_handler_level = None  # type: Optional[int]"
                            ],
                            [
                                "+",
                                "if self._initial_handler_level is not None:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7982": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "src/_pytest/pathlib.py": [
                            [
                                "+",
                                "if entry.is_dir() and recurse(entry):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "pytest-dev__pytest-8399": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "src/_pytest/python.py"
                    ],
                    "functions": {
                        "src/_pytest/unittest.py": [
                            "def cleanup(*args):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-10297": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/linear_model/ridge.py": [
                            "class RidgeCV(_BaseRidgeCV, RegressorMixin):"
                        ]
                    },
                    "lines": {
                        "sklearn/linear_model/ridge.py": [
                            [
                                "-",
                                "the mean squared errors (by default) or the values of the \\"
                            ],
                            [
                                "+",
                                "will contain the mean squared errors (by default) or the values \\"
                            ],
                            [
                                "-",
                                "below). This flag is only compatible with `cv=None` (i.e. using"
                            ],
                            [
                                "-",
                                "contain the mean squared errors (by default) or the values of the \\"
                            ],
                            [
                                "+",
                                "Cross-validation values for each alpha (if ``store_cv_values=True``\\"
                            ],
                            [
                                "-",
                                "cv_values_ : array, shape = [n_samples, n_alphas] or \\"
                            ],
                            [
                                "+",
                                "store_cv_values : boolean, default=False"
                            ],
                            [
                                "+",
                                "``{loss,score}_func`` function (if provided in the constructor)."
                            ],
                            [
                                "+",
                                "below). This flag is only compatible with ``cv=None`` (i.e. using"
                            ],
                            [
                                "+",
                                "Flag indicating if the cross-validation values corresponding to"
                            ],
                            [
                                "+",
                                "and ``cv=None``). After ``fit()`` has been called, this attribute \\"
                            ],
                            [
                                "+",
                                "each alpha should be stored in the ``cv_values_`` attribute (see"
                            ],
                            [
                                "-",
                                "Cross-validation values for each alpha (if `store_cv_values=True` and"
                            ],
                            [
                                "+",
                                "cv_values_ : array, shape = [n_samples, n_targets, n_alphas], optional"
                            ],
                            [
                                "+",
                                "Generalized Cross-Validation)."
                            ],
                            [
                                "+",
                                "Cross-validation values for each alpha (if ``store_cv_values=True`` and"
                            ],
                            [
                                "+",
                                "contain the mean squared errors (by default) or the values of the"
                            ],
                            [
                                "-",
                                "`cv=None`). After `fit()` has been called, this attribute will contain \\"
                            ],
                            [
                                "+",
                                "store_cv_values=False):"
                            ],
                            [
                                "-",
                                "each alpha should be stored in the `cv_values_` attribute (see"
                            ],
                            [
                                "+",
                                "normalize=False, scoring=None, cv=None, class_weight=None,"
                            ],
                            [
                                "-",
                                "`{loss,score}_func` function (if provided in the constructor)."
                            ],
                            [
                                "-",
                                "`cv=None`). After `fit()` has been called, this attribute will \\"
                            ],
                            [
                                "+",
                                "``cv=None``). After ``fit()`` has been called, this attribute will"
                            ],
                            [
                                "+",
                                "of the ``{loss,score}_func`` function (if provided in the constructor)."
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "-",
                                "shape = [n_samples, n_responses, n_alphas], optional"
                            ],
                            [
                                "-",
                                "Cross-validation values for each alpha (if `store_cv_values=True` and \\"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 31,
                        "covered": 3,
                        "percentage": 9.67741935483871
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-10844": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sklearn/metrics/cluster/supervised.py": [
                            [
                                "+",
                                "sparse=True).astype(np.int64)"
                            ],
                            [
                                "-",
                                "c = contingency_matrix(labels_true, labels_pred, sparse=True)"
                            ],
                            [
                                "+",
                                "c = contingency_matrix(labels_true, labels_pred,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-10908": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/feature_extraction/text.py": [
                            "def inverse_transform(self, X):"
                        ]
                    },
                    "lines": {
                        "sklearn/feature_extraction/text.py": [
                            [
                                "+",
                                "if not hasattr(self, 'vocabulary_'):"
                            ],
                            [
                                "+",
                                "self._validate_vocabulary()"
                            ],
                            [
                                "+",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-11310": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/model_selection/_search.py": [
                            "def _store(key_name, array, weights=None, splits=False, rank=False):",
                            "class RandomizedSearchCV(BaseSearchCV):",
                            "class GridSearchCV(BaseSearchCV):"
                        ]
                    },
                    "lines": {
                        "sklearn/model_selection/_search.py": [
                            [
                                "+",
                                "refit_end_time = time.time()"
                            ],
                            [
                                "+",
                                "Seconds used for refitting the best model on the whole dataset."
                            ],
                            [
                                "+",
                                "refit_start_time = time.time()"
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "+",
                                "refit_time_ : float"
                            ],
                            [
                                "+",
                                "self.refit_time_ = refit_end_time - refit_start_time"
                            ],
                            [
                                "+",
                                "This is present only if ``refit`` is not False."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 1,
                        "percentage": 12.5
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-11578": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sklearn/linear_model/logistic.py": [
                            [
                                "+",
                                "log_reg = LogisticRegression(multi_class=multi_class)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-12585": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-12682": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "examples/decomposition/plot_sparse_coding.py",
                        "sklearn/decomposition/dict_learning.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 56,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-12973": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/linear_model/least_angle.py": [
                            "def __init__(self, criterion='aic', fit_intercept=True, verbose=False,",
                            "def fit(self, X, y, copy_X=True):"
                        ]
                    },
                    "lines": {
                        "sklearn/linear_model/least_angle.py": [
                            [
                                "+",
                                "X, y, self.fit_intercept, self.normalize, copy_X)"
                            ],
                            [
                                "+",
                                "if copy_X is None:"
                            ],
                            [
                                "-",
                                "X, y, self.fit_intercept, self.normalize, self.copy_X)"
                            ],
                            [
                                "+",
                                "of copy_X made at instance creation."
                            ],
                            [
                                "+",
                                "copy_X = self.copy_X"
                            ],
                            [
                                "+",
                                "If provided, this parameter will override the choice"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 4,
                        "percentage": 40.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13124": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/model_selection/_split.py": [
                            "def __init__(self, n_splits='warn', shuffle=False, random_state=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/model_selection/_split.py": [
                            [
                                "+",
                                "rng = check_random_state(self.random_state)"
                            ],
                            [
                                "+",
                                "Whether to shuffle each class's samples before splitting into batches."
                            ],
                            [
                                "-",
                                "Whether to shuffle each stratification of the data before splitting"
                            ],
                            [
                                "-",
                                "into batches."
                            ],
                            [
                                "-",
                                "rng = self.random_state"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13135": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/preprocessing/_discretization.py": [
                            "def fit(self, X, y=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/preprocessing/_discretization.py": [
                            [
                                "+",
                                "centers.sort()"
                            ],
                            [
                                "+",
                                "# Must sort, centers may be unsorted even with sorted init"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13142": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/mixture/base.py": [
                            "def fit_predict(self, X, y=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/mixture/base.py": [
                            [
                                "+",
                                "# fit_predict(X) are always consistent with fit(X).predict(X)"
                            ],
                            [
                                "+",
                                "# for any value of max_iter and tol (and any random_state)."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 8,
                        "percentage": 80.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13328": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/linear_model/huber.py": [
                            "def fit(self, X, y, sample_weight=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/linear_model/huber.py": [
                            [
                                "-",
                                "X, y, copy=False, accept_sparse=['csr'], y_numeric=True)"
                            ],
                            [
                                "+",
                                "X, y, copy=False, accept_sparse=['csr'], y_numeric=True,"
                            ],
                            [
                                "+",
                                "dtype=[np.float64, np.float32])"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13439": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/pipeline.py": [
                            "def _iter(self, with_final=True):"
                        ]
                    },
                    "lines": {
                        "sklearn/pipeline.py": [
                            [
                                "+",
                                "Returns the length of the Pipeline"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "return len(self.steps)"
                            ],
                            [
                                "+",
                                "def __len__(self):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13496": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/ensemble/iforest.py": [
                            "def __init__(self,"
                        ]
                    },
                    "lines": {
                        "sklearn/ensemble/iforest.py": [
                            [
                                "+",
                                "When set to ``True``, reuse the solution of the previous call to fit"
                            ],
                            [
                                "+",
                                "verbose=0,"
                            ],
                            [
                                "+",
                                "and add more estimators to the ensemble, otherwise, just fit a whole"
                            ],
                            [
                                "-",
                                "verbose=0):"
                            ],
                            [
                                "+",
                                ".. versionadded:: 0.21"
                            ],
                            [
                                "+",
                                "warm_start : bool, optional (default=False)"
                            ],
                            [
                                "+",
                                "warm_start=False):"
                            ],
                            [
                                "+",
                                "new forest. See :term:`the Glossary <warm_start>`."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13779": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/ensemble/voting.py": [
                            "def fit(self, X, y, sample_weight=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/ensemble/voting.py": [
                            [
                                "+",
                                "continue"
                            ],
                            [
                                "+",
                                "if step is None:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14053": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sklearn/tree/export.py": [
                            [
                                "+",
                                "feature_names_ = [feature_names[i] if i != _tree.TREE_UNDEFINED"
                            ],
                            [
                                "+",
                                "else None for i in tree_.feature]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14087": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/linear_model/logistic.py": [
                            "def fit(self, X, y, sample_weight=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/linear_model/logistic.py": [
                            [
                                "-",
                                "self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))"
                            ],
                            [
                                "+",
                                "if multi_class == 'ovr':"
                            ],
                            [
                                "-",
                                "best_indices_l1 = best_indices // len(self.Cs_)"
                            ],
                            [
                                "+",
                                "self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))"
                            ],
                            [
                                "+",
                                "self.l1_ratio_.append(None)"
                            ],
                            [
                                "+",
                                "best_indices_l1 = best_indices // len(self.Cs_)"
                            ],
                            [
                                "+",
                                "if self.penalty == 'elasticnet':"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14141": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sklearn/utils/_show_versions.py": [
                            [
                                "+",
                                "\"joblib\","
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14496": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/cluster/optics_.py": [
                            "class OPTICS(BaseEstimator, ClusterMixin):",
                            "def _xi_cluster(reachability_plot, predecessor_plot, ordering, xi, min_samples,",
                            "def compute_optics_graph(X, min_samples, max_eps, metric, p, metric_params,"
                        ]
                    },
                    "lines": {
                        "sklearn/cluster/optics_.py": [
                            [
                                "+",
                                "min_samples : int > 1"
                            ],
                            [
                                "-",
                                "min_cluster_size : int > 1 or float between 0 and 1"
                            ],
                            [
                                "+",
                                "min_cluster_size : int > 1"
                            ],
                            [
                                "+",
                                "Minimum number of samples in an OPTICS cluster."
                            ],
                            [
                                "+",
                                "min_samples : int > 1 or float between 0 and 1"
                            ],
                            [
                                "-",
                                "Expressed as an absolute number or a fraction of the number of samples"
                            ],
                            [
                                "-",
                                "(rounded to be at least 2)."
                            ],
                            [
                                "-",
                                "Minimum number of samples in an OPTICS cluster, expressed as an"
                            ],
                            [
                                "-",
                                "absolute number or a fraction of the number of samples (rounded"
                            ],
                            [
                                "-",
                                "to be at least 2)."
                            ],
                            [
                                "+",
                                "min_samples : int > 1 or float between 0 and 1 (default=5)"
                            ],
                            [
                                "-",
                                "min_samples : int (default=5)"
                            ],
                            [
                                "-",
                                "min_samples : int > 1 or float between 0 and 1 (default=None)"
                            ],
                            [
                                "+",
                                "min_cluster_size = max(2, int(min_cluster_size * n_samples))"
                            ],
                            [
                                "+",
                                "min_samples = max(2, int(min_samples * n_samples))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 2,
                        "percentage": 11.76470588235294
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14629": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sklearn/multioutput.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14710": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py": [
                            "def _check_early_stopping_scorer(self, X_binned_small_train, y_small_train,"
                        ]
                    },
                    "lines": {
                        "sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py": [
                            [
                                "+",
                                "if is_classifier(self):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14894": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/svm/base.py": [
                            "def _sparse_fit(self, X, y, sample_weight, solver_type, kernel,"
                        ]
                    },
                    "lines": {
                        "sklearn/svm/base.py": [
                            [
                                "+",
                                "dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,"
                            ],
                            [
                                "+",
                                "dual_coef_indices.size / n_class)"
                            ],
                            [
                                "+",
                                "if not n_SV:"
                            ],
                            [
                                "+",
                                "self.dual_coef_ = sp.csr_matrix([])"
                            ],
                            [
                                "-",
                                "(n_class, n_SV))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 8,
                        "percentage": 61.53846153846154
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14983": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/model_selection/_split.py": [
                            "def get_n_splits(self, X=None, y=None, groups=None):",
                            "def _build_repr(self):"
                        ]
                    },
                    "lines": {
                        "sklearn/model_selection/_split.py": [
                            [
                                "+",
                                "def __repr__(self):"
                            ],
                            [
                                "+",
                                "if value is None and hasattr(self, 'cvargs'):"
                            ],
                            [
                                "+",
                                "value = self.cvargs.get(key, None)"
                            ],
                            [
                                "+",
                                "return _build_repr(self)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-15100": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sklearn/feature_extraction/text.py": [
                            [
                                "-",
                                "normalized = unicodedata.normalize('NFKD', s)"
                            ],
                            [
                                "+",
                                "s.encode(\"ASCII\", errors=\"strict\")"
                            ],
                            [
                                "+",
                                "normalized = unicodedata.normalize('NFKD', s)"
                            ],
                            [
                                "+",
                                "# characters and we can avoid an expensive list comprehension"
                            ],
                            [
                                "+",
                                "except UnicodeEncodeError:"
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "+",
                                "# If `s` is ASCII-compatible, then it does not contain any accented"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25102": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sklearn/base.py",
                        "sklearn/feature_selection/_base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 28,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25232": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/impute/_iterative.py": [
                            "def _initial_imputation(self, X, in_fit=False):",
                            "def __init__("
                        ]
                    },
                    "lines": {
                        "sklearn/impute/_iterative.py": [
                            [
                                "+",
                                "When `strategy=\"constant\"`, `fill_value` is used to replace all"
                            ],
                            [
                                "+",
                                "data and \"missing_value\" for strings or object data types."
                            ],
                            [
                                "+",
                                "fill_value : str or numerical value, default=None"
                            ],
                            [
                                "+",
                                "If `None`, `fill_value` will be 0 when imputing numerical"
                            ],
                            [
                                "+",
                                "`fill_value` must be a string."
                            ],
                            [
                                "+",
                                "occurrences of missing_values. For string or object data types,"
                            ],
                            [
                                "+",
                                "\"fill_value\": \"no_validation\",  # any object is valid"
                            ],
                            [
                                "+",
                                ".. versionadded:: 1.3"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 12,
                        "covered": 4,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25747": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sklearn/utils/_set_output.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25931": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/ensemble/_iforest.py": [
                            "def score_samples(self, X):",
                            "def fit(self, X, y=None, sample_weight=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/ensemble/_iforest.py": [
                            [
                                "+",
                                "# Take the opposite of the scores as bigger is better (here less abnormal)"
                            ],
                            [
                                "-",
                                "# code structure from ForestClassifier/predict_proba"
                            ],
                            [
                                "+",
                                "# Code structure from ForestClassifier/predict_proba"
                            ],
                            [
                                "+",
                                "Input validation would remove feature names, so we disable it."
                            ],
                            [
                                "+",
                                "self.offset_ = np.percentile(self._score_samples(X), 100.0 * self.contamination)"
                            ],
                            [
                                "-",
                                "# Take the opposite of the scores as bigger is better (here less"
                            ],
                            [
                                "-",
                                "self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)"
                            ],
                            [
                                "+",
                                "# To avoid performing input validation a second time we call"
                            ],
                            [
                                "+",
                                "# Else, define offset_ wrt contamination parameter"
                            ],
                            [
                                "-",
                                "check_is_fitted(self)"
                            ],
                            [
                                "-",
                                "# else, define offset_ wrt contamination parameter"
                            ],
                            [
                                "+",
                                "return self._score_samples(X)"
                            ],
                            [
                                "-",
                                "# abnormal)"
                            ],
                            [
                                "+",
                                "# _score_samples rather than score_samples"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "def _score_samples(self, X):"
                            ],
                            [
                                "+",
                                "check_is_fitted(self)"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "\"\"\"Private version of score_samples without input validation."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 1,
                        "percentage": 5.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25973": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/feature_selection/_sequential.py": [
                            "def _get_best_new_feature_score(self, estimator, X, y, current_mask):",
                            "def fit(self, X, y=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/feature_selection/_sequential.py": [
                            [
                                "-",
                                "from ..base import BaseEstimator, MetaEstimatorMixin, clone"
                            ],
                            [
                                "+",
                                "def _get_best_new_feature_score(self, estimator, X, y, cv, current_mask):"
                            ],
                            [
                                "+",
                                "from ..base import BaseEstimator, MetaEstimatorMixin, clone, is_classifier"
                            ],
                            [
                                "-",
                                "def _get_best_new_feature_score(self, estimator, X, y, current_mask):"
                            ],
                            [
                                "+",
                                "from ..model_selection import cross_val_score, check_cv"
                            ],
                            [
                                "+",
                                "cv=cv,"
                            ],
                            [
                                "-",
                                "cv=self.cv,"
                            ],
                            [
                                "+",
                                "cloned_estimator, X, y, cv, current_mask"
                            ],
                            [
                                "-",
                                "cloned_estimator, X, y, current_mask"
                            ],
                            [
                                "-",
                                "from ..model_selection import cross_val_score"
                            ],
                            [
                                "+",
                                "cv = check_cv(self.cv, y, classifier=is_classifier(self.estimator))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 1,
                        "percentage": 8.333333333333332
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-26194": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sklearn/metrics/_ranking.py": [
                            [
                                "-",
                                "thresholds : ndarray of shape = (n_thresholds,)"
                            ],
                            [
                                "+",
                                "thresholds : ndarray of shape (n_thresholds,)"
                            ],
                            [
                                "-",
                                "and is arbitrarily set to `max(y_score) + 1`."
                            ],
                            [
                                "+",
                                "ensure that the curve starts at `(0, 0)`. This threshold corresponds to the"
                            ],
                            [
                                "+",
                                "and is arbitrarily set to `np.inf`."
                            ],
                            [
                                "+",
                                "# get dtype of `y_score` even if it is an array-like"
                            ],
                            [
                                "+",
                                "An arbritrary threshold is added for the case `tpr=0` and `fpr=0` to"
                            ],
                            [
                                "-",
                                "array([1.8 , 0.8 , 0.4 , 0.35, 0.1 ])"
                            ],
                            [
                                "+",
                                "thresholds = np.r_[np.inf, thresholds]"
                            ],
                            [
                                "+",
                                "array([ inf, 0.8 , 0.4 , 0.35, 0.1 ])"
                            ],
                            [
                                "+",
                                "`np.inf`."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 2,
                        "percentage": 15.384615384615385
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-26323": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/compose/_column_transformer.py": [
                            "def set_output(self, *, transform=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/compose/_column_transformer.py": [
                            [
                                "+",
                                "_safe_set_output(self.remainder, transform=transform)"
                            ],
                            [
                                "+",
                                "if self.remainder not in {\"passthrough\", \"drop\"}:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-9288": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sklearn/cluster/k_means_.py": [
                            [
                                "+",
                                "random_state=seed)"
                            ],
                            [
                                "-",
                                "seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)"
                            ],
                            [
                                "+",
                                "for seed in seeds:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 4,
                        "percentage": 57.14285714285714
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10323": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/directives/code.py": [
                            "def read(self, location: Tuple[str, int] = None) -> Tuple[str, int]:"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 4,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10435": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/writers/latex.py": [
                            "def visit_literal(self, node: Element) -> None:"
                        ]
                    },
                    "lines": {
                        "sphinx/writers/latex.py": [
                            [
                                "-",
                                "hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}"
                            ],
                            [
                                "+",
                                "self.body.append('%' + CR + '}}')"
                            ],
                            [
                                "-",
                                "r'\\sphinxcode{\\sphinxupquote{')"
                            ],
                            [
                                "+",
                                "hlcode = hlcode.rstrip()[:-15]  # strip \\n\\end{Verbatim}"
                            ],
                            [
                                "+",
                                "r'\\sphinxcode{\\sphinxupquote{%')"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10449": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/autodoc/typehints.py": [
                            "def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element",
                            "def insert_field_list(node: Element) -> nodes.field_list:"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/autodoc/typehints.py": [
                            [
                                "+",
                                "if annotation == 'None' and suppress_rtype:"
                            ],
                            [
                                "+",
                                "modify_field_list(field_list, annotations[fullname], suppress_rtype=True)"
                            ],
                            [
                                "+",
                                "if objtype == 'class':"
                            ],
                            [
                                "-",
                                "def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:"
                            ],
                            [
                                "+",
                                "return"
                            ],
                            [
                                "-",
                                "modify_field_list(field_list, annotations[fullname])"
                            ],
                            [
                                "+",
                                "modify_field_list(field_list, annotations[fullname])"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "annotation = annotations['return']"
                            ],
                            [
                                "+",
                                "suppress_rtype: bool = False) -> None:"
                            ],
                            [
                                "+",
                                "def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 12,
                        "covered": 1,
                        "percentage": 8.333333333333332
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10466": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/builders/gettext.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10614": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sphinx/ext/inheritance_diagram.py": [
                            [
                                "-",
                                "urls[child['reftitle']] = child.get('refuri')"
                            ],
                            [
                                "+",
                                "urls[refname] = child.get('refuri')"
                            ],
                            [
                                "+",
                                "# Construct the name from the URI if the reference is external via intersphinx"
                            ],
                            [
                                "+",
                                "refname = child['reftitle']"
                            ],
                            [
                                "-",
                                "if graphviz_output_format == 'SVG':"
                            ],
                            [
                                "+",
                                "urls[child['reftitle']] = current_filename + '#' + child.get('refid')"
                            ],
                            [
                                "+",
                                "if not child.get('internal', True):"
                            ],
                            [
                                "+",
                                "refname = child['refuri'].rsplit('#', 1)[-1]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 3,
                        "percentage": 27.27272727272727
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10673": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/directives/other.py",
                        "sphinx/environment/collectors/toctree.py"
                    ],
                    "functions": {
                        "sphinx/environment/adapters/toctree.py": [
                            "def resolve(self, docname: str, builder: \"Builder\", toctree: addnodes.toctree,",
                            "def _entries_from_toctree(toctreenode: addnodes.toctree, parents: List[str],"
                        ]
                    },
                    "lines": {
                        "sphinx/environment/adapters/toctree.py": [
                            [
                                "+",
                                "reference = nodes.reference('', title, internal=True,"
                            ],
                            [
                                "+",
                                "title = sectionname"
                            ],
                            [
                                "-",
                                "from typing import TYPE_CHECKING, Any, Iterable, List, Optional, cast"
                            ],
                            [
                                "+",
                                "refuri=docname, anchorname='')"
                            ],
                            [
                                "+",
                                "generated_docnames: Dict[str, Tuple[str, str, str]] = self.env.domains['std'].initial_data['labels'].copy()  # NoQA: E501"
                            ],
                            [
                                "+",
                                "from typing import TYPE_CHECKING, Any, Dict, Iterable, List, Optional, Tuple, cast"
                            ],
                            [
                                "+",
                                "elif ref in generated_docnames:"
                            ],
                            [
                                "+",
                                "# don't show subitems"
                            ],
                            [
                                "+",
                                "docname, _, sectionname = generated_docnames[ref]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 26,
                        "covered": 4,
                        "percentage": 15.384615384615385
                    }
                }
            }
        },
        "sphinx-doc__sphinx-11445": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sphinx/util/rst.py": [
                            [
                                "-",
                                "from jinja2 import Environment"
                            ],
                            [
                                "-",
                                "from jinja2 import environmentfilter as pass_environment"
                            ],
                            [
                                "+",
                                "from jinja2 import Environment, pass_environment"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "docinfo_re = re.compile(':\\\\w+:.*?')"
                            ],
                            [
                                "-",
                                "from jinja2.utils import pass_environment"
                            ],
                            [
                                "+",
                                "if FIELD_NAME_RE.match(line):"
                            ],
                            [
                                "-",
                                "except ImportError:"
                            ],
                            [
                                "+",
                                "from docutils.parsers.rst.states import Body"
                            ],
                            [
                                "+",
                                "lineno = 0"
                            ],
                            [
                                "-",
                                "try:"
                            ],
                            [
                                "+",
                                "FIELD_NAME_RE = re.compile(Body.patterns['field_marker'])"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 1,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "sphinx-doc__sphinx-11510": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/directives/other.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 31,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7440": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/domains/std.py": [
                            "class StandardDomain(Domain):"
                        ]
                    },
                    "lines": {
                        "sphinx/domains/std.py": [
                            [
                                "+",
                                "'term':    XRefRole(innernodeclass=nodes.inline,"
                            ],
                            [
                                "-",
                                "'term':    XRefRole(lowercase=True, innernodeclass=nodes.inline,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7454": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/domains/python.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 100
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7462": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/pycode/ast.py"
                    ],
                    "functions": {
                        "sphinx/domains/python.py": [
                            "def unparse(node: ast.AST) -> List[Node]:"
                        ]
                    },
                    "lines": {
                        "sphinx/domains/python.py": [
                            [
                                "+",
                                "result = [addnodes.desc_sig_punctuation('', '('),"
                            ],
                            [
                                "-",
                                "result.extend(unparse(elem))"
                            ],
                            [
                                "+",
                                "result.extend(unparse(elem))"
                            ],
                            [
                                "-",
                                "for elem in node.elts:"
                            ],
                            [
                                "-",
                                "result.append(addnodes.desc_sig_punctuation('', ', '))"
                            ],
                            [
                                "+",
                                "result.append(addnodes.desc_sig_punctuation('', ', '))"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "if node.elts:"
                            ],
                            [
                                "+",
                                "for elem in node.elts:"
                            ],
                            [
                                "-",
                                "result = []"
                            ],
                            [
                                "+",
                                "result = []"
                            ],
                            [
                                "+",
                                "addnodes.desc_sig_punctuation('', ')')]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 3,
                        "percentage": 15.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7590": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/domains/c.py",
                        "sphinx/util/cfamily.py"
                    ],
                    "functions": {
                        "sphinx/domains/cpp.py": [
                            "def _stringify(self, transform: StringifyTransform) -> str:",
                            "def _parse_literal(self) -> ASTLiteral:",
                            "def describe_signature(self, signode: TextElement, mode: str,",
                            "def describe_signature(self, signode: TextElement, mode: str, env: \"BuildEnviron"
                        ]
                    },
                    "lines": {
                        "sphinx/domains/cpp.py": [
                            [
                                "+",
                                "return ASTUserDefinedLiteral(literal, ident)"
                            ],
                            [
                                "-",
                                "hex_literal_re, binary_literal_re, float_literal_re,"
                            ],
                            [
                                "-",
                                "key = symbol.get_lookup_key()"
                            ],
                            [
                                "+",
                                "if self.match(float_literal_re):"
                            ],
                            [
                                "+",
                                "def get_id(self, version: int) -> str:"
                            ],
                            [
                                "+",
                                "if hasSuffix:"
                            ],
                            [
                                "+",
                                "assert not self.is_anon()"
                            ],
                            [
                                "-",
                                "pos = self.pos"
                            ],
                            [
                                "+",
                                "return intLit"
                            ],
                            [
                                "+",
                                "float_literal_re, float_literal_suffix_re,"
                            ],
                            [
                                "+",
                                "reftarget=targetText, modname=None,"
                            ],
                            [
                                "+",
                                "return _udl(ASTStringLiteral(string))"
                            ],
                            [
                                "-",
                                "pnode['cpp:parent_key'] = key"
                            ],
                            [
                                "+",
                                "# TODO: floats should be mangled by writing the hex of the binary representation"
                            ],
                            [
                                "+",
                                "def __init__(self, literal: ASTLiteral, ident: ASTIdentifier):"
                            ],
                            [
                                "+",
                                "elif mode == 'udl':"
                            ],
                            [
                                "+",
                                "reftype='identifier',"
                            ],
                            [
                                "+",
                                "pnode += nodes.Text(self.identifier)"
                            ],
                            [
                                "+",
                                "return 'clL_Zli{}E{}E'.format(self.ident.get_id(version), self.literal.get_id(version))"
                            ],
                            [
                                "+",
                                "pnode = addnodes.pending_xref('', refdomain='cpp',"
                            ],
                            [
                                "+",
                                "################################################################################"
                            ],
                            [
                                "+",
                                "# hmm, should we care if it's a keyword?"
                            ],
                            [
                                "+",
                                "return transform(self.literal) + transform(self.ident)"
                            ],
                            [
                                "-",
                                "for regex in [float_literal_re, binary_literal_re, hex_literal_re,"
                            ],
                            [
                                "+",
                                "udl_identifier_re = re.compile(r'''(?x)"
                            ],
                            [
                                "+",
                                "return _udl(floatLit)"
                            ],
                            [
                                "+",
                                "assert len(templateArgs) == 0"
                            ],
                            [
                                "+",
                                "pos = self.pos"
                            ],
                            [
                                "+",
                                "hex_literal_re, binary_literal_re, integers_literal_suffix_re,"
                            ],
                            [
                                "+",
                                "assert len(prefix) == 0"
                            ],
                            [
                                "+",
                                "[a-zA-Z_][a-zA-Z0-9_]*\\b   # note, no word boundary in the beginning"
                            ],
                            [
                                "+",
                                "self.literal = literal"
                            ],
                            [
                                "+",
                                "return floatLit"
                            ],
                            [
                                "+",
                                "self.ident = ident"
                            ],
                            [
                                "+",
                                "ident = ASTIdentifier(self.matched_text)"
                            ],
                            [
                                "+",
                                "# it looks like GCC does not disallow keywords"
                            ],
                            [
                                "-",
                                "return ASTCharLiteral(prefix, data)"
                            ],
                            [
                                "+",
                                "signode += pnode"
                            ],
                            [
                                "+",
                                "# the target is 'operator\"\"id' instead of just 'id'"
                            ],
                            [
                                "+",
                                "def _stringify(self, transform: StringifyTransform) -> str:"
                            ],
                            [
                                "+",
                                "charLit = ASTCharLiteral(prefix, data)"
                            ],
                            [
                                "+",
                                "if not self.match(udl_identifier_re):"
                            ],
                            [
                                "-",
                                "return ASTNumberLiteral(self.definition[pos:self.pos])"
                            ],
                            [
                                "+",
                                "return _udl(intLit)"
                            ],
                            [
                                "-",
                                "# TODO: user-defined lit"
                            ],
                            [
                                "+",
                                "def _udl(literal: ASTLiteral) -> ASTLiteral:"
                            ],
                            [
                                "+",
                                "pnode['cpp:parent_key'] = symbol.get_lookup_key()"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "self.ident.describe_signature(signode, \"udl\", env, \"\", \"\", symbol)"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "hasSuffix = self.match(integers_literal_suffix_re)"
                            ],
                            [
                                "+",
                                "# TODO: the ID should be have L E around it"
                            ],
                            [
                                "+",
                                "return literal"
                            ],
                            [
                                "+",
                                "classname=None)"
                            ],
                            [
                                "+",
                                "env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:"
                            ],
                            [
                                "+",
                                "''')"
                            ],
                            [
                                "+",
                                "def describe_signature(self, signode: TextElement, mode: str,"
                            ],
                            [
                                "+",
                                "hasSuffix = self.match(float_literal_suffix_re)"
                            ],
                            [
                                "+",
                                "self.literal.describe_signature(signode, mode, env, symbol)"
                            ],
                            [
                                "+",
                                "# mangle as if it was a function call: ident(literal)"
                            ],
                            [
                                "+",
                                "return _udl(charLit)"
                            ],
                            [
                                "+",
                                "floatLit = ASTNumberLiteral(self.definition[pos:self.pos])"
                            ],
                            [
                                "+",
                                "for regex in [binary_literal_re, hex_literal_re,"
                            ],
                            [
                                "-",
                                "return ASTStringLiteral(string)"
                            ],
                            [
                                "+",
                                "intLit = ASTNumberLiteral(self.definition[pos:self.pos])"
                            ],
                            [
                                "+",
                                "targetText = 'operator\"\"' + self.identifier"
                            ],
                            [
                                "+",
                                "class ASTUserDefinedLiteral(ASTLiteral):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 97,
                        "covered": 3,
                        "percentage": 3.0927835051546393
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7748": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 72,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7757": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/util/inspect.py": [
                            "def signature_from_str(signature: str) -> inspect.Signature:"
                        ]
                    },
                    "lines": {
                        "sphinx/util/inspect.py": [
                            [
                                "+",
                                "if hasattr(args, \"posonlyargs\"):"
                            ],
                            [
                                "-",
                                "annotation=annotation))"
                            ],
                            [
                                "+",
                                "if defaults[i + posonlyargs] is Parameter.empty:"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "+",
                                "for _ in range(len(defaults), positionals):"
                            ],
                            [
                                "-",
                                "if len(args.args) - i <= len(args.defaults):"
                            ],
                            [
                                "+",
                                "if defaults[i] is Parameter.empty:"
                            ],
                            [
                                "-",
                                "for arg in args.posonlyargs:  # type: ignore"
                            ],
                            [
                                "+",
                                "positionals = len(args.args)"
                            ],
                            [
                                "-",
                                "default = ast_unparse(args.defaults[-len(args.args) + i])"
                            ],
                            [
                                "+",
                                "posonlyargs = 0"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "for i, arg in enumerate(args.posonlyargs):  # type: ignore"
                            ],
                            [
                                "+",
                                "posonlyargs = len(args.posonlyargs)  # type: ignore"
                            ],
                            [
                                "+",
                                "default = ast_unparse(defaults[i])"
                            ],
                            [
                                "+",
                                "default=default, annotation=annotation))"
                            ],
                            [
                                "+",
                                "defaults.insert(0, Parameter.empty)"
                            ],
                            [
                                "+",
                                "positionals = posonlyargs + len(args.args)"
                            ],
                            [
                                "+",
                                "default = Parameter.empty"
                            ],
                            [
                                "+",
                                "default = ast_unparse(defaults[i + posonlyargs])"
                            ],
                            [
                                "+",
                                "defaults = list(args.defaults)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 1,
                        "percentage": 4.545454545454546
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7889": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/autodoc/mock.py": [
                            "def __iter__(self) -> Iterator:"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/autodoc/mock.py": [
                            [
                                "+",
                                "def __getitem__(self, key: Any) -> \"_MockObject\":"
                            ],
                            [
                                "-",
                                "def __getitem__(self, key: str) -> \"_MockObject\":"
                            ],
                            [
                                "-",
                                "return _make_subclass(key, self.__display_name__, self.__class__)()"
                            ],
                            [
                                "+",
                                "return _make_subclass(str(key), self.__display_name__, self.__class__)()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7910": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/napoleon/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7985": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/builders/linkcheck.py": [
                            "def check_uri() -> Tuple[str, str, int]:"
                        ]
                    },
                    "lines": {
                        "sphinx/builders/linkcheck.py": [
                            [
                                "-",
                                "if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):"
                            ],
                            [
                                "+",
                                "for rex in self.to_ignore:"
                            ],
                            [
                                "+",
                                "if uri_re.match(uri):"
                            ],
                            [
                                "+",
                                "return 'unchecked', '', 0"
                            ],
                            [
                                "+",
                                "uri_re = re.compile('[a-z]+://')"
                            ],
                            [
                                "+",
                                "return 'broken', '', 0"
                            ],
                            [
                                "+",
                                "return 'ignored', '', 0"
                            ],
                            [
                                "+",
                                "if path.exists(path.join(self.srcdir, uri)):"
                            ],
                            [
                                "+",
                                "if rex.match(uri):"
                            ],
                            [
                                "+",
                                "# non supported URI schemes (ex. ftp)"
                            ],
                            [
                                "+",
                                "if len(uri) == 0 or uri.startswith(('#', 'mailto:')):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 4,
                        "percentage": 26.666666666666668
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8035": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 30,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8056": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/napoleon/docstring.py": [
                            "def _parse_other_parameters_section(self, section: str) -> List[str]:",
                            "def _consume_field(self, parse_type: bool = True, prefer_type: bool = False"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/napoleon/docstring.py": [
                            [
                                "+",
                                "if multiple and _name:"
                            ],
                            [
                                "+",
                                "fields.append((name.strip(), _type, _desc))"
                            ],
                            [
                                "+",
                                "elif _name or _type or _desc:"
                            ],
                            [
                                "+",
                                "# Allow to declare multiple parameters at once (ex: x, y: int)"
                            ],
                            [
                                "+",
                                "fields = self._consume_fields(multiple=True)"
                            ],
                            [
                                "-",
                                "fields = self._consume_fields()"
                            ],
                            [
                                "+",
                                "fields = self._consume_fields()"
                            ],
                            [
                                "-",
                                "def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False"
                            ],
                            [
                                "-",
                                "if _name or _type or _desc:"
                            ],
                            [
                                "+",
                                "multiple: bool = False) -> List[Tuple[str, str, List[str]]]:"
                            ],
                            [
                                "+",
                                "for name in _name.split(\",\"):"
                            ],
                            [
                                "-",
                                ") -> List[Tuple[str, str, List[str]]]:"
                            ],
                            [
                                "+",
                                "def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8120": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/locale/__init__.py"
                    ],
                    "functions": {
                        "sphinx/application.py": [
                            "def _init_i18n(self) -> None:"
                        ]
                    },
                    "lines": {
                        "sphinx/application.py": [
                            [
                                "-",
                                "from typing import Any, Callable, Dict, IO, List, Tuple, Union"
                            ],
                            [
                                "+",
                                "locale_dirs = [None]  # type: List[Optional[str]]"
                            ],
                            [
                                "+",
                                "locale_dirs += list(repo.locale_dirs)"
                            ],
                            [
                                "+",
                                "locale_dirs += [path.join(package_dir, 'locale')]"
                            ],
                            [
                                "+",
                                "from typing import Any, Callable, Dict, IO, List, Optional, Tuple, Union"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8265": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/pycode/ast.py": [
                            "def visit_Set(self, node: ast.Set) -> str:"
                        ]
                    },
                    "lines": {
                        "sphinx/pycode/ast.py": [
                            [
                                "+",
                                "bool(value.elts) and"
                            ],
                            [
                                "-",
                                "return \"%s[%s]\" % (self.visit(node.value), self.visit(node.slice))"
                            ],
                            [
                                "+",
                                "return \"%s[%s]\" % (self.visit(node.value), self.visit(node.slice))"
                            ],
                            [
                                "+",
                                "if is_simple_tuple(node.slice):"
                            ],
                            [
                                "+",
                                "elif isinstance(node.slice, ast.Index) and is_simple_tuple(node.slice.value):"
                            ],
                            [
                                "+",
                                "def is_simple_tuple(value: ast.AST) -> bool:"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "isinstance(value, ast.Tuple) and"
                            ],
                            [
                                "+",
                                "return ("
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "elts = \", \".join(self.visit(e) for e in node.slice.elts)  # type: ignore"
                            ],
                            [
                                "+",
                                "not any(isinstance(elt, ast.Starred) for elt in value.elts)"
                            ],
                            [
                                "+",
                                "return \"%s[%s]\" % (self.visit(node.value), elts)"
                            ],
                            [
                                "+",
                                "elts = \", \".join(self.visit(e) for e in node.slice.value.elts)  # type: ignore"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 3,
                        "percentage": 17.647058823529413
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8269": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/builders/linkcheck.py": [
                            "def check_uri() -> Tuple[str, str, int]:"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8459": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sphinx/ext/autodoc/typehints.py": [
                            [
                                "+",
                                "sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)"
                            ],
                            [
                                "-",
                                "sig = inspect.signature(obj)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8475": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/builders/linkcheck.py": [
                            "def check_uri() -> Tuple[str, str, int]:"
                        ]
                    },
                    "lines": {
                        "sphinx/builders/linkcheck.py": [
                            [
                                "-",
                                "from requests.exceptions import HTTPError"
                            ],
                            [
                                "+",
                                "except (HTTPError, TooManyRedirects):"
                            ],
                            [
                                "+",
                                "from requests.exceptions import HTTPError, TooManyRedirects"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8548": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/__init__.py",
                        "sphinx/ext/autodoc/importer.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 45,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/domains/python.py"
                    ],
                    "functions": {
                        "sphinx/util/docfields.py": [
                            "def transform(self, node: nodes.field_list) -> None:"
                        ]
                    },
                    "lines": {
                        "sphinx/util/docfields.py": [
                            [
                                "+",
                                "env=self.directive.state.document.settings.env"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8593": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/__init__.py",
                        "sphinx/ext/autodoc/importer.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 52,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8595": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/autodoc/__init__.py": [
                            "def get_module_members(self) -> Dict[str, ObjectMember]:"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/autodoc/__init__.py": [
                            [
                                "-",
                                "if not self.__all__:"
                            ],
                            [
                                "+",
                                "if self.__all__ is None:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8621": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/builders/html/transforms.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8638": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/domains/python.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8721": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/viewcode.py": [
                            "def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/viewcode.py": [
                            [
                                "+",
                                "return"
                            ],
                            [
                                "+",
                                "if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:"
                            ],
                            [
                                "+",
                                "if app.builder.name == \"singlehtml\":"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9229": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 16,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9230": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/util/docfields.py": [
                            "def transform(self, node: nodes.field_list) -> None:"
                        ]
                    },
                    "lines": {
                        "sphinx/util/docfields.py": [
                            [
                                "+",
                                "argtype, argname = fieldarg.rsplit(None, 1)"
                            ],
                            [
                                "-",
                                "argtype, argname = fieldarg.split(None, 1)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9258": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/domains/python.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9281": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/util/inspect.py": [
                            "def object_description(object: Any) -> str:"
                        ]
                    },
                    "lines": {
                        "sphinx/util/inspect.py": [
                            [
                                "+",
                                "elif isinstance(object, set):"
                            ],
                            [
                                "+",
                                "elif isinstance(object, enum.Enum):"
                            ],
                            [
                                "+",
                                "elif isinstance(object, frozenset):"
                            ],
                            [
                                "-",
                                "if isinstance(object, frozenset):"
                            ],
                            [
                                "+",
                                "return \"%s.%s\" % (object.__class__.__name__, object.name)"
                            ],
                            [
                                "-",
                                "if isinstance(object, set):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9320": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/cmd/quickstart.py": [
                            "def is_path(x: str) -> str:"
                        ]
                    },
                    "lines": {
                        "sphinx/cmd/quickstart.py": [
                            [
                                "+",
                                "return x"
                            ],
                            [
                                "+",
                                "if x == '':"
                            ],
                            [
                                "+",
                                "return is_path(x)"
                            ],
                            [
                                "+",
                                "def is_path_or_empty(x: str) -> str:"
                            ],
                            [
                                "+",
                                "'', is_path_or_empty)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9367": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/pycode/ast.py": [
                            "def visit_UnaryOp(self, node: ast.UnaryOp) -> str:"
                        ]
                    },
                    "lines": {
                        "sphinx/pycode/ast.py": [
                            [
                                "+",
                                "return \"(%s,)\" % self.visit(node.elts[0])"
                            ],
                            [
                                "+",
                                "if len(node.elts) == 0:"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "-",
                                "if node.elts:"
                            ],
                            [
                                "+",
                                "elif len(node.elts) == 1:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 3,
                        "percentage": 37.5
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9461": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/domains/python.py",
                        "sphinx/ext/autodoc/__init__.py"
                    ],
                    "functions": {
                        "sphinx/util/inspect.py": [
                            "def ispartial(obj: Any) -> bool:"
                        ]
                    },
                    "lines": {
                        "sphinx/util/inspect.py": [
                            [
                                "+",
                                "if cls and name and isclassmethod(obj, cls, name):"
                            ],
                            [
                                "+",
                                "return getdoc(meth.__func__)"
                            ],
                            [
                                "+",
                                "return isclassmethod(meth)"
                            ],
                            [
                                "+",
                                "def isclassmethod(obj: Any, cls: Any = None, name: str = None) -> bool:"
                            ],
                            [
                                "+",
                                "elif cls and name:"
                            ],
                            [
                                "+",
                                "meth = basecls.__dict__.get(name)"
                            ],
                            [
                                "+",
                                "for basecls in getmro(cls):"
                            ],
                            [
                                "-",
                                "def isclassmethod(obj: Any) -> bool:"
                            ],
                            [
                                "+",
                                "if meth:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "functions": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    },
                    "lines": {
                        "total": 44,
                        "covered": 1,
                        "percentage": 2.272727272727273
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9591": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/domains/python.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9602": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/domains/python.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9658": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/autodoc/mock.py": [
                            "def __new__(cls, *args: Any, **kwargs: Any) -> Any:"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/autodoc/mock.py": [
                            [
                                "+",
                                "self.__qualname__ = self.__name__"
                            ],
                            [
                                "-",
                                "self.__qualname__ = ''"
                            ],
                            [
                                "+",
                                "__name__ = ''"
                            ],
                            [
                                "+",
                                "'__name__': name,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9673": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sphinx/ext/autodoc/typehints.py": [
                            [
                                "+",
                                "elif parts[0] in ('return', 'returns'):"
                            ],
                            [
                                "-",
                                "if name == 'return':"
                            ],
                            [
                                "+",
                                "if name in ('return', 'returns'):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9698": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/domains/python.py": [
                            "def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-9711": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sphinx/extension.py": [
                            [
                                "+",
                                "except InvalidVersion:"
                            ],
                            [
                                "+",
                                "from packaging.version import InvalidVersion, Version"
                            ],
                            [
                                "+",
                                "fulfilled = False"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "if reqversion > extension.version:"
                            ],
                            [
                                "+",
                                "fulfilled = True"
                            ],
                            [
                                "+",
                                "if Version(reqversion) > Version(extension.version):"
                            ],
                            [
                                "+",
                                "if extension.version == 'unknown version':"
                            ],
                            [
                                "+",
                                "if not fulfilled:"
                            ],
                            [
                                "+",
                                "try:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 2,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "sympy__sympy-11618": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/geometry/point.py": [
                            [
                                "+",
                                "return sqrt(sum([(a - b)**2 for a, b in zip("
                            ],
                            [
                                "+",
                                "if type(p) is not type(self):"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "if len(p) == len(self):"
                            ],
                            [
                                "+",
                                "p2 = p.args if len(p.args) > len(self.args) else self.args"
                            ],
                            [
                                "+",
                                "p1[i] = p.args[i] if len(p) < len(self) else self.args[i]"
                            ],
                            [
                                "+",
                                "self.args, p.args if isinstance(p, Point) else p)]))"
                            ],
                            [
                                "+",
                                "p1, p2)]))"
                            ],
                            [
                                "+",
                                "for i in range(min(len(p), len(self))):"
                            ],
                            [
                                "+",
                                "p1 = [0] * max(len(p), len(self))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 1,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "sympy__sympy-12096": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/core/function.py": [
                            [
                                "+",
                                "return Float(self._imp_(*[i.evalf(prec) for i in self.args]), prec)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-12419": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/matrices/expressions/matexpr.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-12481": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/combinatorics/permutations.py": [
                            "def __new__(cls, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "sympy/combinatorics/permutations.py": [
                            [
                                "-",
                                "raise ValueError('there were repeated elements; to resolve '"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "-",
                                "'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))"
                            ],
                            [
                                "-",
                                "if has_dups(temp):"
                            ],
                            [
                                "-",
                                "raise ValueError('there were repeated elements.')"
                            ],
                            [
                                "+",
                                "raise ValueError('there were repeated elements.')"
                            ],
                            [
                                "-",
                                "if is_cycle:"
                            ],
                            [
                                "+",
                                "if has_dups(temp) and not is_cycle:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-12489": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/combinatorics/permutations.py": [
                            "def size(self):",
                            "def from_inversion_vector(self, inversion):",
                            "def unrank_lex(self, size, rank):",
                            "def next_nonlex(self):",
                            "def josephus(self, m, n, s=1):",
                            "def get_positional_distance(self, other):",
                            "def __mul__(self, other):",
                            "def random(self, n):",
                            "def __pow__(self, n):",
                            "def __add__(self, other):",
                            "def commutator(self, x):",
                            "def __invert__(self):",
                            "def mul_inv(self, other):",
                            "def unrank_trotterjohnson(self, size, rank):",
                            "def rank_trotterjohnson(self):",
                            "def __xor__(self, h):",
                            "def next_trotterjohnson(self):",
                            "def rmul(*args):",
                            "def _af_new(perm):",
                            "def _af_invert(a):",
                            "def next_lex(self):",
                            "def _af_pow(a, n):",
                            "def _unrank1(n, r, a):"
                        ]
                    },
                    "lines": {
                        "sympy/combinatorics/permutations.py": [
                            [
                                "-",
                                "return _af_new(a.list(size))"
                            ],
                            [
                                "-",
                                "return _af_new(list(range(size or 0)))"
                            ],
                            [
                                "-",
                                "return _af_new(perm)"
                            ],
                            [
                                "-",
                                "def josephus(self, m, n, s=1):"
                            ],
                            [
                                "-",
                                "return _af_new(perm_array)"
                            ],
                            [
                                "-",
                                "def random(self, n):"
                            ],
                            [
                                "-",
                                "def from_inversion_vector(self, inversion):"
                            ],
                            [
                                "+",
                                "return cls._af_new(perm)"
                            ],
                            [
                                "-",
                                "return _af_new(id_perm)"
                            ],
                            [
                                "+",
                                "\"\"\"This is needed to coerce other to Permutation in rmul.\"\"\""
                            ],
                            [
                                "+",
                                "rv = self.unrank_lex(self.size, rank)"
                            ],
                            [
                                "-",
                                "return _af_new(_af_pow(self.array_form, n))"
                            ],
                            [
                                "-",
                                "obj._size = size"
                            ],
                            [
                                "-",
                                "return obj"
                            ],
                            [
                                "-",
                                "return _af_new(_af_rmul(a, b))"
                            ],
                            [
                                "+",
                                "return self._af_new(_af_pow(self.array_form, n))"
                            ],
                            [
                                "+",
                                "rv = cls._af_new(_af_rmuln(*a))"
                            ],
                            [
                                "+",
                                "cls = type(self)"
                            ],
                            [
                                "+",
                                "return cls._af_new(list(range(size or 0)))"
                            ],
                            [
                                "-",
                                "def unrank_lex(self, size, rank):"
                            ],
                            [
                                "+",
                                "return cls(other)*self"
                            ],
                            [
                                "+",
                                "return self._af_new(a)"
                            ],
                            [
                                "-",
                                "return Perm(other)*self"
                            ],
                            [
                                "-",
                                "return _af_new(a)"
                            ],
                            [
                                "+",
                                "return self._af_new(_af_invert(self._array_form))"
                            ],
                            [
                                "+",
                                "return self._af_new(_af_rmul(a, b))"
                            ],
                            [
                                "+",
                                "return cls(a.array_form, size=size)"
                            ],
                            [
                                "+",
                                "return cls._af_new(a.list(size))"
                            ],
                            [
                                "-",
                                "return _af_new(pi)"
                            ],
                            [
                                "+",
                                "return cls._af_new(perm_array)"
                            ],
                            [
                                "+",
                                "return self._af_new(perm)"
                            ],
                            [
                                "+",
                                "if isinstance(a, cls):  # g"
                            ],
                            [
                                "-",
                                "def rmul_with_af(*args):"
                            ],
                            [
                                "-",
                                "\"\"\"This is needed to coerse other to Permutation in rmul.\"\"\""
                            ],
                            [
                                "+",
                                "if isinstance(n, Permutation):"
                            ],
                            [
                                "+",
                                "return self.unrank_nonlex(self.size, r + 1)"
                            ],
                            [
                                "+",
                                "return cls._af_new(list(range(a + 1)))"
                            ],
                            [
                                "+",
                                "return self._af_new(pi)"
                            ],
                            [
                                "-",
                                "return Perm(perm)"
                            ],
                            [
                                "+",
                                "def from_inversion_vector(cls, inversion):"
                            ],
                            [
                                "+",
                                "return cls._af_new(aform)"
                            ],
                            [
                                "-",
                                "rv = Perm.unrank_lex(self.size, rank)"
                            ],
                            [
                                "+",
                                "def rmul_with_af(cls, *args):"
                            ],
                            [
                                "-",
                                "obj._array_form = aform"
                            ],
                            [
                                "+",
                                "return self._af_new([a[b[inva[i]]] for i in invb])"
                            ],
                            [
                                "-",
                                "if type(n) == Perm:"
                            ],
                            [
                                "-",
                                "return _af_new([a[b[inva[i]]] for i in invb])"
                            ],
                            [
                                "-",
                                "return _af_new(Cycle(*args).list(size))"
                            ],
                            [
                                "+",
                                "def random(cls, n):"
                            ],
                            [
                                "-",
                                "rv = _af_new(_af_rmuln(*a))"
                            ],
                            [
                                "-",
                                "if isinstance(a, Perm):  # g"
                            ],
                            [
                                "+",
                                "def unrank_trotterjohnson(cls, size, rank):"
                            ],
                            [
                                "+",
                                "def josephus(cls, m, n, s=1):"
                            ],
                            [
                                "+",
                                "def unrank_lex(cls, size, rank):"
                            ],
                            [
                                "-",
                                "size = len(aform)"
                            ],
                            [
                                "+",
                                "return cls._af_new(Cycle(*args).list(size))"
                            ],
                            [
                                "-",
                                "return _af_new(_af_invert(self._array_form))"
                            ],
                            [
                                "-",
                                "def unrank_trotterjohnson(self, size, rank):"
                            ],
                            [
                                "-",
                                "obj = Basic.__new__(cls, aform)"
                            ],
                            [
                                "+",
                                "return self._af_new(id_perm)"
                            ],
                            [
                                "-",
                                "return Perm(a.array_form, size=size)"
                            ],
                            [
                                "-",
                                "return _af_new(list(range(a + 1)))"
                            ],
                            [
                                "-",
                                "return Perm.unrank_nonlex(self.size, r + 1)"
                            ],
                            [
                                "+",
                                "return cls(perm)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 24,
                        "covered": 1,
                        "percentage": 4.166666666666666
                    },
                    "lines": {
                        "total": 72,
                        "covered": 8,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "sympy__sympy-13031": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/matrices/sparse.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13091": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/exprtools.py",
                        "sympy/core/numbers.py",
                        "sympy/geometry/entity.py",
                        "sympy/physics/optics/medium.py",
                        "sympy/physics/vector/dyadic.py",
                        "sympy/physics/vector/frame.py",
                        "sympy/physics/vector/vector.py",
                        "sympy/polys/agca/modules.py",
                        "sympy/polys/domains/domain.py",
                        "sympy/polys/domains/expressiondomain.py",
                        "sympy/polys/domains/pythonrational.py",
                        "sympy/polys/domains/quotientring.py",
                        "sympy/polys/fields.py",
                        "sympy/polys/monomials.py",
                        "sympy/polys/polyclasses.py",
                        "sympy/polys/polytools.py",
                        "sympy/polys/rings.py",
                        "sympy/polys/rootoftools.py",
                        "sympy/tensor/array/ndim_array.py",
                        "sympy/utilities/enumerative.py"
                    ],
                    "functions": {
                        "sympy/core/basic.py": [
                            "def __ne__(self, other):",
                            "def _has(self, pattern):"
                        ]
                    },
                    "lines": {
                        "sympy/core/basic.py": [
                            [
                                "-",
                                "return self.__eq__"
                            ],
                            [
                                "+",
                                "return not self == other"
                            ],
                            [
                                "+",
                                "return NotImplemented"
                            ],
                            [
                                "+",
                                "return lambda other: self == other"
                            ],
                            [
                                "-",
                                "return not self.__eq__(other)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 21,
                        "covered": 1,
                        "percentage": 4.761904761904762
                    },
                    "functions": {
                        "total": 33,
                        "covered": 1,
                        "percentage": 3.0303030303030303
                    },
                    "lines": {
                        "total": 76,
                        "covered": 1,
                        "percentage": 1.3157894736842104
                    }
                }
            }
        },
        "sympy__sympy-13372": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/core/evalf.py": [
                            [
                                "+",
                                "raise NotImplementedError"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-13480": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-13551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/concrete/products.py": [
                            [
                                "+",
                                "from sympy.concrete.summations import Sum"
                            ],
                            [
                                "+",
                                "p = exp(Sum(log(p), (k, a, n)))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-13615": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/sets/sets.py": [
                            "def _complement(self, other):"
                        ]
                    },
                    "lines": {
                        "sympy/sets/sets.py": [
                            [
                                "+",
                                "if sifted[None] else S.EmptySet)"
                            ],
                            [
                                "+",
                                "def ternary_sift(el):"
                            ],
                            [
                                "+",
                                "from sympy.utilities.iterables import sift"
                            ],
                            [
                                "+",
                                "# ignore those that are contained in self"
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "+",
                                "contains = self.contains(el)"
                            ],
                            [
                                "+",
                                "sifted = sift(other, ternary_sift)"
                            ],
                            [
                                "+",
                                "Complement(FiniteSet(*(sifted[None])), self, evaluate=False)"
                            ],
                            [
                                "+",
                                "return Union(FiniteSet(*(sifted[False])),"
                            ],
                            [
                                "+",
                                "return contains if contains in [True, False] else None"
                            ],
                            [
                                "-",
                                "return FiniteSet(*[el for el in other if self.contains(el) != True])"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13647": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-13757": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/polys/polytools.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13798": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/latex.py": [
                            [
                                "+",
                                "self._settings['mul_symbol_latex_numbers'] = \\"
                            ],
                            [
                                "+",
                                "mul_symbol_table[self._settings['mul_symbol']]"
                            ],
                            [
                                "+",
                                "['', ' ', '\\\\', '\\\\,', '\\\\:', '\\\\;', '\\\\quad']):"
                            ],
                            [
                                "+",
                                "mul_symbol_table['dot']"
                            ],
                            [
                                "+",
                                "self._settings['mul_symbol_latex'] = \\"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "except KeyError:"
                            ],
                            [
                                "+",
                                "mul_symbol_table[self._settings['mul_symbol'] or 'dot']"
                            ],
                            [
                                "+",
                                "self._settings['mul_symbol']"
                            ],
                            [
                                "+",
                                "if (self._settings['mul_symbol'].strip() in"
                            ],
                            [
                                "+",
                                "try:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 16,
                        "covered": 5,
                        "percentage": 31.25
                    }
                }
            }
        },
        "sympy__sympy-13852": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/functions/special/zeta_functions.py": [
                            "def eval(cls, s, z):",
                            "class polylog(Function):"
                        ]
                    },
                    "lines": {
                        "sympy/functions/special/zeta_functions.py": [
                            [
                                "+",
                                "# automatically expanding polylog(1, z) to -log(1-z) seems undesirable"
                            ],
                            [
                                "+",
                                "elif z == (sqrt(5) - 1)/2:"
                            ],
                            [
                                "+",
                                "return -pi**2/15 + log((sqrt(5)-1)/2)**2/2"
                            ],
                            [
                                "+",
                                "return z/(1 - z)**2"
                            ],
                            [
                                "+",
                                "# For s = 0 or -1 use explicit formulas to evaluate, but"
                            ],
                            [
                                "+",
                                "return S.Zero"
                            ],
                            [
                                "+",
                                "return pi**2/10 - log((sqrt(5)-1)/2)**2"
                            ],
                            [
                                "+",
                                "elif z == 2:"
                            ],
                            [
                                "+",
                                "return pi**2/12 - log(2)**2/2"
                            ],
                            [
                                "+",
                                "from sympy.functions.elementary.miscellaneous import sqrt"
                            ],
                            [
                                "-",
                                "return 0"
                            ],
                            [
                                "+",
                                "elif z == -(sqrt(5) + 1)/2:"
                            ],
                            [
                                "+",
                                "elif s == -1:"
                            ],
                            [
                                "+",
                                "return -pi**2/10 - log((sqrt(5)+1)/2)**2"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "from sympy.core import Function, S, sympify, pi, I"
                            ],
                            [
                                "+",
                                "elif s == 0:"
                            ],
                            [
                                "+",
                                "if z == S.Half:"
                            ],
                            [
                                "+",
                                "elif z == (3 - sqrt(5))/2:"
                            ],
                            [
                                "+",
                                "-log(-z + 1)"
                            ],
                            [
                                "+",
                                "return pi**2/4 - I*pi*log(2)"
                            ],
                            [
                                "+",
                                "# for summation methods based on hypergeometric functions"
                            ],
                            [
                                "+",
                                "elif z == -(sqrt(5) - 1)/2:"
                            ],
                            [
                                "-",
                                "from sympy.core import Function, S, sympify, pi"
                            ],
                            [
                                "+",
                                "elif s == 2:"
                            ],
                            [
                                "+",
                                "return z/(1 - z)"
                            ],
                            [
                                "-",
                                "-log(z*exp_polar(-I*pi) + 1)"
                            ],
                            [
                                "+",
                                "return pi**2/15 - log((sqrt(5)-1)/2)**2"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 30,
                        "covered": 2,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "sympy__sympy-13877": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/utilities/randtest.py"
                    ],
                    "functions": {
                        "sympy/matrices/matrices.py": [
                            "def _iszero(x):",
                            "def _eval_det_bareiss(self):"
                        ]
                    },
                    "lines": {
                        "sympy/matrices/matrices.py": [
                            [
                                "+",
                                "\"\"\"Tests by expand_mul only, suitable for polynomials and rational"
                            ],
                            [
                                "-",
                                "for pos,val in enumerate(l):"
                            ],
                            [
                                "-",
                                "NotIterable"
                            ],
                            [
                                "-",
                                "from sympy.core.compatibility import is_sequence, default_sort_key, range, \\"
                            ],
                            [
                                "+",
                                "from sympy.core.compatibility import (is_sequence, default_sort_key, range,"
                            ],
                            [
                                "+",
                                "pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0],"
                            ],
                            [
                                "+",
                                "functions.\"\"\""
                            ],
                            [
                                "-",
                                "# XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead"
                            ],
                            [
                                "-",
                                "return (pos, val, None, None)"
                            ],
                            [
                                "+",
                                "# Relevant issues: #10279 and #13877."
                            ],
                            [
                                "-",
                                "if val:"
                            ],
                            [
                                "-",
                                "return (None, None, None, None)"
                            ],
                            [
                                "-",
                                "def _find_pivot(l):"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "NotIterable)"
                            ],
                            [
                                "+",
                                "# With the default iszerofunc, _find_reasonable_pivot slows down"
                            ],
                            [
                                "+",
                                "# the computation by the factor of 2.5 in one test."
                            ],
                            [
                                "+",
                                "iszerofunc=_is_zero_after_expand_mul)"
                            ],
                            [
                                "+",
                                "from sympy.core.function import expand_mul"
                            ],
                            [
                                "-",
                                "# XXX should use `_find_reasonable_pivot`.  Blocked by issue #12362"
                            ],
                            [
                                "-",
                                "pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])"
                            ],
                            [
                                "+",
                                "return expand_mul(x) == 0"
                            ],
                            [
                                "+",
                                "def _is_zero_after_expand_mul(x):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 32,
                        "covered": 1,
                        "percentage": 3.125
                    }
                }
            }
        },
        "sympy__sympy-13878": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/stats/crv_types.py": [
                            "def ContinuousRV(symbol, density, set=Interval(-oo, oo)):",
                            "def Logistic(name, mu, s):",
                            "def Arcsin(name, a=0, b=1):",
                            "def Erlang(name, k, l):",
                            "def Laplace(name, mu, b):",
                            "def Pareto(name, xm, alpha):",
                            "def Gamma(name, k, theta):",
                            "def Dagum(name, p, a, b):",
                            "def GammaInverse(name, a, b):",
                            "def pdf(self, x):",
                            "def Kumaraswamy(name, a, b):",
                            "def Nakagami(name, mu, omega):",
                            "def Frechet(name, a, s=1, m=0):",
                            "def UniformSum(name, n):",
                            "def Gompertz(name, b, eta):",
                            "def sample(self):",
                            "def StudentT(name, nu):"
                        ]
                    },
                    "lines": {
                        "sympy/stats/crv_types.py": [
                            [
                                "+",
                                "The argument evaluate=False prevents an attempt at evaluation"
                            ],
                            [
                                "-",
                                "return rv(name, GammaDistribution, (k, 1/l))"
                            ],
                            [
                                "+",
                                ">>> from sympy.stats import Dagum, density, cdf"
                            ],
                            [
                                "-",
                                "(S.One - exp(-self.rate*x), x>=0),"
                            ],
                            [
                                "+",
                                ">>> from sympy.stats import Frechet, density, E, std, cdf"
                            ],
                            [
                                "+",
                                "mu, b = self.mu, self.b"
                            ],
                            [
                                "+",
                                "(S(3)/2,), -x**2/nu)/(sqrt(pi*nu)*gamma(nu/2))"
                            ],
                            [
                                "+",
                                "Piecewise((0, z < 0),"
                            ],
                            [
                                "+",
                                "(S.One, True))"
                            ],
                            [
                                "-",
                                ">>> from sympy.stats import Laplace, density"
                            ],
                            [
                                "+",
                                ">>> cdf(UniformSum(\"x\", 5), evaluate=False)(2).doit()"
                            ],
                            [
                                "-",
                                ">>> from sympy.stats import Logistic, density"
                            ],
                            [
                                "+",
                                ">>> from sympy.stats import UniformSum, density, cdf"
                            ],
                            [
                                "+",
                                "return Piecewise("
                            ],
                            [
                                "-",
                                ">>> from sympy.stats import Frechet, density, E, std"
                            ],
                            [
                                "+",
                                "return Piecewise((uppergamma(a,b/x)/gamma(a), x > 0),"
                            ],
                            [
                                "+",
                                "(_k, 0, floor(z)))/factorial(n), n >= z), (1, True))"
                            ],
                            [
                                "-",
                                "(S.Half + S.Half*erf((log(x) - mean)/sqrt(2)/std), x>0),"
                            ],
                            [
                                "+",
                                "(2*asin(sqrt((-a + z)/(-a + b)))/pi, b >= z),"
                            ],
                            [
                                "+",
                                "return S.One/(1 + exp(-(x - mu)/s))"
                            ],
                            [
                                "+",
                                "(S.One - S.Half*exp(-(x - mu)/b), x >= mu)"
                            ],
                            [
                                "-",
                                ">>> from sympy.stats import Kumaraswamy, density, E, variance"
                            ],
                            [
                                "+",
                                "(1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**(n),"
                            ],
                            [
                                "+",
                                ">>> cdf(X)(z)"
                            ],
                            [
                                "+",
                                "(2*asin(sqrt((x - a)/(b - a)))/pi, x <= b),"
                            ],
                            [
                                "+",
                                "nu = self.nu"
                            ],
                            [
                                "+",
                                "Piecewise((uppergamma(a, b/z)/gamma(a), z > 0), (0, True))"
                            ],
                            [
                                "+",
                                ">>> from sympy.stats import Nakagami, density, E, variance, cdf"
                            ],
                            [
                                "+",
                                "(1 - (1 - x**a)**b, x <= S.One),"
                            ],
                            [
                                "-",
                                "(S.One/gamma(k/2)*lowergamma(k/2, x/2), x>=0),"
                            ],
                            [
                                "+",
                                "9/40"
                            ],
                            [
                                "+",
                                "(S.One - exp(-self.rate*x), x >= 0),"
                            ],
                            [
                                "+",
                                "Lambda, Basic, lowergamma, erf, erfc, I, uppergamma, hyper)"
                            ],
                            [
                                "+",
                                ">>> from sympy.stats import Kumaraswamy, density, E, variance, cdf"
                            ],
                            [
                                "+",
                                "of the sum for general n, before the argument 2 is passed."
                            ],
                            [
                                "+",
                                ">>> from sympy.stats import StudentT, density, E, variance, cdf"
                            ],
                            [
                                "+",
                                "Piecewise((0, a > z),"
                            ],
                            [
                                "+",
                                "(S.Half + S.Half*erf((log(x) - mean)/sqrt(2)/std), x > 0),"
                            ],
                            [
                                "+",
                                "(S.One/gamma(k/2)*lowergamma(k/2, x/2), x >= 0),"
                            ],
                            [
                                "-",
                                ">>> from sympy.stats import StudentT, density, E, variance"
                            ],
                            [
                                "+",
                                "(k, 0, floor(x))), x <= n),"
                            ],
                            [
                                "-",
                                "Lambda, Basic, lowergamma, erf, erfc, I)"
                            ],
                            [
                                "+",
                                "Piecewise(((1 + (z/b)**(-a))**(-p), z >= 0), (0, True))"
                            ],
                            [
                                "+",
                                "-z**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))"
                            ],
                            [
                                "+",
                                "(-(-z**a + 1)**b + 1, z <= 1),"
                            ],
                            [
                                "+",
                                ">>> from sympy.stats import Arcsin, density, cdf"
                            ],
                            [
                                "+",
                                "(lowergamma(mu, (mu/omega)*x**2)/gamma(mu), x > 0),"
                            ],
                            [
                                "+",
                                "return S.Half + x*gamma((nu+1)/2)*hyper((S.Half, (nu+1)/2),"
                            ],
                            [
                                "+",
                                "(0, True))"
                            ],
                            [
                                "+",
                                "k, theta = self.k, self.theta"
                            ],
                            [
                                "+",
                                "(S.Zero, True))"
                            ],
                            [
                                "+",
                                "(S.Zero, x < a),"
                            ],
                            [
                                "+",
                                "return Piecewise((S.Zero, x < 0),"
                            ],
                            [
                                "+",
                                "Piecewise((exp((-mu + z)/b)/2, mu > z),"
                            ],
                            [
                                "+",
                                "return rv(name, GammaDistribution, (k, S.One/l))"
                            ],
                            [
                                "+",
                                "(S.Half*exp((x - mu)/b), x < mu),"
                            ],
                            [
                                "+",
                                "(1, True))"
                            ],
                            [
                                "+",
                                "(-exp((mu - z)/b)/2 + 1, True))"
                            ],
                            [
                                "+",
                                "k = Dummy(\"k\")"
                            ],
                            [
                                "+",
                                ">>> from sympy.stats import Logistic, density, cdf"
                            ],
                            [
                                "+",
                                "Piecewise((exp(-((-m + z)/s)**(-a)), m <= z), (0, True))"
                            ],
                            [
                                "+",
                                "a, s, m = self.a, self.s, self.m"
                            ],
                            [
                                "+",
                                "mu, omega = self.mu, self.omega"
                            ],
                            [
                                "+",
                                "Piecewise((0, z < 0), (Sum((-1)**_k*(-_k + z)**n*binomial(n, _k),"
                            ],
                            [
                                "+",
                                "1/2 + z*gamma(nu/2 + 1/2)*hyper((1/2, nu/2 + 1/2), (3/2,),"
                            ],
                            [
                                "-",
                                ">>> from sympy.stats import Nakagami, density, E, variance"
                            ],
                            [
                                "+",
                                "from sympy import asin"
                            ],
                            [
                                "+",
                                "(lowergamma(k, S(x)/theta)/gamma(k), x > 0),"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "return Piecewise(((S.One + (S(x)/b)**-a)**-p, x>=0),"
                            ],
                            [
                                "+",
                                "return Piecewise((exp(-((x-m)/s)**(-a)), x >= m),"
                            ],
                            [
                                "-",
                                ">>> from sympy.stats import UniformSum, density"
                            ],
                            [
                                "+",
                                "Piecewise((lowergamma(mu, mu*z**2/omega)/gamma(mu), z > 0),"
                            ],
                            [
                                "+",
                                "n = self.n"
                            ],
                            [
                                "+",
                                "Compute cdf with specific 'x' and 'n' values as follows :"
                            ],
                            [
                                "-",
                                ">>> from sympy.stats import Dagum, density"
                            ],
                            [
                                "+",
                                "1/(exp((mu - z)/s) + 1)"
                            ],
                            [
                                "-",
                                ">>> from sympy.stats import Arcsin, density"
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "+",
                                ">>> from sympy.stats import Laplace, density, cdf"
                            ],
                            [
                                "+",
                                "p, a, b = self.p, self.a, self.b"
                            ],
                            [
                                "+",
                                "(S.Zero, x < S.Zero),"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 18,
                        "covered": 1,
                        "percentage": 5.555555555555555
                    },
                    "lines": {
                        "total": 85,
                        "covered": 3,
                        "percentage": 3.5294117647058822
                    }
                }
            }
        },
        "sympy__sympy-13974": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/physics/quantum/tensorproduct.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 36,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-14248": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/printing/latex.py",
                        "sympy/printing/pretty/pretty.py",
                        "sympy/printing/str.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 59,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-14531": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/str.py": [
                            "def _print_Or(self, expr):",
                            "def _print_NegativeInfinity(self, expr):",
                            "def _print_Permutation(self, expr):",
                            "def _print_Exp1(self, expr):",
                            "def _print_Transpose(self, T):",
                            "def _print_Pi(self, expr):",
                            "def _print_Inverse(self, I):",
                            "def _print_MatrixBase(self, expr):",
                            "def _print_TensAdd(self, expr):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/str.py": [
                            [
                                "+",
                                "self._print(ring.domain), self._print(ring.order))"
                            ],
                            [
                                "+",
                                "p = ['    %s' % self._print(a) for a in expr.args]"
                            ],
                            [
                                "+",
                                "return \"Lambda(%s, %s)\" % (self._print(args.args[0]), self._print(expr))"
                            ],
                            [
                                "+",
                                "return 'Permutation([], size=%s)' % self._print(expr.size)"
                            ],
                            [
                                "-",
                                "return '(%s, %s)' % (expr.expr, expr.cond)"
                            ],
                            [
                                "-",
                                "return \"Lambda((%s), %s)\" % (arg_string, expr)"
                            ],
                            [
                                "+",
                                "return \"Limit(%s, %s, %s, dir='%s')\" % tuple(map(self._print,"
                            ],
                            [
                                "+",
                                "return '(%s, %s)' % (self._print(expr.expr), self._print(expr.cond))"
                            ],
                            [
                                "+",
                                "return \"Uniform(%s, %s)\" % (self._print(expr.a), self._print(expr.b))"
                            ],
                            [
                                "+",
                                "(\", \".join(map(self._print, field.symbols)),"
                            ],
                            [
                                "+",
                                "(e, z, z0, dir)))"
                            ],
                            [
                                "-",
                                "(\", \".join(map(self._print, field.symbols)), field.domain, field.order)"
                            ],
                            [
                                "+",
                                "return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs),"
                            ],
                            [
                                "-",
                                "trim = str(expr.array_form[:s[-1] + 1]) + ', size=%s' % expr.size"
                            ],
                            [
                                "+",
                                "+ '[%s, %s]' % (self._print(expr.i), self._print(expr.j))"
                            ],
                            [
                                "-",
                                "return \"Normal(%s, %s)\" % (expr.mu, expr.sigma)"
                            ],
                            [
                                "+",
                                "return \"Lambda((%s), %s)\" % (arg_string, self._print(expr))"
                            ],
                            [
                                "-",
                                "return 'Permutation(%s)' % str(expr.array_form)"
                            ],
                            [
                                "+",
                                "return \"Limit(%s, %s, %s)\" % tuple(map(self._print, (e, z, z0)))"
                            ],
                            [
                                "+",
                                "(\", \".join(map(self._print, ring.symbols)),"
                            ],
                            [
                                "-",
                                "return '%s(%s)' % (expr.func, expr.arg)"
                            ],
                            [
                                "+",
                                "self._print(expr.rhs))"
                            ],
                            [
                                "-",
                                "return \"Lambda(%s, %s)\" % (args.args[0], expr)"
                            ],
                            [
                                "+",
                                "self._print(field.domain), self._print(field.order))"
                            ],
                            [
                                "-",
                                "p = ['    %s' % str(a) for a in expr.args]"
                            ],
                            [
                                "-",
                                "+ '[%s, %s]' % (expr.i, expr.j)"
                            ],
                            [
                                "-",
                                "(\", \".join(map(self._print, ring.symbols)), ring.domain, ring.order)"
                            ],
                            [
                                "-",
                                "use = full = str(expr.array_form)"
                            ],
                            [
                                "+",
                                "trim = self._print(expr.array_form[:s[-1] + 1]) + ', size=%s' % self._print(expr.size)"
                            ],
                            [
                                "+",
                                "return 'Permutation(%s)' % self._print(expr.array_form)"
                            ],
                            [
                                "-",
                                "return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)"
                            ],
                            [
                                "-",
                                "return 'Permutation([], size=%s)' % expr.size"
                            ],
                            [
                                "-",
                                "return \"Uniform(%s, %s)\" % (expr.a, expr.b)"
                            ],
                            [
                                "+",
                                "return '%s(%s)' % (self._print(expr.func), self._print(expr.arg))"
                            ],
                            [
                                "+",
                                "return \"Normal(%s, %s)\" % (self._print(expr.mu), self._print(expr.sigma))"
                            ],
                            [
                                "+",
                                "use = full = self._print(expr.array_form)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 11,
                        "covered": 2,
                        "percentage": 18.181818181818183
                    },
                    "lines": {
                        "total": 38,
                        "covered": 2,
                        "percentage": 5.263157894736842
                    }
                }
            }
        },
        "sympy__sympy-14711": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/physics/vector/vector.py": [
                            "def __hash__(self):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-14976": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/pycode.py": [
                            [
                                "+",
                                "return '{0}({1})/{0}({2})'.format("
                            ],
                            [
                                "+",
                                "def _print_Rational(self, e):"
                            ],
                            [
                                "+",
                                "e.p,"
                            ],
                            [
                                "+",
                                "e.q,"
                            ],
                            [
                                "+",
                                "self._module_format('mpmath.mpf'),"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "sympy__sympy-15017": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/tensor/array/dense_ndim_array.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-15345": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/printing/mathematica.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-15349": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-15599": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/core/mod.py": [
                            [
                                "+",
                                "if q.is_Integer and q is not S.One:"
                            ],
                            [
                                "-",
                                "from sympy.core.numbers import nan"
                            ],
                            [
                                "+",
                                "_.append(i)"
                            ],
                            [
                                "+",
                                "if i.is_Integer and (i % q is not S.Zero):"
                            ],
                            [
                                "+",
                                "return p%q"
                            ],
                            [
                                "+",
                                "p = Mul(*(non_mod_l + mod_l))"
                            ],
                            [
                                "+",
                                "from sympy.core.numbers import nan, Integer"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "non_mod_l = _"
                            ],
                            [
                                "+",
                                "_ = []"
                            ],
                            [
                                "+",
                                "for i in non_mod_l:"
                            ],
                            [
                                "+",
                                "_.append(i%q)"
                            ],
                            [
                                "-",
                                "return (p % q)"
                            ],
                            [
                                "+",
                                "from sympy.core.compatibility import integer_types"
                            ],
                            [
                                "+",
                                "if isinstance(d, integer_types):"
                            ],
                            [
                                "-",
                                "if type(d) is int:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 1,
                        "percentage": 5.88235294117647
                    }
                }
            }
        },
        "sympy__sympy-15809": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-15875": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/core/add.py": [
                            "def _eval_is_zero(self):"
                        ]
                    },
                    "lines": {
                        "sympy/core/add.py": [
                            [
                                "+",
                                "if len(nz) == 0 or len(nz) == len(self.args):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-15976": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/mathml.py": [
                            [
                                "+",
                                "x.appendChild(join(supers))"
                            ],
                            [
                                "+",
                                "x.appendChild(mname)"
                            ],
                            [
                                "+",
                                "# Set bold font?"
                            ],
                            [
                                "+",
                                "x = self.dom.createElement('msubsup')"
                            ],
                            [
                                "+",
                                "x = self.dom.createElement('msub')"
                            ],
                            [
                                "-",
                                "if style == 'bold':"
                            ],
                            [
                                "+",
                                "x.setAttribute('mathvariant', 'bold')"
                            ],
                            [
                                "+",
                                "x = mname"
                            ],
                            [
                                "+",
                                "if style == 'bold':"
                            ],
                            [
                                "+",
                                "x = self.dom.createElement('msup')"
                            ],
                            [
                                "+",
                                "x.appendChild(join(subs))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 28,
                        "covered": 17,
                        "percentage": 60.71428571428571
                    }
                }
            }
        },
        "sympy__sympy-16450": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/simplify/simplify.py": [
                            [
                                "+",
                                "reps = {s: Dummy(s.name, positive=True, **s.assumptions0)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-16597": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/assumptions/ask_generated.py",
                        "sympy/core/assumptions.py",
                        "sympy/core/power.py",
                        "sympy/printing/tree.py",
                        "sympy/tensor/indexed.py"
                    ],
                    "functions": {},
                    "lines": {
                        "sympy/assumptions/ask.py": [
                            [
                                "+",
                                "Equivalent(Q.transcendental | Q.algebraic, Q.complex & Q.finite),"
                            ],
                            [
                                "+",
                                "Implies(Q.irrational, Q.finite),"
                            ],
                            [
                                "+",
                                "Equivalent(Q.irrational | Q.rational, Q.real & Q.finite),"
                            ],
                            [
                                "-",
                                "Equivalent(Q.irrational | Q.rational, Q.real),"
                            ],
                            [
                                "+",
                                "Implies(Q.algebraic, Q.finite),"
                            ],
                            [
                                "+",
                                "Implies(Q.transcendental, Q.finite),"
                            ],
                            [
                                "-",
                                "Equivalent(Q.transcendental | Q.algebraic, Q.complex),"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    },
                    "functions": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    },
                    "lines": {
                        "total": 69,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-16766": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/pycode.py": [
                            "def _print_Not(self, expr):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/pycode.py": [
                            [
                                "+",
                                "return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))"
                            ],
                            [
                                "+",
                                "index = expr.args[1:]"
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "+",
                                "base = expr.args[0]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "sympy__sympy-16792": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/utilities/codegen.py": [
                            "def routine(self, name, expr, argument_sequence=None, global_vars=None):"
                        ]
                    },
                    "lines": {
                        "sympy/utilities/codegen.py": [
                            [
                                "-",
                                "for dim in array.shape:"
                            ],
                            [
                                "+",
                                "metadata = {'dimensions': dimensions(array)}"
                            ],
                            [
                                "+",
                                "if isinstance(symbol, (IndexedBase, MatrixSymbol)):"
                            ],
                            [
                                "+",
                                "metadata = {}"
                            ],
                            [
                                "+",
                                "new_args.append(InputArgument(symbol, **metadata))"
                            ],
                            [
                                "+",
                                "return [(S.Zero, dim - 1) for dim in s.shape]"
                            ],
                            [
                                "-",
                                "dims = []"
                            ],
                            [
                                "-",
                                "metadata = {'dimensions': dims}"
                            ],
                            [
                                "+",
                                "metadata = {'dimensions': dimensions(symbol)}"
                            ],
                            [
                                "-",
                                "dims.append((S.Zero, dim - 1))"
                            ],
                            [
                                "+",
                                "# helper to get dimensions for data for array-like args"
                            ],
                            [
                                "+",
                                "def dimensions(s):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 3,
                        "percentage": 20.0
                    }
                }
            }
        },
        "sympy__sympy-16886": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-17139": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/simplify/fu.py": [
                            [
                                "+",
                                "if not rv.exp.is_real:"
                            ],
                            [
                                "+",
                                "return rv"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-17318": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/simplify/radsimp.py": [
                            "def handle(expr):",
                            "def denom_expand(expr, **hints):"
                        ]
                    },
                    "lines": {
                        "sympy/simplify/radsimp.py": [
                            [
                                "-",
                                "num and den are sum of terms whose squares are rationals"
                            ],
                            [
                                "-",
                                "and a sum of terms with surds squared prime with g"
                            ],
                            [
                                "+",
                                "and a sum of terms with surds squared prime with g."
                            ],
                            [
                                "+",
                                "num and den are sum of terms whose squares are positive rationals."
                            ],
                            [
                                "-",
                                "split an expression with terms whose squares are rationals"
                            ],
                            [
                                "+",
                                "Split an expression with terms whose squares are positive rationals"
                            ]
                        ],
                        "sympy/simplify/sqrtdenest.py": [
                            [
                                "-",
                                "if all((x**2).is_Rational for x in pargs):"
                            ],
                            [
                                "+",
                                "if all(sq.is_Rational and sq.is_positive for sq in sqargs):"
                            ],
                            [
                                "+",
                                "sqargs = [x**2 for x in pargs]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-17630": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/matrices/expressions/matexpr.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-17655": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/geometry/point.py": [
                            [
                                "+",
                                "\"\"\"Multiply a factor by point's coordinates.\"\"\""
                            ],
                            [
                                "+",
                                "def __rmul__(self, factor):"
                            ],
                            [
                                "+",
                                "return self.__mul__(factor)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "sympy__sympy-18189": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/solvers/diophantine.py": [
                            [
                                "+",
                                "for t in diophantine(eq, param, permute=permute)}"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-18199": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/ntheory/residue_ntheory.py": [
                            "def _nthroot_mod1(s, q, p, all_roots):"
                        ]
                    },
                    "lines": {
                        "sympy/ntheory/residue_ntheory.py": [
                            [
                                "+",
                                "ppow *= p"
                            ],
                            [
                                "+",
                                "if not isprime(p):"
                            ],
                            [
                                "+",
                                "from sympy.utilities.iterables import cartes"
                            ],
                            [
                                "+",
                                "m = []"
                            ],
                            [
                                "+",
                                "f = factorint(m)"
                            ],
                            [
                                "+",
                                "new_base = p"
                            ],
                            [
                                "+",
                                "return _nthroot_mod_composite(a, n, p)"
                            ],
                            [
                                "-",
                                "raise NotImplementedError(\"Not implemented for composite p\")"
                            ],
                            [
                                "+",
                                "return [0]"
                            ],
                            [
                                "+",
                                "from sympy.ntheory.modular import crt"
                            ],
                            [
                                "+",
                                "diff = (rootn // (root or 1) * n) % p"
                            ],
                            [
                                "+",
                                "m.append(x)"
                            ],
                            [
                                "+",
                                "while k not in new_roots:"
                            ],
                            [
                                "+",
                                "a = []"
                            ],
                            [
                                "+",
                                "new_base *= p"
                            ],
                            [
                                "-",
                                "if not isprime(p):"
                            ],
                            [
                                "+",
                                "ppow = p"
                            ],
                            [
                                "+",
                                "Find the solutions to ``x**n = a mod m`` when m is not prime."
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "for j in range(1, e):"
                            ],
                            [
                                "+",
                                "if (pow(k, n) - a) % (new_base) != 0:"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "tot_roots.add(root)"
                            ],
                            [
                                "+",
                                "new_roots = set()"
                            ],
                            [
                                "+",
                                "k = (k + (new_base // p)) % new_base"
                            ],
                            [
                                "+",
                                "for x, y in dd.items():"
                            ],
                            [
                                "+",
                                "for p, e in f.items():"
                            ],
                            [
                                "+",
                                "a.append(list(y))"
                            ],
                            [
                                "+",
                                "root = (root - (rootn - a) * mod_inverse(diff, p)) % ppow"
                            ],
                            [
                                "+",
                                "for root in nthroot_mod(a, n, p, True) or []:"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "roots_in_base = new_roots"
                            ],
                            [
                                "+",
                                "if e == 1:"
                            ],
                            [
                                "+",
                                "def _nthroot_mod_composite(a, n, m):"
                            ],
                            [
                                "+",
                                "tot_roots.update(nthroot_mod(a, n, p, True) or [])"
                            ],
                            [
                                "+",
                                "if diff != 0:"
                            ],
                            [
                                "+",
                                "roots_in_base = {root}"
                            ],
                            [
                                "+",
                                "while new_base < pow(p, e):"
                            ],
                            [
                                "+",
                                "dd = {}"
                            ],
                            [
                                "+",
                                "for k in roots_in_base:"
                            ],
                            [
                                "+",
                                "dd[pow(p, e)] = tot_roots"
                            ],
                            [
                                "+",
                                "return sorted(set(crt(m, list(i))[0] for i in cartes(*a)))"
                            ],
                            [
                                "+",
                                "continue"
                            ],
                            [
                                "+",
                                "tot_roots = tot_roots | roots_in_base"
                            ],
                            [
                                "+",
                                "tot_roots = set()"
                            ],
                            [
                                "+",
                                "new_roots.add(k)"
                            ],
                            [
                                "+",
                                "rootn = pow(root, n)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 48,
                        "covered": 1,
                        "percentage": 2.083333333333333
                    }
                }
            }
        },
        "sympy__sympy-18211": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/relational.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18698": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/polys/polytools.py": [
                            [
                                "+",
                                "from functools import wraps, reduce"
                            ],
                            [
                                "+",
                                "from operator import mul"
                            ],
                            [
                                "+",
                                "for k in set(i for _, i in factors)]"
                            ],
                            [
                                "+",
                                "elif arg.is_Pow:"
                            ],
                            [
                                "+",
                                "if method == 'sqf':"
                            ],
                            [
                                "+",
                                "factors = [(reduce(mul, (f for f, _ in factors if _ == k)), k)"
                            ],
                            [
                                "-",
                                "continue"
                            ],
                            [
                                "-",
                                "from functools import wraps"
                            ],
                            [
                                "-",
                                "args.extend(arg.args)"
                            ],
                            [
                                "-",
                                "if arg.is_Mul:"
                            ],
                            [
                                "-",
                                "if arg.is_Pow:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18763": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/latex.py": [
                            [
                                "+",
                                "return r'\\left. \\left(%s\\right) \\right|_{\\substack{ %s }}' % (latex_expr,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-19040": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/polys/factortools.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-19346": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/repr.py": [
                            "def _print_EmptySequence(self, expr):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/repr.py": [
                            [
                                "+",
                                "if not expr:"
                            ],
                            [
                                "+",
                                "def _print_set(self, expr):"
                            ],
                            [
                                "+",
                                "sep = \", \""
                            ],
                            [
                                "+",
                                "return \"{%s}\" % sep.join(dict_kvs)"
                            ],
                            [
                                "+",
                                "def _print_dict(self, expr):"
                            ],
                            [
                                "+",
                                "return \"{%s}\" % self.reprify(expr, \", \")"
                            ],
                            [
                                "+",
                                "return \"set()\""
                            ],
                            [
                                "+",
                                "dict_kvs = [\"%s: %s\" % (self.doprint(key), self.doprint(value)) for key, value in expr.items()]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 1,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "sympy__sympy-19495": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/sets/conditionset.py": [
                            "class ConditionSet(Set):"
                        ]
                    },
                    "lines": {
                        "sympy/sets/conditionset.py": [
                            [
                                "-",
                                "Notes"
                            ],
                            [
                                "+",
                                "base = self.base_set.subs(old, new)"
                            ],
                            [
                                "+",
                                "# 'base'. In other words: assumptions are ignored."
                            ],
                            [
                                "-",
                                "====="
                            ],
                            [
                                "+",
                                "# __new__ we *don't* check if 'sym' actually belongs to"
                            ],
                            [
                                "+",
                                "appears as a free symbol in the base set and the dummy symbol"
                            ],
                            [
                                "+",
                                "# on 'sym'. In order for .subs() to be consistent with"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "-",
                                "return self.func(self.sym, cond, base)"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "# The condition may have become true due to assumptions"
                            ],
                            [
                                "-",
                                "cond = self.condition.subs(old, new)"
                            ],
                            [
                                "-",
                                "and appears as a free symbol in the base set and the dummy symbol"
                            ],
                            [
                                "+",
                                "return self.func(self.sym, cond, base)"
                            ],
                            [
                                "-",
                                "base = self.base_set.subs(old, new)"
                            ],
                            [
                                "+",
                                "cond = self.condition.subs(old, new)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 19,
                        "covered": 3,
                        "percentage": 15.789473684210526
                    }
                }
            }
        },
        "sympy__sympy-19637": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 4,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-19783": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/physics/quantum/dagger.py",
                        "sympy/physics/quantum/operator.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-19954": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/combinatorics/perm_groups.py": [
                            [
                                "+",
                                "blocks = [b for i, b in enumerate(blocks) if not blocks_remove_mask[i]]"
                            ],
                            [
                                "+",
                                "num_blocks = [n for i, n in enumerate(num_blocks) if not blocks_remove_mask[i]]"
                            ],
                            [
                                "+",
                                "rep_blocks = [r for i, r in enumerate(rep_blocks) if not blocks_remove_mask[i]]"
                            ],
                            [
                                "+",
                                "blocks_remove_mask = [False] * len(blocks)"
                            ],
                            [
                                "+",
                                "blocks_remove_mask[i] = True"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 4,
                        "percentage": 44.44444444444444
                    }
                }
            }
        },
        "sympy__sympy-20154": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/utilities/iterables.py": [
                            [
                                "-",
                                "Note that the _same_ dictionary object is returned each time."
                            ],
                            [
                                "-",
                                "This is for speed:  generating each partition goes quickly,"
                            ],
                            [
                                "-",
                                ">>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP"
                            ],
                            [
                                "-",
                                "If you want to build a list of the returned dictionaries then"
                            ],
                            [
                                "-",
                                "[(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]"
                            ],
                            [
                                "-",
                                "make a copy of them:"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "taking constant time, independent of n."
                            ],
                            [
                                "-",
                                ">>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP"
                            ],
                            [
                                "-",
                                "[{1: 6}, {1: 6}, {1: 6}, {1: 6}]"
                            ],
                            [
                                "-",
                                "[{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]"
                            ],
                            [
                                "-",
                                ">>> [p for p in partitions(6, k=2)]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 16,
                        "covered": 4,
                        "percentage": 25.0
                    }
                }
            }
        },
        "sympy__sympy-20428": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/polys/domains/expressiondomain.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20438": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/relational.py",
                        "sympy/sets/handlers/comparison.py",
                        "sympy/sets/handlers/issubset.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20590": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/_print_helpers.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20801": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/numbers.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20916": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/printing/conventions.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21379": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/mod.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21596": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/sets/handlers/intersection.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 33,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21612": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/printing/str.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21847": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-21930": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/physics/secondquant.py": [
                            "def _sortkey(cls, index):"
                        ]
                    },
                    "lines": {
                        "sympy/physics/secondquant.py": [
                            [
                                "+",
                                "return \"{a^\\\\dagger_{%s}}\" % self.state.name"
                            ],
                            [
                                "+",
                                "return \"{%s^{%s}_{%s}}\" % ("
                            ],
                            [
                                "-",
                                "return \"a^\\\\dagger_{%s}\" % self.state.name"
                            ],
                            [
                                "-",
                                "return \"%s^{%s}_{%s}\" % ("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 2,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "sympy__sympy-22080": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/printing/codeprinter.py",
                        "sympy/printing/precedence.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-22456": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/codegen/ast.py": [
                            "def _construct_text(cls, text):",
                            "def _construct_iterable(cls, itr):",
                            "def kwargs(self, exclude=(), apply=None):"
                        ]
                    },
                    "lines": {
                        "sympy/codegen/ast.py": [
                            [
                                "+",
                                "return {}"
                            ],
                            [
                                "+",
                                "def kwargs(self, exclude = (), apply = None):"
                            ],
                            [
                                "+",
                                "def func(self):"
                            ],
                            [
                                "+",
                                "return lambda: self"
                            ],
                            [
                                "+",
                                "from sympy.core.expr import Expr, Atom"
                            ],
                            [
                                "+",
                                "class String(Atom, Token):"
                            ],
                            [
                                "-",
                                "from sympy.core.expr import Expr"
                            ],
                            [
                                "-",
                                "class String(Token):"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "@property"
                            ],
                            [
                                "+",
                                "#to be removed when Atom is given a suitable func"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 1,
                        "percentage": 8.333333333333332
                    }
                }
            }
        },
        "sympy__sympy-22714": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/geometry/point.py": [
                            [
                                "+",
                                "if any(a.is_number and im(a).is_zero is False for a in coords):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-22914": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/pycode.py": [
                            [
                                "+",
                                "'Max': 'max',"
                            ],
                            [
                                "+",
                                "'Min': 'min',"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 100
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-23262": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/utilities/lambdify.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-23413": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/polys/matrices/normalforms.py": [
                            [
                                "-",
                                "rows = min(m, n)"
                            ],
                            [
                                "-",
                                "# A is an m x n matrix."
                            ],
                            [
                                "+",
                                "break"
                            ],
                            [
                                "-",
                                "for i in range(m - 1, m - 1 - rows, -1):"
                            ],
                            [
                                "+",
                                "# the maximum possible number of pivots."
                            ],
                            [
                                "+",
                                "# way up."
                            ],
                            [
                                "-",
                                "# way up. The total number of rows we will consider is min(m, n), where"
                            ],
                            [
                                "+",
                                "for i in range(m - 1, -1, -1):"
                            ],
                            [
                                "+",
                                "if k == 0:"
                            ],
                            [
                                "+",
                                "# This case can arise when n < m and we've already found n pivots."
                            ],
                            [
                                "+",
                                "# We don't need to consider any more rows, because this is already"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-23534": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-23824": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/physics/hep/gamma_matrices.py": [
                            [
                                "+",
                                "resulting_indices = list( free_pos[0:first_dum_pos] + ri for ri in resulting_indices )"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "sympy__sympy-23950": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-24066": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/physics/units/unitsystem.py": [
                            [
                                "+",
                                "return (expr.func(*(f[0] for f in fds)), *dims)"
                            ],
                            [
                                "+",
                                "dims = [Dimension(1) if self.get_dimension_system().is_dimensionless(d[1]) else d[1] for d in fds]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 5,
                        "percentage": 71.42857142857143
                    }
                }
            }
        },
        "sympy__sympy-24213": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/physics/units/unitsystem.py": [
                            [
                                "+",
                                "if not self.get_dimension_system().equivalent_dims(dim, addend_dim):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-24443": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/combinatorics/homomorphisms.py": [
                            "def homomorphism(domain, codomain, gens, images=(), check=True):"
                        ]
                    },
                    "lines": {
                        "sympy/combinatorics/homomorphisms.py": [
                            [
                                "-",
                                "# where sym is the generator symbol"
                            ],
                            [
                                "+",
                                "The set of keys must be equal to domain.generators."
                            ],
                            [
                                "-",
                                "# (not just its symbol) or the inverse of"
                            ],
                            [
                                "-",
                                "power = r_arr[j][1]"
                            ],
                            [
                                "-",
                                "rels = domain.relators"
                            ],
                            [
                                "-",
                                "rels = domain.presentation().relators"
                            ],
                            [
                                "+",
                                "The values must be elements of the codomain."
                            ],
                            [
                                "+",
                                "rels = pres.relators"
                            ],
                            [
                                "-",
                                "# and p is the power to which it is"
                            ],
                            [
                                "-",
                                "return identity"
                            ],
                            [
                                "-",
                                "gens = domain.presentation().generators"
                            ],
                            [
                                "+",
                                "g = symbols_to_domain_generators[symbol]"
                            ],
                            [
                                "-",
                                "i = 0"
                            ],
                            [
                                "-",
                                "return w"
                            ],
                            [
                                "-",
                                "r_arr = r.array_form"
                            ],
                            [
                                "+",
                                "gens = pres.generators"
                            ],
                            [
                                "-",
                                "if r.is_identity:"
                            ],
                            [
                                "+",
                                "images : dict"
                            ],
                            [
                                "+",
                                "w *= images[g]**power"
                            ],
                            [
                                "+",
                                "codomain : PermutationGroup, FpGroup, FreeGroup"
                            ],
                            [
                                "+",
                                "Parameters"
                            ],
                            [
                                "+",
                                "return w"
                            ],
                            [
                                "-",
                                "# both indices"
                            ],
                            [
                                "+",
                                "domain : PermutationGroup, FpGroup, FreeGroup"
                            ],
                            [
                                "+",
                                "pres = domain if hasattr(domain, 'relators') else domain.presentation()"
                            ],
                            [
                                "-",
                                "while i < len(r):"
                            ],
                            [
                                "+",
                                "=========="
                            ],
                            [
                                "+",
                                "for symbol, power in r.array_form:"
                            ],
                            [
                                "-",
                                "w = identity"
                            ],
                            [
                                "-",
                                "# i is the index for r and j is for"
                            ],
                            [
                                "-",
                                "i += abs(power)"
                            ],
                            [
                                "-",
                                "# raised while r[i] is a generator"
                            ],
                            [
                                "+",
                                "symbols = [g.ext_rep[0] for g in gens]"
                            ],
                            [
                                "-",
                                "if hasattr(domain, 'relators'):"
                            ],
                            [
                                "-",
                                "j = 0"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "-",
                                "# a generator - hence the need for"
                            ],
                            [
                                "+",
                                "Check that a given mapping of generators to images defines a homomorphism."
                            ],
                            [
                                "-",
                                "# r_arr. r_arr[j] is the tuple (sym, p)"
                            ],
                            [
                                "-",
                                "j += 1"
                            ],
                            [
                                "+",
                                "symbols_to_domain_generators = dict(zip(symbols, domain.generators))"
                            ],
                            [
                                "+",
                                "w = identity"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 51,
                        "covered": 9,
                        "percentage": 17.647058823529413
                    }
                }
            }
        },
        "sympy__sympy-24539": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/polys/rings.py": [
                            [
                                "+",
                                "elif len(symbols) != self.ring.ngens:"
                            ],
                            [
                                "+",
                                "\"Wrong number of symbols, expected %s got %s\" %"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "+",
                                "if not symbols:"
                            ],
                            [
                                "+",
                                "raise ValueError("
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "(self.ring.ngens, len(symbols))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "sympy__sympy-24562": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/core/numbers.py": [
                            [
                                "+",
                                "Q *= p.q"
                            ],
                            [
                                "+",
                                "Q *= int(q)"
                            ],
                            [
                                "+",
                                "Q = 1"
                            ],
                            [
                                "+",
                                "q = Q"
                            ],
                            [
                                "-",
                                "q = int(q)"
                            ],
                            [
                                "-",
                                "q = q.p"
                            ],
                            [
                                "+",
                                "Q *= q.p"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 1,
                        "percentage": 12.5
                    }
                }
            }
        },
        "sympy__sympy-24661": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/parsing/sympy_parser.py": [
                            "class EvaluateFalseTransformer(ast.NodeTransformer):"
                        ]
                    },
                    "lines": {
                        "sympy/parsing/sympy_parser.py": [
                            [
                                "+",
                                "ast.GtE: 'Ge',"
                            ],
                            [
                                "+",
                                "ast.NotEq: 'Ne',"
                            ],
                            [
                                "+",
                                "return new_node"
                            ],
                            [
                                "+",
                                "func=ast.Name(id=sympy_class, ctx=ast.Load()),"
                            ],
                            [
                                "+",
                                "right = self.visit(node.comparators[0])"
                            ],
                            [
                                "+",
                                "sympy_class = self.relational_operators[node.ops[0].__class__]"
                            ],
                            [
                                "+",
                                "ast.Lt: 'Lt',"
                            ],
                            [
                                "+",
                                "starargs=None,"
                            ],
                            [
                                "+",
                                "kwargs=None"
                            ],
                            [
                                "+",
                                "ast.Eq: 'Eq'"
                            ],
                            [
                                "+",
                                "def visit_Compare(self, node):"
                            ],
                            [
                                "+",
                                "args=[left, right],"
                            ],
                            [
                                "+",
                                "keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],"
                            ],
                            [
                                "+",
                                "if node.ops[0].__class__ in self.relational_operators:"
                            ],
                            [
                                "+",
                                "ast.LtE: 'Le',"
                            ],
                            [
                                "+",
                                "ast.Gt: 'Gt',"
                            ],
                            [
                                "+",
                                "new_node = ast.Call("
                            ],
                            [
                                "+",
                                "relational_operators = {"
                            ],
                            [
                                "+",
                                "left = self.visit(node.left)"
                            ],
                            [
                                "+",
                                "return node"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 23,
                        "covered": 3,
                        "percentage": 13.043478260869565
                    }
                }
            }
        }
    },
    "average_coverage": {
        "file_coverage": 69.36619047619047,
        "function_coverage": 21.08567821067821,
        "line_coverage": 22.341438012183474
    }
}