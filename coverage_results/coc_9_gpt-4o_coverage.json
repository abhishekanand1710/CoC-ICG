{
    "per_instance_coverage": {
        "astropy__astropy-12907": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/modeling/separable.py": [
                            "def _cstack(left, right):"
                        ]
                    },
                    "lines": {
                        "astropy/modeling/separable.py": [
                            [
                                "+",
                                "cright[-right.shape[0]:, -right.shape[1]:] = right"
                            ],
                            [
                                "-",
                                "cright[-right.shape[0]:, -right.shape[1]:] = 1"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-14182": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/io/ascii/rst.py": [
                            "def get_fixedwidth_params(self, line):"
                        ]
                    },
                    "lines": {
                        "astropy/io/ascii/rst.py": [
                            [
                                "+",
                                ">>> tbl = QTable({\"wave\": [350, 950] * u.nm, \"response\": [0.7, 1.2] * u.count})"
                            ],
                            [
                                "+",
                                ">>> tbl.write(sys.stdout,  format=\"ascii.rst\")"
                            ],
                            [
                                "-",
                                "start_line = 3"
                            ],
                            [
                                "+",
                                "350.0      0.7"
                            ],
                            [
                                "+",
                                "lines = [lines[idx]] + lines + [lines[idx]]"
                            ],
                            [
                                "+",
                                "nm       ct"
                            ],
                            [
                                "+",
                                "Like other fixed-width formats, when writing a table you can provide ``header_rows``"
                            ],
                            [
                                "-",
                                "lines = [lines[1]] + lines + [lines[1]]"
                            ],
                            [
                                "+",
                                "self.data.start_line = 2 + len(self.header.header_rows)"
                            ],
                            [
                                "-",
                                "2    4.5  Worlds"
                            ],
                            [
                                "+",
                                "super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)"
                            ],
                            [
                                "+",
                                "to specify a list of table rows to output as the header.  For example::"
                            ],
                            [
                                "-",
                                "==== ===== ======"
                            ],
                            [
                                "-",
                                "1    2.3  Hello"
                            ],
                            [
                                "+",
                                "===== ========"
                            ],
                            [
                                "-",
                                "Col1  Col2  Col3"
                            ],
                            [
                                "+",
                                ">>> from astropy.table import QTable"
                            ],
                            [
                                "+",
                                ">>> import sys"
                            ],
                            [
                                "+",
                                ">>> import astropy.units as u"
                            ],
                            [
                                "+",
                                "def read(self, table):"
                            ],
                            [
                                "+",
                                "950.0      1.2"
                            ],
                            [
                                "-",
                                "super().__init__(delimiter_pad=None, bookend=False)"
                            ],
                            [
                                "+",
                                "idx = len(self.header.header_rows)"
                            ],
                            [
                                "+",
                                ">>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=['name', 'unit'])"
                            ],
                            [
                                "+",
                                "return super().read(table)"
                            ],
                            [
                                "+",
                                "wave response"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 29,
                        "covered": 3,
                        "percentage": 10.344827586206897
                    }
                }
            }
        },
        "astropy__astropy-14365": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/io/ascii/qdp.py": [
                            "def _line_type(line, delimiter=None):"
                        ]
                    },
                    "lines": {
                        "astropy/io/ascii/qdp.py": [
                            [
                                "-",
                                "_line_type_re = re.compile(_type_re)"
                            ],
                            [
                                "+",
                                "if v.upper() == \"NO\":"
                            ],
                            [
                                "-",
                                "if v == \"NO\":"
                            ],
                            [
                                "+",
                                "_line_type_re = re.compile(_type_re, re.IGNORECASE)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "astropy__astropy-14995": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/nddata/mixins/ndarithmetic.py": [
                            "def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):"
                        ]
                    },
                    "lines": {
                        "astropy/nddata/mixins/ndarithmetic.py": [
                            [
                                "+",
                                "# Now let's calculate the resulting mask (operation enforces copy)"
                            ],
                            [
                                "+",
                                "elif operand.mask is None:"
                            ],
                            [
                                "-",
                                "elif operand is None:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "astropy__astropy-6938": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/io/fits/fitsrec.py": [
                            "def _scale_back_ascii(self, col_idx, input_field, output_field):"
                        ]
                    },
                    "lines": {
                        "astropy/io/fits/fitsrec.py": [
                            [
                                "+",
                                "output_field[:] = output_field.replace(b'E', b'D')"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "astropy__astropy-7746": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "astropy/wcs/wcs.py": [
                            "def _array_converter(self, func, sky, *args, ra_dec_order=False):",
                            "def _return_single_array(xy, origin):"
                        ]
                    },
                    "lines": {
                        "astropy/wcs/wcs.py": [
                            [
                                "+",
                                "if 0 in xy.shape:"
                            ],
                            [
                                "+",
                                "return axes"
                            ],
                            [
                                "+",
                                "if any([x.size == 0 for x in axes]):"
                            ],
                            [
                                "+",
                                "return xy"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-10914": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/conf/global_settings.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-10924": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11001": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/compiler.py": [
                            "def __init__(self, query, connection, using):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/compiler.py": [
                            [
                                "+",
                                "self.ordering_parts = re.compile(r'^(.*)\\s(ASC|DESC)(.*)', re.MULTILINE | re.DOTALL)"
                            ],
                            [
                                "+",
                                "# Multiline ordering SQL clause may appear from RawSQL."
                            ],
                            [
                                "-",
                                "self.ordering_parts = re.compile(r'(.*)\\s(ASC|DESC)(.*)')"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11019": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/widgets.py": [
                            "def __getitem__(self, name):",
                            "def __str__(self):"
                        ]
                    },
                    "lines": {
                        "django/forms/widgets.py": [
                            [
                                "-",
                                "# it doesn't already exist."
                            ],
                            [
                                "-",
                                "for path in reversed(list_2):"
                            ],
                            [
                                "+",
                                "css = defaultdict(list)"
                            ],
                            [
                                "+",
                                "all_items = OrderedSet()"
                            ],
                            [
                                "-",
                                "css = self._css_lists[0]"
                            ],
                            [
                                "+",
                                "all_items.add(item)"
                            ],
                            [
                                "+",
                                "', '.join(repr(l) for l in lists)"
                            ],
                            [
                                "+",
                                "dependency_graph.setdefault(head, set())"
                            ],
                            [
                                "+",
                                "for css_list in self._css_lists:"
                            ],
                            [
                                "+",
                                "for item in list_:"
                            ],
                            [
                                "+",
                                "head = list_[0]"
                            ],
                            [
                                "+",
                                "for list_ in filter(None, lists):"
                            ],
                            [
                                "+",
                                "except CyclicDependencyError:"
                            ],
                            [
                                "-",
                                "# filter(None, ...) avoids calling merge with empty dicts."
                            ],
                            [
                                "-",
                                "for obj in filter(None, self._js_lists[1:]):"
                            ],
                            [
                                "+",
                                "from django.utils.datastructures import OrderedSet"
                            ],
                            [
                                "+",
                                "css[medium].append(sublist)"
                            ],
                            [
                                "-",
                                "}"
                            ],
                            [
                                "-",
                                "last_insert_index = len(list_1)"
                            ],
                            [
                                "+",
                                "def merge(*lists):"
                            ],
                            [
                                "-",
                                "js = self.merge(js, obj)"
                            ],
                            [
                                "+",
                                "# The first items depend on nothing but have to be part of the"
                            ],
                            [
                                "-",
                                "# Walk list_2 in reverse, inserting each element into combined_list if"
                            ],
                            [
                                "+",
                                "return list(all_items)"
                            ],
                            [
                                "+",
                                "for medium, sublist in css_list.items():"
                            ],
                            [
                                "+",
                                "Merge lists while trying to keep the relative order of the elements."
                            ],
                            [
                                "+",
                                "CyclicDependencyError, stable_topological_sort,"
                            ],
                            [
                                "+",
                                "return self.merge(*self._js_lists)"
                            ],
                            [
                                "+",
                                "from collections import defaultdict"
                            ],
                            [
                                "-",
                                "return js"
                            ],
                            [
                                "-",
                                "js = self._js_lists[0]"
                            ],
                            [
                                "-",
                                "for obj in filter(None, self._css_lists[1:]):"
                            ],
                            [
                                "-",
                                "css = {"
                            ],
                            [
                                "+",
                                "from django.utils.topological_sort import ("
                            ],
                            [
                                "+",
                                "# No self dependencies"
                            ],
                            [
                                "+",
                                "'Detected duplicate Media files in an opposite order: {}'.format("
                            ],
                            [
                                "-",
                                "return combined_list"
                            ],
                            [
                                "-",
                                "Merge two lists while trying to keep the relative order of the elements."
                            ],
                            [
                                "+",
                                "head = item"
                            ],
                            [
                                "-",
                                "medium: self.merge(css.get(medium, []), obj.get(medium, []))"
                            ],
                            [
                                "-",
                                "for medium in css.keys() | obj.keys()"
                            ],
                            [
                                "+",
                                "return stable_topological_sort(all_items, dependency_graph)"
                            ],
                            [
                                "+",
                                "if head != item:"
                            ],
                            [
                                "+",
                                "), MediaOrderConflictWarning,"
                            ],
                            [
                                "-",
                                "combined_list = list(list_1)"
                            ],
                            [
                                "+",
                                "return {medium: self.merge(*lists) for medium, lists in css.items()}"
                            ],
                            [
                                "+",
                                "dependency_graph = defaultdict(set)"
                            ],
                            [
                                "-",
                                "return css"
                            ],
                            [
                                "+",
                                "Warn if the lists have the same elements in a different relative order."
                            ],
                            [
                                "+",
                                "dependency_graph[item].add(head)"
                            ],
                            [
                                "+",
                                "# dependency graph to be included in the result."
                            ],
                            [
                                "-",
                                "# filter(None, ...) avoids calling merge() with empty lists."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 75,
                        "covered": 23,
                        "percentage": 30.666666666666664
                    }
                }
            }
        },
        "django__django-11039": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/commands/sqlmigrate.py": [
                            "def handle(self, *args, **options):"
                        ]
                    },
                    "lines": {
                        "django/core/management/commands/sqlmigrate.py": [
                            [
                                "-",
                                "# Show begin/end around output only for atomic migrations"
                            ],
                            [
                                "+",
                                "# supports transactional DDL."
                            ],
                            [
                                "+",
                                "# Show begin/end around output for atomic migrations, if the database"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 2,
                        "percentage": 40.0
                    }
                }
            }
        },
        "django__django-11049": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11099": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/contrib/auth/validators.py": [
                            [
                                "+",
                                "regex = r'^[\\w.@+-]+\\Z'"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-11133": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/http/response.py": [
                            "def make_bytes(self, value):"
                        ]
                    },
                    "lines": {
                        "django/http/response.py": [
                            [
                                "-",
                                "if isinstance(value, bytes):"
                            ],
                            [
                                "+",
                                "if isinstance(value, (bytes, memoryview)):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11179": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/deletion.py": [
                            "def delete(self):"
                        ]
                    },
                    "lines": {
                        "django/db/models/deletion.py": [
                            [
                                "+",
                                "setattr(instance, model._meta.pk.attname, None)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11283": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/contrib/auth/migrations/0011_update_proxy_permissions.py": [
                            [
                                "+",
                                "content_type=old_content_type,"
                            ],
                            [
                                "+",
                                "new = '{}_{}'.format(new_content_type.app_label, new_content_type.model)"
                            ],
                            [
                                "+",
                                "WARNING = \"\"\""
                            ],
                            [
                                "+",
                                "with transaction.atomic():"
                            ],
                            [
                                "+",
                                "permissions_query,"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "+",
                                "Codenames Q: {query}"
                            ],
                            [
                                "+",
                                "sys.stdout.write(style.WARNING(WARNING.format(old=old, new=new, query=permissions_query)))"
                            ],
                            [
                                "+",
                                "from django.db.utils import IntegrityError"
                            ],
                            [
                                "+",
                                "style = color_style()"
                            ],
                            [
                                "+",
                                "Permission.objects.filter("
                            ],
                            [
                                "+",
                                "from django.core.management.color import color_style"
                            ],
                            [
                                "+",
                                "Ensure to audit ALL permissions for {old} and {new}."
                            ],
                            [
                                "+",
                                "Permission(s) for {new} already existed."
                            ],
                            [
                                "+",
                                "from django.db import migrations, transaction"
                            ],
                            [
                                "+",
                                ").update(content_type=new_content_type)"
                            ],
                            [
                                "-",
                                "from django.db import migrations"
                            ],
                            [
                                "+",
                                "import sys"
                            ],
                            [
                                "+",
                                "old = '{}_{}'.format(old_content_type.app_label, old_content_type.model)"
                            ],
                            [
                                "+",
                                "except IntegrityError:"
                            ],
                            [
                                "+",
                                "A problem arose migrating proxy model permissions for {old} to {new}."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 27,
                        "covered": 5,
                        "percentage": 18.51851851851852
                    }
                }
            }
        },
        "django__django-11422": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/utils/autoreload.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11564": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/conf/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11583": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/autoreload.py": [
                            [
                                "+",
                                "logger.debug('\"%s\" raised when resolving path: \"%s\"' % (str(e), path))"
                            ],
                            [
                                "+",
                                "except ValueError as e:"
                            ],
                            [
                                "+",
                                "# Network filesystems may return null bytes in file paths."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-11620": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/views/debug.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11630": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/core/checks/model_checks.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11742": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11797": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/lookups.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11815": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/serializer.py": [
                            "class EnumSerializer(BaseSerializer):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/serializer.py": [
                            [
                                "-",
                                "v_string, v_imports = serializer_factory(self.value.value).serialize()"
                            ],
                            [
                                "+",
                                "return ("
                            ],
                            [
                                "+",
                                "'%s.%s[%r]' % (module, enum_class.__name__, self.value.name),"
                            ],
                            [
                                "-",
                                "imports = {'import %s' % module, *v_imports}"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "{'import %s' % module},"
                            ],
                            [
                                "-",
                                "return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11848": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/http.py": [
                            [
                                "+",
                                "if year - (current_year % 100) > 50:"
                            ],
                            [
                                "+",
                                "current_century = current_year - (current_year % 100)"
                            ],
                            [
                                "+",
                                "# interpreted as representing the past."
                            ],
                            [
                                "+",
                                "current_year = datetime.datetime.utcnow().year"
                            ],
                            [
                                "-",
                                "year += 1900"
                            ],
                            [
                                "+",
                                "year += current_century - 100"
                            ],
                            [
                                "+",
                                "year += current_century"
                            ],
                            [
                                "+",
                                "# year that appears to be more than 50 years in the future are"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-11905": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/lookups.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11910": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/autodetector.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11964": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/enums.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-11999": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12113": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/sqlite3/creation.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12125": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/serializer.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12184": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/urls/resolvers.py": [
                            "def match(self, path):"
                        ]
                    },
                    "lines": {
                        "django/urls/resolvers.py": [
                            [
                                "-",
                                "kwargs = {k: v for k, v in match.groupdict().items() if v is not None}"
                            ],
                            [
                                "+",
                                "kwargs = match.groupdict()"
                            ],
                            [
                                "+",
                                "kwargs = {k: v for k, v in kwargs.items() if v is not None}"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12284": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12286": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/checks/translation.py": [
                            "def check_setting_languages_bidi(app_configs, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/core/checks/translation.py": [
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "return []"
                            ],
                            [
                                "-",
                                "if settings.LANGUAGE_CODE not in available_tags:"
                            ],
                            [
                                "+",
                                "from django.utils.translation import get_supported_language_variant"
                            ],
                            [
                                "-",
                                "available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}"
                            ],
                            [
                                "-",
                                "return []"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 3,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-12308": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/contrib/admin/utils.py": [
                            [
                                "+",
                                "return display_for_value(value, empty_value_display)"
                            ],
                            [
                                "+",
                                "elif isinstance(field, models.JSONField) and value:"
                            ],
                            [
                                "+",
                                "return field.get_prep_value(value)"
                            ],
                            [
                                "+",
                                "except TypeError:"
                            ],
                            [
                                "+",
                                "try:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12453": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/base/creation.py": [
                            "def deserialize_db_from_string(self, data):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/base/creation.py": [
                            [
                                "+",
                                "# Disable constraint checks, because some databases (MySQL) doesn't"
                            ],
                            [
                                "+",
                                "from django.db.transaction import atomic"
                            ],
                            [
                                "+",
                                "with atomic(using=self.connection.alias):"
                            ],
                            [
                                "+",
                                "# because constraint checks were disabled."
                            ],
                            [
                                "+",
                                "for obj in serializers.deserialize('json', data, using=self.connection.alias):"
                            ],
                            [
                                "+",
                                "with self.connection.constraint_checks_disabled():"
                            ],
                            [
                                "+",
                                "self.connection.check_constraints()"
                            ],
                            [
                                "+",
                                "# support deferred checks."
                            ],
                            [
                                "+",
                                "# Load data in a transaction to handle forward references and cycles."
                            ],
                            [
                                "+",
                                "# Manually check for any invalid keys that might have been added,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 3,
                        "percentage": 23.076923076923077
                    }
                }
            }
        },
        "django__django-12470": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/compiler.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12497": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/related.py": [
                            "def _check_relationship_model(self, from_model=None, **kwargs):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-12589": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def set_group_by(self, allow_aliases=True):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "+",
                                "if not allow_aliases or alias in column_names:"
                            ],
                            [
                                "+",
                                "field.column"
                            ],
                            [
                                "+",
                                "for join in list(self.alias_map.values())[1:]:  # Skip base table."
                            ],
                            [
                                "+",
                                "# Column names from JOINs to check collisions with aliases."
                            ],
                            [
                                "+",
                                "seen_models = set()"
                            ],
                            [
                                "+",
                                "if allow_aliases:"
                            ],
                            [
                                "+",
                                "model = join.join_field.related_model"
                            ],
                            [
                                "+",
                                "})"
                            ],
                            [
                                "+",
                                "column_names.update({"
                            ],
                            [
                                "+",
                                "seen_models.add(model)"
                            ],
                            [
                                "+",
                                "if model not in seen_models:"
                            ],
                            [
                                "+",
                                "for field in model._meta.local_concrete_fields"
                            ],
                            [
                                "-",
                                "if not allow_aliases:"
                            ],
                            [
                                "+",
                                "column_names = set()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 1,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "django__django-12700": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/views/debug.py": [
                            "def cleanse_setting(self, key, value):"
                        ]
                    },
                    "lines": {
                        "django/views/debug.py": [
                            [
                                "+",
                                "cleansed = tuple([self.cleanse_setting('', v) for v in value])"
                            ],
                            [
                                "+",
                                "elif isinstance(value, tuple):"
                            ],
                            [
                                "+",
                                "cleansed = [self.cleanse_setting('', v) for v in value]"
                            ],
                            [
                                "+",
                                "elif isinstance(value, list):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12708": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/base/schema.py": [
                            "def alter_index_together(self, model, old_index_together, new_index_together):"
                        ]
                    },
                    "lines": {
                        "django/db/backends/base/schema.py": [
                            [
                                "+",
                                "{'index': True, 'unique': False},"
                            ],
                            [
                                "-",
                                "self._delete_composed_index(model, fields, {'index': True}, self.sql_delete_index)"
                            ],
                            [
                                "+",
                                "self._delete_composed_index("
                            ],
                            [
                                "+",
                                "model,"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "fields,"
                            ],
                            [
                                "+",
                                "self.sql_delete_index,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12747": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/deletion.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12856": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12908": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-12915": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/staticfiles/handlers.py": [
                            "def get_response(self, request):"
                        ]
                    },
                    "lines": {
                        "django/contrib/staticfiles/handlers.py": [
                            [
                                "+",
                                "from asgiref.sync import sync_to_async"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 6,
                        "percentage": 85.71428571428571
                    }
                }
            }
        },
        "django__django-12983": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/utils/text.py": [
                            "def unescape_string_literal(s):"
                        ]
                    },
                    "lines": {
                        "django/utils/text.py": [
                            [
                                "-",
                                "Convert to lowercase. Also strip leading and trailing whitespace."
                            ],
                            [
                                "+",
                                "dashes to single dashes. Remove characters that aren't alphanumerics,"
                            ],
                            [
                                "+",
                                "underscores, or hyphens. Convert to lowercase. Also strip leading and"
                            ],
                            [
                                "+",
                                "return re.sub(r'[-\\s]+', '-', value).strip('-_')"
                            ],
                            [
                                "+",
                                "trailing whitespace, dashes, and underscores."
                            ],
                            [
                                "-",
                                "Convert to ASCII if 'allow_unicode' is False. Convert spaces to hyphens."
                            ],
                            [
                                "+",
                                "Convert to ASCII if 'allow_unicode' is False. Convert spaces or repeated"
                            ],
                            [
                                "+",
                                "value = re.sub(r'[^\\w\\s-]', '', value.lower())"
                            ],
                            [
                                "-",
                                "value = re.sub(r'[^\\w\\s-]', '', value.lower()).strip()"
                            ],
                            [
                                "-",
                                "Remove characters that aren't alphanumerics, underscores, or hyphens."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 1,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "django__django-13028": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13033": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/compiler.py": [
                            "def find_ordering_name(self, name, opts, alias=None, default_order='ASC',"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/compiler.py": [
                            [
                                "-",
                                "if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':"
                            ],
                            [
                                "+",
                                "getattr(field, 'attname', None) != pieces[-1] and"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "field.is_relation and"
                            ],
                            [
                                "+",
                                "name != 'pk'"
                            ],
                            [
                                "+",
                                "if ("
                            ],
                            [
                                "+",
                                "opts.ordering and"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13158": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13220": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/exceptions.py": [
                            "def __str__(self):"
                        ]
                    },
                    "lines": {
                        "django/core/exceptions.py": [
                            [
                                "+",
                                "# Ignore params and messages ordering."
                            ],
                            [
                                "+",
                                "if hasattr(self, 'message'):"
                            ],
                            [
                                "+",
                                "from django.utils.hashable import make_hashable"
                            ],
                            [
                                "+",
                                "))"
                            ],
                            [
                                "+",
                                "if hasattr(self, 'error_dict'):"
                            ],
                            [
                                "+",
                                "return hash(tuple(sorted(self.error_list, key=operator.attrgetter('message'))))"
                            ],
                            [
                                "+",
                                "import operator"
                            ],
                            [
                                "+",
                                "self.message,"
                            ],
                            [
                                "+",
                                "return hash(tuple(sorted(make_hashable(self.error_dict))))"
                            ],
                            [
                                "+",
                                "def __hash__(self):"
                            ],
                            [
                                "+",
                                "return hash(("
                            ],
                            [
                                "+",
                                "self.code,"
                            ],
                            [
                                "+",
                                "tuple(sorted(make_hashable(self.params))) if self.params else None,"
                            ],
                            [
                                "+",
                                "return hash(self) == hash(other)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 4,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "django__django-13230": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/syndication/views.py": [
                            "def get_feed(self, obj, request):"
                        ]
                    },
                    "lines": {
                        "django/contrib/syndication/views.py": [
                            [
                                "+",
                                "comments=self._get_dynamic_attr('item_comments', item),"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13265": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/autodetector.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 27,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13315": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/models.py": [
                            "def model_to_dict(instance, fields=None, exclude=None):"
                        ]
                    },
                    "lines": {
                        "django/forms/models.py": [
                            [
                                "+",
                                "# Use Exists() to avoid potential duplicates."
                            ],
                            [
                                "+",
                                "complex_filter = limit_choices_to"
                            ],
                            [
                                "+",
                                "complex_filter = Q(**limit_choices_to)"
                            ],
                            [
                                "+",
                                "from django.db.models import Exists, OuterRef, Q"
                            ],
                            [
                                "+",
                                "complex_filter &= Q(pk=OuterRef('pk'))"
                            ],
                            [
                                "+",
                                "if limit_choices_to:"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "-",
                                "if limit_choices_to is not None:"
                            ],
                            [
                                "+",
                                "Exists(formfield.queryset.model._base_manager.filter(complex_filter)),"
                            ],
                            [
                                "+",
                                "if not isinstance(complex_filter, Q):"
                            ],
                            [
                                "+",
                                "formfield.queryset = formfield.queryset.filter("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 1,
                        "percentage": 8.333333333333332
                    }
                }
            }
        },
        "django__django-13321": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/sessions/backends/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13401": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 24,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13447": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/sites.py": [
                            "def _build_app_dict(self, request, label=None):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/sites.py": [
                            [
                                "+",
                                "'model': model,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13448": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/base/creation.py": [
                            "def create_test_db(self, verbosity=1, autoclobber=False, serialize=True, keepdb="
                        ]
                    },
                    "lines": {
                        "django/db/backends/base/creation.py": [
                            [
                                "+",
                                "settings.MIGRATION_MODULES = {"
                            ],
                            [
                                "+",
                                "app.label: None"
                            ],
                            [
                                "+",
                                "if self.connection.settings_dict['TEST']['MIGRATE'] is False:"
                            ],
                            [
                                "+",
                                "# Disable migrations for all apps."
                            ],
                            [
                                "+",
                                "finally:"
                            ],
                            [
                                "-",
                                "if self.connection.settings_dict['TEST']['MIGRATE']:"
                            ],
                            [
                                "+",
                                "settings.MIGRATION_MODULES = old_migration_modules"
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "+",
                                "for app in apps.get_app_configs()"
                            ],
                            [
                                "+",
                                "old_migration_modules = settings.MIGRATION_MODULES"
                            ],
                            [
                                "+",
                                "}"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13551": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/auth/tokens.py": [
                            "def _make_hash_value(self, user, timestamp):",
                            "def _make_token_with_timestamp(self, user, timestamp, legacy=False):"
                        ]
                    },
                    "lines": {
                        "django/contrib/auth/tokens.py": [
                            [
                                "+",
                                "invalidated when it's used:"
                            ],
                            [
                                "+",
                                "that's sure to change after a password reset to produce a token that is"
                            ],
                            [
                                "-",
                                "Hash the user's primary key and some user state that's sure to change"
                            ],
                            [
                                "+",
                                "Hash the user's primary key, email (if available), and some user state"
                            ],
                            [
                                "-",
                                "used:"
                            ],
                            [
                                "-",
                                "after a password reset to produce a token that invalidated when it's"
                            ],
                            [
                                "+",
                                "email = getattr(user, email_field, '') or ''"
                            ],
                            [
                                "+",
                                "return f'{user.pk}{user.password}{login_timestamp}{timestamp}{email}'"
                            ],
                            [
                                "+",
                                "email_field = user.get_email_field_name()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 1,
                        "percentage": 10.0
                    }
                }
            }
        },
        "django__django-13590": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def resolve_lookup_value(self, value, can_reuse, allow_joins):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "+",
                                "type_ = type(value)"
                            ],
                            [
                                "+",
                                "values = ("
                            ],
                            [
                                "+",
                                "return type_(values)"
                            ],
                            [
                                "+",
                                "return type_(*values)"
                            ],
                            [
                                "+",
                                "if hasattr(type_, '_make'):  # namedtuple"
                            ],
                            [
                                "-",
                                "return type(value)("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13658": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/core/management/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13660": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/commands/shell.py": [
                            "def python(self, options):"
                        ]
                    },
                    "lines": {
                        "django/core/management/commands/shell.py": [
                            [
                                "-",
                                "exec(sys.stdin.read())"
                            ],
                            [
                                "+",
                                "exec(options['command'], globals())"
                            ],
                            [
                                "+",
                                "exec(sys.stdin.read(), globals())"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-13710": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/options.py": [
                            "def __init__(self, parent_model, admin_site):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/options.py": [
                            [
                                "+",
                                "if self.verbose_name_plural is None:"
                            ],
                            [
                                "+",
                                "if self.verbose_name is None:"
                            ],
                            [
                                "-",
                                "if self.verbose_name_plural is None:"
                            ],
                            [
                                "+",
                                "self.verbose_name_plural = format_lazy('{}s', self.verbose_name)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 3,
                        "percentage": 42.857142857142854
                    }
                }
            }
        },
        "django__django-13757": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/json.py": [
                            "def process_rhs(self, compiler, connection):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/json.py": [
                            [
                                "+",
                                "template = 'JSON_TYPE(%s, %%s) IS NULL'"
                            ],
                            [
                                "+",
                                "lhs, lhs_params, _ = self.lhs.preprocess_lhs(compiler, connection)"
                            ],
                            [
                                "+",
                                ").as_oracle(compiler, connection)"
                            ],
                            [
                                "+",
                                "# Column doesn't have a key or IS NULL."
                            ],
                            [
                                "+",
                                "return HasKey(self.lhs.lhs, self.lhs.key_name).as_sql("
                            ],
                            [
                                "+",
                                "template = 'JSON_TYPE(%s, %%s) IS NOT NULL'"
                            ],
                            [
                                "+",
                                "self.lhs.key_name,"
                            ],
                            [
                                "+",
                                "sql, params = HasKey("
                            ],
                            [
                                "+",
                                "return '(NOT %s OR %s IS NULL)' % (sql, lhs), tuple(params) + tuple(lhs_params)"
                            ],
                            [
                                "-",
                                "return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)"
                            ],
                            [
                                "+",
                                "connection,"
                            ],
                            [
                                "+",
                                "self.lhs.lhs,"
                            ],
                            [
                                "+",
                                "template=template,"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "return sql, params"
                            ],
                            [
                                "+",
                                "compiler,"
                            ],
                            [
                                "-",
                                "return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 18,
                        "covered": 1,
                        "percentage": 5.555555555555555
                    }
                }
            }
        },
        "django__django-13768": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/dispatch/dispatcher.py": [
                            "def send_robust(self, sender, **named):"
                        ]
                    },
                    "lines": {
                        "django/dispatch/dispatcher.py": [
                            [
                                "+",
                                "exc_info=err,"
                            ],
                            [
                                "+",
                                "logger = logging.getLogger('django.dispatch')"
                            ],
                            [
                                "+",
                                "receiver.__qualname__,"
                            ],
                            [
                                "+",
                                "err,"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "'Error calling %s in Signal.send_robust() (%s)',"
                            ],
                            [
                                "+",
                                "logger.error("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 2,
                        "percentage": 22.22222222222222
                    }
                }
            }
        },
        "django__django-13925": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13933": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/forms/models.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-13964": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14016": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/query_utils.py": [
                            "def _combine(self, other, conn):"
                        ]
                    },
                    "lines": {
                        "django/db/models/query_utils.py": [
                            [
                                "-",
                                "return copy.deepcopy(other)"
                            ],
                            [
                                "+",
                                "_, args, kwargs = other.deconstruct()"
                            ],
                            [
                                "-",
                                "return copy.deepcopy(self)"
                            ],
                            [
                                "-",
                                "import copy"
                            ],
                            [
                                "+",
                                "return type(self)(*args, **kwargs)"
                            ],
                            [
                                "+",
                                "_, args, kwargs = self.deconstruct()"
                            ],
                            [
                                "+",
                                "return type(other)(*args, **kwargs)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14017": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/query_utils.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14155": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/urls/resolvers.py": [
                            "def __getitem__(self, index):"
                        ]
                    },
                    "lines": {
                        "django/urls/resolvers.py": [
                            [
                                "+",
                                "func = repr(self.func)"
                            ],
                            [
                                "+",
                                "if isinstance(self.func, functools.partial):"
                            ],
                            [
                                "+",
                                "'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '"
                            ],
                            [
                                "+",
                                "func = self._func_path"
                            ],
                            [
                                "+",
                                "func, self.args, self.kwargs, self.url_name,"
                            ],
                            [
                                "+",
                                "'app_names=%r, namespaces=%r, route=%r)' % ("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 7,
                        "percentage": 53.84615384615385
                    }
                }
            }
        },
        "django__django-14238": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/__init__.py": [
                            "def __instancecheck__(self, instance):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/__init__.py": [
                            [
                                "+",
                                "return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)"
                            ],
                            [
                                "-",
                                "return subclass in self._subclasses or super().__subclasscheck__(subclass)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14382": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/templates.py": [
                            "def handle(self, app_or_project, name, target=None, **options):"
                        ]
                    },
                    "lines": {
                        "django/core/management/templates.py": [
                            [
                                "-",
                                "if app_or_project == 'app':"
                            ],
                            [
                                "+",
                                "self.validate_name(os.path.basename(top_dir), 'directory')"
                            ],
                            [
                                "-",
                                "self.validate_name(os.path.basename(target), 'directory')"
                            ],
                            [
                                "+",
                                "if app_or_project == 'app':"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14411": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/auth/forms.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14534": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/boundfield.py": [
                            "def template_name(self):"
                        ]
                    },
                    "lines": {
                        "django/forms/boundfield.py": [
                            [
                                "+",
                                "return self.data['attrs'].get('id')"
                            ],
                            [
                                "-",
                                "return 'id_%s_%s' % (self.data['name'], self.data['index'])"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14580": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/serializer.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14608": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/formsets.py": [
                            "def full_clean(self):"
                        ]
                    },
                    "lines": {
                        "django/forms/formsets.py": [
                            [
                                "+",
                                "e.error_list,"
                            ],
                            [
                                "+",
                                "error_class='nonform'"
                            ],
                            [
                                "-",
                                "self._non_form_errors = self.error_class(e.error_list)"
                            ],
                            [
                                "+",
                                "self._non_form_errors = self.error_class("
                            ],
                            [
                                "+",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "django__django-14667": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14672": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/reverse_related.py": [
                            "def __init__(self, field, to, related_name=None, related_query_name=None,"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-14730": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/fields/related.py": [
                            "def _check_ignored_options(self, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/db/models/fields/related.py": [
                            [
                                "+",
                                "if self.remote_field.symmetrical and self._related_name:"
                            ],
                            [
                                "+",
                                "id='fields.W345',"
                            ],
                            [
                                "+",
                                "'related_name has no effect on ManyToManyField '"
                            ],
                            [
                                "+",
                                "checks.Warning("
                            ],
                            [
                                "+",
                                "'with a symmetrical relationship, e.g. to \"self\".',"
                            ],
                            [
                                "+",
                                "warnings.append("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 3,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-14752": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/views/autocomplete.py": [
                            "def get(self, request, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/views/autocomplete.py": [
                            [
                                "+",
                                "return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}"
                            ],
                            [
                                "+",
                                "Convert the provided model object to a dictionary that is added to the"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "Return a JsonResponse with search results as defined in"
                            ],
                            [
                                "-",
                                "Return a JsonResponse with search results of the form:"
                            ],
                            [
                                "+",
                                "serialize_result(), by default:"
                            ],
                            [
                                "+",
                                "results list."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 4,
                        "percentage": 36.36363636363637
                    }
                }
            }
        },
        "django__django-14787": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/utils/decorators.py": [
                            "def _wrapper(self, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/utils/decorators.py": [
                            [
                                "-",
                                "bound_method = partial(method.__get__(self, type(self)))"
                            ],
                            [
                                "+",
                                "bound_method = wraps(method)(partial(method.__get__(self, type(self))))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14855": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/admin/helpers.py": [
                            "def get_admin_url(self, remote_field, remote_obj):"
                        ]
                    },
                    "lines": {
                        "django/contrib/admin/helpers.py": [
                            [
                                "+",
                                "current_app=self.model_admin.admin_site.name,"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "args=[quote(remote_obj.pk)],"
                            ],
                            [
                                "+",
                                "url = reverse("
                            ],
                            [
                                "+",
                                "url_name,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "django__django-14915": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/models.py": [
                            "def __init__(self, value, instance):"
                        ]
                    },
                    "lines": {
                        "django/forms/models.py": [
                            [
                                "+",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "django__django-14997": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/backends/ddl_references.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-14999": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/operations/models.py": [
                            "def database_forwards(self, app_label, schema_editor, from_state, to_state):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/operations/models.py": [
                            [
                                "-",
                                "schema_editor.alter_db_table("
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "-",
                                "new_model._meta.db_table,"
                            ],
                            [
                                "+",
                                "new_db_table = new_model._meta.db_table"
                            ],
                            [
                                "+",
                                "# Don't alter when a table name is not changed."
                            ],
                            [
                                "+",
                                "schema_editor.alter_db_table(new_model, old_db_table, new_db_table)"
                            ],
                            [
                                "+",
                                "old_db_table = old_model._meta.db_table"
                            ],
                            [
                                "-",
                                "old_model._meta.db_table,"
                            ],
                            [
                                "+",
                                "if old_db_table == new_db_table:"
                            ],
                            [
                                "-",
                                "new_model,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 1,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "django__django-15061": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/widgets.py": [
                            "def get_context(self, name, value, attrs):"
                        ]
                    },
                    "lines": {
                        "django/forms/widgets.py": [
                            [
                                "-",
                                "id_ += '_0'"
                            ],
                            [
                                "+",
                                "return ''"
                            ],
                            [
                                "-",
                                "return id_"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "django__django-15202": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/validators.py": [
                            "def __call__(self, value):"
                        ]
                    },
                    "lines": {
                        "django/core/validators.py": [
                            [
                                "-",
                                "except ValueError:  # for example, \"Invalid IPv6 URL\""
                            ],
                            [
                                "+",
                                "scheme, netloc, path, query, fragment = splitted_url"
                            ],
                            [
                                "+",
                                "host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', splitted_url.netloc)"
                            ],
                            [
                                "-",
                                "try:"
                            ],
                            [
                                "-",
                                "scheme, netloc, path, query, fragment = urlsplit(value)"
                            ],
                            [
                                "-",
                                "if len(urlsplit(value).hostname) > 253:"
                            ],
                            [
                                "-",
                                "raise ValidationError(self.message, code=self.code, params={'value': value})"
                            ],
                            [
                                "+",
                                "splitted_url = urlsplit(value)"
                            ],
                            [
                                "+",
                                "if splitted_url.hostname is None or len(splitted_url.hostname) > 253:"
                            ],
                            [
                                "+",
                                "raise ValidationError(self.message, code=self.code, params={'value': value})"
                            ],
                            [
                                "-",
                                "host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 2,
                        "percentage": 15.384615384615385
                    }
                }
            }
        },
        "django__django-15213": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/fields/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15252": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/executor.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15320": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/db/models/expressions.py": [
                            [
                                "-",
                                "self.query = getattr(queryset, 'query', queryset)"
                            ],
                            [
                                "+",
                                "self.query = getattr(queryset, 'query', queryset).clone()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "django__django-15347": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/messages/storage/cookie.py": [
                            "def default(self, obj):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15388": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/template/autoreload.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15400": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/utils/functional.py": [
                            "def __deepcopy__(self, memo):"
                        ]
                    },
                    "lines": {
                        "django/utils/functional.py": [
                            [
                                "+",
                                "def __radd__(self, other):"
                            ],
                            [
                                "+",
                                "@new_method_proxy"
                            ],
                            [
                                "+",
                                "__add__ = new_method_proxy(operator.add)"
                            ],
                            [
                                "+",
                                "return other + self"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-15498": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/views/static.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15695": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/operations/models.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15738": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/autodetector.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15781": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/base.py": [
                            "def create_parser(self, prog_name, subcommand, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/core/management/base.py": [
                            [
                                "+",
                                "kwargs.setdefault(\"formatter_class\", DjangoHelpFormatter)"
                            ],
                            [
                                "-",
                                "formatter_class=DjangoHelpFormatter,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15789": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/utils/html.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15790": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/checks/templates.py": [
                            "def check_string_if_invalid_is_string(app_configs, **kwargs):"
                        ]
                    },
                    "lines": {
                        "django/core/checks/templates.py": [
                            [
                                "+",
                                "libraries = defaultdict(set)"
                            ],
                            [
                                "-",
                                "\", \".join(repr(item) for item in items),"
                            ],
                            [
                                "+",
                                "libraries[module_name].add(module_path)"
                            ],
                            [
                                "-",
                                "libraries[module_name].append(module_path)"
                            ],
                            [
                                "+",
                                "\", \".join(repr(item) for item in sorted(items)),"
                            ],
                            [
                                "-",
                                "libraries = defaultdict(list)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15814": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/sql/query.py": [
                            "def deferred_to_data(self, target):"
                        ]
                    },
                    "lines": {
                        "django/db/models/sql/query.py": [
                            [
                                "+",
                                "cur_model = cur_model._meta.concrete_model"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15819": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/management/commands/inspectdb.py": [
                            "def table2model(table_name):"
                        ]
                    },
                    "lines": {
                        "django/core/management/commands/inspectdb.py": [
                            [
                                "-",
                                "yield \"class %s(models.Model):\" % table2model(table_name)"
                            ],
                            [
                                "+",
                                "if rel_to in used_relations:"
                            ],
                            [
                                "+",
                                "model_name = table2model(table_name)"
                            ],
                            [
                                "+",
                                "used_relations = set()  # Holds foreign relations used in the table."
                            ],
                            [
                                "+",
                                "extra_params[\"related_name\"] = \"%s_%s_set\" % ("
                            ],
                            [
                                "+",
                                "model_name.lower(),"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "yield \"class %s(models.Model):\" % model_name"
                            ],
                            [
                                "+",
                                "used_relations.add(rel_to)"
                            ],
                            [
                                "+",
                                "known_models.append(model_name)"
                            ],
                            [
                                "-",
                                "known_models.append(table2model(table_name))"
                            ],
                            [
                                "+",
                                "att_name,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-15851": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/backends/postgresql/client.py": [
                            "def settings_to_cmd_args_env(cls, settings_dict, parameters):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "django__django-15902": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/formsets.py": [
                            "class ManagementForm(Form):"
                        ]
                    },
                    "lines": {
                        "django/forms/formsets.py": [
                            [
                                "+",
                                "template_name = \"django/forms/div.html\"  # RemovedInDjango50Warning."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-15996": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/db/migrations/serializer.py": [
                            [
                                "-",
                                "from django.utils.version import get_docs_version"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "if PY311:"
                            ],
                            [
                                "+",
                                "members = reversed(members)"
                            ],
                            [
                                "+",
                                "["
                            ],
                            [
                                "+",
                                "f\"{module}.{enum_class.__qualname__}[{item.name!r}]\""
                            ],
                            [
                                "+",
                                "members = list(self.value)"
                            ],
                            [
                                "+",
                                "members = (self.value,)"
                            ],
                            [
                                "+",
                                "from django.utils.version import PY311, get_docs_version"
                            ],
                            [
                                "+",
                                "\" | \".join("
                            ],
                            [
                                "+",
                                "),"
                            ],
                            [
                                "+",
                                "for item in members"
                            ],
                            [
                                "+",
                                "if issubclass(enum_class, enum.Flag):"
                            ],
                            [
                                "+",
                                "]"
                            ],
                            [
                                "+",
                                "members, _ = enum._decompose(enum_class, self.value)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 16,
                        "covered": 1,
                        "percentage": 6.25
                    }
                }
            }
        },
        "django__django-16041": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/forms/formsets.py": [
                            "def extra_forms(self):"
                        ]
                    },
                    "lines": {
                        "django/forms/formsets.py": [
                            [
                                "-",
                                "prefix=self.add_prefix(\"__prefix__\"),"
                            ],
                            [
                                "+",
                                "\"prefix\": self.add_prefix(\"__prefix__\"),"
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "-",
                                "renderer=self.renderer,"
                            ],
                            [
                                "+",
                                "\"empty_permitted\": True,"
                            ],
                            [
                                "+",
                                "form = self.form(**form_kwargs)"
                            ],
                            [
                                "-",
                                "empty_permitted=True,"
                            ],
                            [
                                "-",
                                "auto_id=self.auto_id,"
                            ],
                            [
                                "+",
                                "form_kwargs = {"
                            ],
                            [
                                "+",
                                "\"use_required_attribute\": False,"
                            ],
                            [
                                "-",
                                "form = self.form("
                            ],
                            [
                                "+",
                                "\"auto_id\": self.auto_id,"
                            ],
                            [
                                "+",
                                "\"renderer\": self.renderer,"
                            ],
                            [
                                "+",
                                "}"
                            ],
                            [
                                "-",
                                "use_required_attribute=False,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16046": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/utils/numberformat.py": [
                            [
                                "+",
                                "if number is None or number == \"\":"
                            ],
                            [
                                "+",
                                "return mark_safe(number)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16139": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/auth/forms.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16229": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/forms/boundfield.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16255": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/contrib/sitemaps/__init__.py": [
                            "def get_latest_lastmod(self):"
                        ]
                    },
                    "lines": {
                        "django/contrib/sitemaps/__init__.py": [
                            [
                                "-",
                                "return max([self.lastmod(item) for item in self.items()])"
                            ],
                            [
                                "+",
                                "return max([self.lastmod(item) for item in self.items()], default=None)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16379": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/core/cache/backends/filebased.py": [
                            "def _delete(self, fname):"
                        ]
                    },
                    "lines": {
                        "django/core/cache/backends/filebased.py": [
                            [
                                "-",
                                "if os.path.exists(fname):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 4,
                        "percentage": 80.0
                    }
                }
            }
        },
        "django__django-16400": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/auth/management/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16408": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/compiler.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16527": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/contrib/admin/templatetags/admin_modify.py": [
                            [
                                "+",
                                "and has_add_permission"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "django__django-16595": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/operations/fields.py": [
                            "def migration_name_fragment(self):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/operations/fields.py": [
                            [
                                "+",
                                "operation, (AlterField, RemoveField)"
                            ],
                            [
                                "+",
                                ") and self.is_same_field_operation(operation):"
                            ],
                            [
                                "+",
                                "if isinstance("
                            ],
                            [
                                "-",
                                "):"
                            ],
                            [
                                "-",
                                "operation"
                            ],
                            [
                                "-",
                                "if isinstance(operation, RemoveField) and self.is_same_field_operation("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16816": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/contrib/admin/checks.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-16820": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/migrations/operations/models.py": [
                            "def reduce(self, operation, app_label):"
                        ]
                    },
                    "lines": {
                        "django/db/migrations/operations/models.py": [
                            [
                                "+",
                                "if fields != operation.old_fields"
                            ],
                            [
                                "+",
                                "self.name,"
                            ],
                            [
                                "+",
                                "elif ("
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "index"
                            ],
                            [
                                "+",
                                "fields"
                            ],
                            [
                                "+",
                                "*self.options.get(\"indexes\", []),"
                            ],
                            [
                                "+",
                                "operation.index,"
                            ],
                            [
                                "+",
                                "isinstance(operation, IndexOperation)"
                            ],
                            [
                                "+",
                                "fields=self.fields,"
                            ],
                            [
                                "+",
                                "fields=operation.old_fields, name=operation.new_name"
                            ],
                            [
                                "+",
                                "],"
                            ],
                            [
                                "+",
                                "elif isinstance(operation, RemoveIndex):"
                            ],
                            [
                                "+",
                                "elif isinstance(operation, RenameIndex) and operation.old_fields:"
                            ],
                            [
                                "+",
                                "managers=self.managers,"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "for fields in self.options.get(\"index_together\", [])"
                            ],
                            [
                                "+",
                                "if isinstance(operation, AddIndex):"
                            ],
                            [
                                "+",
                                "options_indexes = ["
                            ],
                            [
                                "+",
                                "models.Index("
                            ],
                            [
                                "+",
                                "return ["
                            ],
                            [
                                "+",
                                "},"
                            ],
                            [
                                "+",
                                "if options_index_together:"
                            ],
                            [
                                "+",
                                "and self.name_lower == operation.model_name_lower"
                            ],
                            [
                                "+",
                                "\"indexes\": options_indexes,"
                            ],
                            [
                                "+",
                                "self.options.pop(\"index_together\", None)"
                            ],
                            [
                                "+",
                                "if index.name != operation.name"
                            ],
                            [
                                "+",
                                "self.options[\"index_together\"] = options_index_together"
                            ],
                            [
                                "+",
                                "}"
                            ],
                            [
                                "+",
                                "CreateModel("
                            ],
                            [
                                "+",
                                "\"indexes\": ["
                            ],
                            [
                                "+",
                                "bases=self.bases,"
                            ],
                            [
                                "+",
                                "for index in self.options.get(\"indexes\", [])"
                            ],
                            [
                                "+",
                                "),"
                            ],
                            [
                                "+",
                                "**self.options,"
                            ],
                            [
                                "+",
                                "options={"
                            ],
                            [
                                "+",
                                "options_index_together = {"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 38,
                        "covered": 1,
                        "percentage": 2.631578947368421
                    }
                }
            }
        },
        "django__django-16873": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "django/template/defaultfilters.py": [
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "data = conditional_escape(arg).join([conditional_escape(v) for v in value])"
                            ],
                            [
                                "+",
                                "data = arg.join(value)"
                            ],
                            [
                                "-",
                                "value = [conditional_escape(v) for v in value]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "django__django-16910": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/models/sql/query.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "django__django-17051": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "django/db/models/query.py": [
                            "def _batched_insert("
                        ]
                    },
                    "lines": {
                        "django/db/models/query.py": [
                            [
                                "+",
                                "on_conflict is None or on_conflict == OnConflict.UPDATE"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "+",
                                "if bulk_return and ("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 4,
                        "percentage": 57.14285714285714
                    }
                }
            }
        },
        "django__django-17087": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "django/db/migrations/serializer.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-18869": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "lib/matplotlib/__init__.py": [
                            [
                                "+",
                                "# a warning from setuptools_scm."
                            ],
                            [
                                "+",
                                "if (root / \".git\").exists() and not (root / \".git/shallow\").exists():"
                            ],
                            [
                                "+",
                                "root=root,"
                            ],
                            [
                                "+",
                                "# fallback for v.post: guess-next-dev scheme from setuptools_scm"
                            ],
                            [
                                "+",
                                "'a': 'alpha',"
                            ],
                            [
                                "-",
                                "__version__ = setuptools_scm.get_version("
                            ],
                            [
                                "+",
                                "return setuptools_scm.get_version("
                            ],
                            [
                                "+",
                                "return __version__ if name == \"__version__\" else __version_info__"
                            ],
                            [
                                "-",
                                "version_scheme=\"post-release\","
                            ],
                            [
                                "+",
                                "'major, minor, micro, releaselevel, serial')"
                            ],
                            [
                                "+",
                                "local_scheme=\"node-and-date\","
                            ],
                            [
                                "+",
                                "def _parse_to_version_info(version_str):"
                            ],
                            [
                                "-",
                                "fallback_version=_version.version,"
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "+",
                                "return _version.version"
                            ],
                            [
                                "-",
                                "return __version__"
                            ],
                            [
                                "+",
                                "return _VersionInfo(v.major, v.minor, v.micro, 'final', 0)"
                            ],
                            [
                                "+",
                                "'rc': 'candidate'}.get(v.pre[0], 'alpha')"
                            ],
                            [
                                "+",
                                "else:  # Get the version from the _version.py setuptools_scm file."
                            ],
                            [
                                "+",
                                "def _get_version():"
                            ],
                            [
                                "+",
                                "return _VersionInfo(v.major, v.minor, v.micro + 1, 'alpha', v.post)"
                            ],
                            [
                                "-",
                                "# shallow clone, such as those used by CI, as the latter would trigger"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "__version__ = _get_version()"
                            ],
                            [
                                "-",
                                "# Only shell out to a git subprocess if really needed, and not on a"
                            ],
                            [
                                "+",
                                "elif v.pre is not None:"
                            ],
                            [
                                "+",
                                "if v.pre is None and v.post is None and v.dev is None:"
                            ],
                            [
                                "+",
                                "See:"
                            ],
                            [
                                "-",
                                "root = Path(__file__).resolve().parents[2]"
                            ],
                            [
                                "+",
                                "version_scheme=\"post-release\","
                            ],
                            [
                                "-",
                                "def __getattr__(name):"
                            ],
                            [
                                "+",
                                "return _VersionInfo(v.major, v.minor, v.micro, 'alpha', v.dev)"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "if name in (\"__version__\", \"__version_info__\"):"
                            ],
                            [
                                "+",
                                "'b': 'beta',"
                            ],
                            [
                                "-",
                                "__version__ = _version.version"
                            ],
                            [
                                "-",
                                "if name == \"__version__\":"
                            ],
                            [
                                "-",
                                "# a warning from setuptools_scm."
                            ],
                            [
                                "+",
                                "Parse a version string to a namedtuple analogous to sys.version_info."
                            ],
                            [
                                "-",
                                "root=root,"
                            ],
                            [
                                "+",
                                "\"\"\"Return the version string used for __version__.\"\"\""
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "fallback_version=_version.version,"
                            ],
                            [
                                "-",
                                "if (root / \".git\").exists() and not (root / \".git/shallow\").exists():"
                            ],
                            [
                                "+",
                                "elif v.dev is not None:"
                            ],
                            [
                                "-",
                                "local_scheme=\"node-and-date\","
                            ],
                            [
                                "+",
                                "__version_info__ = _parse_to_version_info(__version__)"
                            ],
                            [
                                "+",
                                "releaselevel = {"
                            ],
                            [
                                "+",
                                "v = parse_version(version_str)"
                            ],
                            [
                                "+",
                                "_VersionInfo = namedtuple('_VersionInfo',"
                            ],
                            [
                                "+",
                                "# shallow clone, such as those used by CI, as the latter would trigger"
                            ],
                            [
                                "+",
                                "return _VersionInfo(v.major, v.minor, v.micro, releaselevel, v.pre[1])"
                            ],
                            [
                                "+",
                                "global __version__info__  # cache it."
                            ],
                            [
                                "+",
                                "# Only shell out to a git subprocess if really needed, and not on a"
                            ],
                            [
                                "+",
                                "https://docs.python.org/3/library/sys.html#sys.version_info"
                            ],
                            [
                                "+",
                                "root = Path(__file__).resolve().parents[2]"
                            ],
                            [
                                "-",
                                "else:  # Get the version from the _version.py setuptools_scm file."
                            ],
                            [
                                "+",
                                "# modelled after sys.version_info"
                            ],
                            [
                                "+",
                                "def __getattr__(name):"
                            ],
                            [
                                "+",
                                "https://packaging.pypa.io/en/latest/version.html#packaging.version.parse"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 100
                    },
                    "lines": {
                        "total": 61,
                        "covered": 1,
                        "percentage": 1.639344262295082
                    }
                }
            }
        },
        "matplotlib__matplotlib-22711": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/widgets.py": [
                            "def _update(self, event):",
                            "def set_val(self, val):",
                            "def _update_val_from_pos(self, pos):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/widgets.py": [
                            [
                                "-",
                                "]"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "-",
                                "np.argmin("
                            ],
                            [
                                "+",
                                "handle_index = np.argmin("
                            ],
                            [
                                "+",
                                "self._active_handle.set_xdata([val])"
                            ],
                            [
                                "+",
                                "self._handles[0].set_ydata([val[0]])"
                            ],
                            [
                                "+",
                                "self._handles[1].set_xdata([val[1]])"
                            ],
                            [
                                "+",
                                "handle = self._handles[handle_index]"
                            ],
                            [
                                "+",
                                "if self.orientation == \"vertical\":"
                            ],
                            [
                                "-",
                                "handle = self._handles["
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "-",
                                "self._active_handle.set_xdata([val])"
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "+",
                                "self._handles[1].set_ydata([val[1]])"
                            ],
                            [
                                "+",
                                "self._handles[0].set_xdata([val[0]])"
                            ],
                            [
                                "+",
                                "np.abs([h.get_ydata()[0] - event.ydata for h in self._handles])"
                            ],
                            [
                                "+",
                                "self._active_handle.set_ydata([val])"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-22835": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/artist.py": [
                            "def format_cursor_data(self, data):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/artist.py": [
                            [
                                "+",
                                "# Midpoints of neighboring color intervals."
                            ],
                            [
                                "+",
                                ").max()"
                            ],
                            [
                                "+",
                                "self.norm.boundaries[neigh_idx:cur_idx + 2]"
                            ],
                            [
                                "+",
                                "delta = np.diff("
                            ],
                            [
                                "+",
                                "# use max diff to prevent delta == 0"
                            ],
                            [
                                "+",
                                "neigh_idx = max(0, cur_idx - 1)"
                            ],
                            [
                                "+",
                                "if isinstance(self.norm, BoundaryNorm):"
                            ],
                            [
                                "+",
                                "# not an invertible normalization mapping"
                            ],
                            [
                                "+",
                                "from .colors import BoundaryNorm"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "cur_idx = np.argmin(np.abs(self.norm.boundaries - data))"
                            ],
                            [
                                "-",
                                "# Midpoints of neighboring color intervals."
                            ],
                            [
                                "+",
                                "(int(normed * n) + np.array([0, 1])) / n)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 19,
                        "covered": 6,
                        "percentage": 31.57894736842105
                    }
                }
            }
        },
        "matplotlib__matplotlib-23299": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23314": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/mpl_toolkits/mplot3d/axes3d.py": [
                            "def apply_aspect(self, position=None):"
                        ]
                    },
                    "lines": {
                        "lib/mpl_toolkits/mplot3d/axes3d.py": [
                            [
                                "+",
                                "return"
                            ],
                            [
                                "+",
                                "if not self.get_visible():"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23476": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/figure.py": [
                            "def __getstate__(self):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/figure.py": [
                            [
                                "+",
                                "state[\"_dpi\"] = state.get('_original_dpi', state['_dpi'])"
                            ],
                            [
                                "+",
                                "# discard any changes to the dpi due to pixel ratio changes"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "matplotlib__matplotlib-23562": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/mpl_toolkits/mplot3d/art3d.py": [
                            "def set_alpha(self, alpha):"
                        ]
                    },
                    "lines": {
                        "lib/mpl_toolkits/mplot3d/art3d.py": [
                            [
                                "+",
                                "# self._edgecolors2d is not initialized until do_3d_projection"
                            ],
                            [
                                "+",
                                "if not hasattr(self, '_edgecolors2d'):"
                            ],
                            [
                                "+",
                                "if not hasattr(self, '_facecolors2d'):"
                            ],
                            [
                                "+",
                                "# docstring inherited"
                            ],
                            [
                                "+",
                                "self.axes.M = self.axes.get_proj()"
                            ],
                            [
                                "+",
                                "self.do_3d_projection()"
                            ],
                            [
                                "+",
                                "# self._facecolors2d is not initialized until do_3d_projection"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23563": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/mpl_toolkits/mplot3d/art3d.py": [
                            "def __init__(self, xs, ys, zs, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "lib/mpl_toolkits/mplot3d/art3d.py": [
                            [
                                "+",
                                "zs = cbook._to_unmasked_float_array(zs).ravel()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23913": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/legend.py": [
                            "def val_or_rc(val, rc_name):",
                            "def __init__(",
                            "def _update_bbox_to_anchor(self, loc_in_canvas):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/legend.py": [
                            [
                                "-",
                                "ncol=1  # synonym for ncols (backward compatibility)"
                            ],
                            [
                                "+",
                                "ncol=1,  # synonym for ncols (backward compatibility)"
                            ],
                            [
                                "+",
                                "draggable : bool, default: False"
                            ],
                            [
                                "+",
                                "Whether the legend can be dragged with the mouse."
                            ],
                            [
                                "+",
                                "self.set_draggable(state=draggable)"
                            ],
                            [
                                "+",
                                "draggable=False  # whether the legend can be dragged with the mouse"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "matplotlib__matplotlib-23964": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/backends/backend_ps.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-23987": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/figure.py": [
                            "def __init__(self,"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/figure.py": [
                            [
                                "+",
                                ""
                            ],
                            [
                                "+",
                                "self.set_layout_engine(layout='constrained')"
                            ],
                            [
                                "-",
                                "self.set_layout_engine(layout='constrained')"
                            ],
                            [
                                "+",
                                "elif constrained_layout:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24149": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/axes/_axes.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24265": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/style/core.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 66,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24334": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/axis.py": [
                            "def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/axis.py": [
                            [
                                "+",
                                "'kwargs are passed')"
                            ],
                            [
                                "+",
                                "raise ValueError('labels argument cannot be None when '"
                            ],
                            [
                                "+",
                                "if labels is None and kwargs:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-24970": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/colors.py": [
                            "def __call__(self, X, alpha=None, bytes=False):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/colors.py": [
                            [
                                "+",
                                "# xa == 1 (== N after multiplication) is not out of range."
                            ],
                            [
                                "+",
                                "xa = xa.astype(int)"
                            ],
                            [
                                "+",
                                "# Avoid converting large positive values to negative integers."
                            ],
                            [
                                "-",
                                "# truncate them towards zero."
                            ],
                            [
                                "+",
                                "xa *= self.N"
                            ],
                            [
                                "+",
                                "xa[xa < 0] = -1"
                            ],
                            [
                                "-",
                                "np.clip(xa, -1, self.N, out=xa)"
                            ],
                            [
                                "-",
                                "# Negative values are out of range, but astype(int) would"
                            ],
                            [
                                "+",
                                "xa[xa == self.N] = self.N - 1"
                            ],
                            [
                                "-",
                                "with np.errstate(invalid=\"ignore\"):"
                            ],
                            [
                                "-",
                                "# xa == 1 (== N after multiplication) is not out of range."
                            ],
                            [
                                "+",
                                "# truncate them towards zero."
                            ],
                            [
                                "-",
                                "xa = xa.astype(int)"
                            ],
                            [
                                "+",
                                "np.clip(xa, -1, self.N, out=xa)"
                            ],
                            [
                                "-",
                                "# Avoid converting large positive values to negative integers."
                            ],
                            [
                                "+",
                                "# Negative values are out of range, but astype(int) would"
                            ],
                            [
                                "-",
                                "xa *= self.N"
                            ],
                            [
                                "-",
                                "xa[xa < 0] = -1"
                            ],
                            [
                                "-",
                                "xa[xa == self.N] = self.N - 1"
                            ],
                            [
                                "+",
                                "with np.errstate(invalid=\"ignore\"):"
                            ],
                            [
                                "+",
                                "# We need this cast for unsigned ints as well as floats"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 21,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25079": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/colors.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25311": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/offsetbox.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25332": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/cbook.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25433": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/figure.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-25442": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "lib/matplotlib/offsetbox.py": [
                            "def on_pick(self, evt):",
                            "def __init__(self, ref_artist, use_blit=False):",
                            "def _check_still_parented(self):"
                        ]
                    },
                    "lines": {
                        "lib/matplotlib/offsetbox.py": [
                            [
                                "+",
                                "(\"motion_notify_event\", self.on_motion),"
                            ],
                            [
                                "-",
                                "try:"
                            ],
                            [
                                "+",
                                "callbacks.disconnect, callbacks._connect_picklable(name, func))"
                            ],
                            [
                                "+",
                                "for disconnector in self._disconnectors:"
                            ],
                            [
                                "+",
                                "self._disconnectors = ["
                            ],
                            [
                                "-",
                                "'button_release_event', self.on_release),"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "-",
                                "self.canvas.callbacks._connect_picklable("
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "'pick_event', self.on_pick),"
                            ],
                            [
                                "-",
                                "self.canvas.mpl_disconnect(cid)"
                            ],
                            [
                                "+",
                                "cids = property(lambda self: ["
                            ],
                            [
                                "-",
                                "\"motion_notify_event\", self.on_motion)"
                            ],
                            [
                                "+",
                                "disconnect.args[0] for disconnect in self._disconnectors[:2]])"
                            ],
                            [
                                "+",
                                "(\"button_release_event\", self.on_release),"
                            ],
                            [
                                "-",
                                "for cid in self.cids:"
                            ],
                            [
                                "-",
                                "except AttributeError:"
                            ],
                            [
                                "-",
                                "pass"
                            ],
                            [
                                "+",
                                "disconnector()"
                            ],
                            [
                                "+",
                                "callbacks = ref_artist.figure._canvas_callbacks"
                            ],
                            [
                                "-",
                                "c1 = self._c1"
                            ],
                            [
                                "-",
                                "self.canvas.mpl_disconnect(c1)"
                            ],
                            [
                                "+",
                                "(\"pick_event\", self.on_pick),"
                            ],
                            [
                                "+",
                                "functools.partial("
                            ],
                            [
                                "+",
                                "for name, func in ["
                            ],
                            [
                                "-",
                                "self.cids = ["
                            ],
                            [
                                "+",
                                "]"
                            ],
                            [
                                "-",
                                "self._c1 = self.canvas.callbacks._connect_picklable("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 30,
                        "covered": 2,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "matplotlib__matplotlib-25498": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/colorbar.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26011": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "lib/matplotlib/axis.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "matplotlib__matplotlib-26020": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "lib/mpl_toolkits/axes_grid1/axes_grid.py": [
                            [
                                "+",
                                "from types import MethodType"
                            ],
                            [
                                "+",
                                "left = SimpleAxisArtist(ax.yaxis, 1, ax.spines[\"left\"])"
                            ],
                            [
                                "+",
                                "bottom.toggle(ticklabels=bottom_off, label=bottom_off)"
                            ],
                            [
                                "+",
                                "left.toggle(ticklabels=left_off, label=left_off)"
                            ],
                            [
                                "+",
                                "from .mpl_axes import Axes, SimpleAxisArtist"
                            ],
                            [
                                "+",
                                "bottom = ax.axis[\"bottom\"]"
                            ],
                            [
                                "+",
                                "if isinstance(ax.axis, MethodType):"
                            ],
                            [
                                "-",
                                "from .mpl_axes import Axes"
                            ],
                            [
                                "+",
                                "bottom = SimpleAxisArtist(ax.xaxis, 1, ax.spines[\"bottom\"])"
                            ],
                            [
                                "+",
                                "left = ax.axis[\"left\"]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 100
                    },
                    "lines": {
                        "total": 13,
                        "covered": 3,
                        "percentage": 23.076923076923077
                    }
                }
            }
        },
        "mwaskom__seaborn-2848": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "seaborn/_oldcore.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "mwaskom__seaborn-3010": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "seaborn/_stats/regression.py": [
                            "def _fit_predict(self, data):"
                        ]
                    },
                    "lines": {
                        "seaborn/_stats/regression.py": [
                            [
                                "+",
                                "return ("
                            ],
                            [
                                "+",
                                ".apply(data.dropna(subset=[\"x\", \"y\"]), self._fit_predict)"
                            ],
                            [
                                "+",
                                "groupby"
                            ],
                            [
                                "-",
                                "return groupby.apply(data, self._fit_predict)"
                            ],
                            [
                                "+",
                                ")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "mwaskom__seaborn-3190": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "seaborn/_core/scales.py": [
                            "def _setup("
                        ]
                    },
                    "lines": {
                        "seaborn/_core/scales.py": [
                            [
                                "-",
                                "vmin, vmax = axis.convert_units((vmin, vmax))"
                            ],
                            [
                                "+",
                                "vmin, vmax = map(float, axis.convert_units((vmin, vmax)))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "mwaskom__seaborn-3407": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "seaborn/axisgrid.py": [
                            "def map_diag(self, func, **kwargs):"
                        ]
                    },
                    "lines": {
                        "seaborn/axisgrid.py": [
                            [
                                "-",
                                "self.diag_axes = np.array(diag_axes, np.object_)"
                            ],
                            [
                                "-",
                                "self.diag_vars = np.array(diag_vars, np.object_)"
                            ],
                            [
                                "+",
                                "self.diag_axes = diag_axes"
                            ],
                            [
                                "+",
                                "self.diag_vars = diag_vars"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pallets__flask-4045": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/flask/blueprints.py": [
                            "def add_url_rule(",
                            "def __init__("
                        ]
                    },
                    "lines": {
                        "src/flask/blueprints.py": [
                            [
                                "-",
                                "if view_func and hasattr(view_func, \"__name__\"):"
                            ],
                            [
                                "+",
                                "raise ValueError(\"'endpoint' may not contain a dot '.' character.\")"
                            ],
                            [
                                "+",
                                "if \".\" in name:"
                            ],
                            [
                                "-",
                                "assert \".\" not in endpoint, \"Blueprint endpoints should not contain dots\""
                            ],
                            [
                                "+",
                                "raise ValueError(\"'view_func' name may not contain a dot '.' character.\")"
                            ],
                            [
                                "+",
                                "if endpoint and \".\" in endpoint:"
                            ],
                            [
                                "-",
                                "\".\" not in view_func.__name__"
                            ],
                            [
                                "+",
                                "if view_func and hasattr(view_func, \"__name__\") and \".\" in view_func.__name__:"
                            ],
                            [
                                "-",
                                "if endpoint:"
                            ],
                            [
                                "-",
                                "), \"Blueprint view function name should not contain dots\""
                            ],
                            [
                                "+",
                                "raise ValueError(\"'name' may not contain a dot '.' character.\")"
                            ],
                            [
                                "-",
                                "assert ("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 1,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "pallets__flask-4992": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/flask/config.py": [
                            "def from_file("
                        ]
                    },
                    "lines": {
                        "src/flask/config.py": [
                            [
                                "+",
                                "The ``text`` parameter was added."
                            ],
                            [
                                "+",
                                ":param text: Open the file in text or binary mode."
                            ],
                            [
                                "+",
                                "text: bool = True,"
                            ],
                            [
                                "+",
                                ".. versionchanged:: 2.3"
                            ],
                            [
                                "+",
                                "with open(filename, \"r\" if text else \"rb\") as f:"
                            ],
                            [
                                "+",
                                "import tomllib"
                            ],
                            [
                                "+",
                                "app.config.from_file(\"config.toml\", load=tomllib.load, text=False)"
                            ],
                            [
                                "-",
                                "app.config.from_file(\"config.toml\", load=toml.load)"
                            ],
                            [
                                "-",
                                "import toml"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 2,
                        "percentage": 18.181818181818183
                    }
                }
            }
        },
        "pallets__flask-5063": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/flask/cli.py": [
                            "def shell_command() -> None:"
                        ]
                    },
                    "lines": {
                        "src/flask/cli.py": [
                            [
                                "-",
                                "rule_methods = ["
                            ],
                            [
                                "-",
                                "max(len(rule.rule) for rule in rules),"
                            ],
                            [
                                "+",
                                "host_matching = current_app.url_map.host_matching"
                            ],
                            [
                                "-",
                                "row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)"
                            ],
                            [
                                "+",
                                "row.append(rule.rule)"
                            ],
                            [
                                "+",
                                "ignored_methods = set() if all_methods else {\"HEAD\", \"OPTIONS\"}"
                            ],
                            [
                                "+",
                                "rows.insert(1, [\"-\" * w for w in widths])"
                            ],
                            [
                                "-",
                                "click.echo(row.format(*headers).strip())"
                            ],
                            [
                                "-",
                                "\", \".join(sorted(rule.methods - ignored_methods))  # type: ignore"
                            ],
                            [
                                "+",
                                "for rule in rules:"
                            ],
                            [
                                "-",
                                "max(len(rule.endpoint) for rule in rules),"
                            ],
                            [
                                "-",
                                "max(len(methods) for methods in rule_methods),"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                "from operator import attrgetter"
                            ],
                            [
                                "-",
                                ")"
                            ],
                            [
                                "+",
                                "rule.endpoint,"
                            ],
                            [
                                "+",
                                "type=click.Choice((\"endpoint\", \"methods\", \"domain\", \"rule\", \"match\")),"
                            ],
                            [
                                "-",
                                "ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))"
                            ],
                            [
                                "+",
                                "if has_domain:"
                            ],
                            [
                                "+",
                                "\" when dispatching a request.\""
                            ],
                            [
                                "+",
                                "\", \".join(sorted((rule.methods or set()) - ignored_methods)),"
                            ],
                            [
                                "-",
                                "widths = [max(len(h), w) for h, w in zip(headers, widths)]"
                            ],
                            [
                                "+",
                                "headers.append(\"Rule\")"
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "+",
                                "rows.append(row)"
                            ],
                            [
                                "+",
                                "click.echo(template.format(*row))"
                            ],
                            [
                                "-",
                                "elif sort == \"methods\":"
                            ],
                            [
                                "-",
                                "if sort in (\"endpoint\", \"rule\"):"
                            ],
                            [
                                "+",
                                "from operator import itemgetter"
                            ],
                            [
                                "-",
                                "]"
                            ],
                            [
                                "+",
                                "rows.insert(0, headers)"
                            ],
                            [
                                "+",
                                "template = \"  \".join(f\"{{{i}:<{w}}}\" for i, w in enumerate(widths))"
                            ],
                            [
                                "+",
                                "row.append((rule.host if host_matching else rule.subdomain) or \"\")"
                            ],
                            [
                                "+",
                                "for row in rows:"
                            ],
                            [
                                "-",
                                "type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),"
                            ],
                            [
                                "+",
                                "sorts.append(\"domain\")"
                            ],
                            [
                                "+",
                                "\"Method to sort routes by. 'match' is the order that Flask will match routes\""
                            ],
                            [
                                "+",
                                "except ValueError:"
                            ],
                            [
                                "+",
                                "rows = []"
                            ],
                            [
                                "+",
                                "widths = [max(len(row[i]) for row in rows) for i in range(len(headers))]"
                            ],
                            [
                                "+",
                                "headers = [\"Endpoint\", \"Methods\"]"
                            ],
                            [
                                "+",
                                "sorts.append(\"rule\")"
                            ],
                            [
                                "+",
                                "has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)"
                            ],
                            [
                                "+",
                                "headers.append(\"Host\" if host_matching else \"Subdomain\")"
                            ],
                            [
                                "+",
                                "sorts = [\"endpoint\", \"methods\"]"
                            ],
                            [
                                "-",
                                "widths = ("
                            ],
                            [
                                "-",
                                "for rule in rules"
                            ],
                            [
                                "-",
                                "rules = sorted(rules, key=attrgetter(sort))"
                            ],
                            [
                                "+",
                                "rows.sort(key=itemgetter(sorts.index(sort)))"
                            ],
                            [
                                "+",
                                "row = ["
                            ],
                            [
                                "-",
                                "\"routes when dispatching a request.\""
                            ],
                            [
                                "-",
                                "click.echo(row.format(*(\"-\" * width for width in widths)))"
                            ],
                            [
                                "+",
                                "]"
                            ],
                            [
                                "+",
                                "pass"
                            ],
                            [
                                "-",
                                "rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore"
                            ],
                            [
                                "-",
                                "'Method to sort routes by. \"match\" is the order that Flask will match '"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 60,
                        "covered": 4,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "psf__requests-1963": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "requests/sessions.py": [
                            "def resolve_redirects(self, resp, req, stream=False, timeout=None,"
                        ]
                    },
                    "lines": {
                        "requests/sessions.py": [
                            [
                                "+",
                                "req = prepared_request"
                            ],
                            [
                                "+",
                                "req,"
                            ],
                            [
                                "-",
                                "prepared_request,"
                            ],
                            [
                                "+",
                                "# Override the original request."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "psf__requests-2148": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "requests/models.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "psf__requests-2317": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "requests/sessions.py": [
                            "def request(self, method, url,"
                        ]
                    },
                    "lines": {
                        "requests/sessions.py": [
                            [
                                "-",
                                "from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str"
                            ],
                            [
                                "+",
                                "method = to_native_string(method)"
                            ],
                            [
                                "+",
                                "from .compat import cookielib, OrderedDict, urljoin, urlparse"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "psf__requests-2674": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "requests/adapters.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "psf__requests-3362": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "requests/utils.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "psf__requests-863": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "requests/models.py": [
                            "def path_url(self):"
                        ]
                    },
                    "lines": {
                        "requests/models.py": [
                            [
                                "+",
                                "self.hooks[event].extend(hook)"
                            ],
                            [
                                "+",
                                "self.hooks[event].append(hook)"
                            ],
                            [
                                "+",
                                "if isinstance(hook, (list, tuple, set)):"
                            ],
                            [
                                "-",
                                "self.hooks[event].append(hook)"
                            ],
                            [
                                "-",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "pydata__xarray-3364": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "xarray/core/concat.py": [
                            [
                                "-",
                                ")"
                            ],
                            [
                                "-",
                                "to_merge[var].append(ds.variables[var])"
                            ],
                            [
                                "+",
                                "if var in ds:"
                            ],
                            [
                                "-",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 6,
                        "percentage": 60.0
                    }
                }
            }
        },
        "pydata__xarray-4094": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/dataarray.py": [
                            "def to_unstacked_dataset(self, dim, level=0):"
                        ]
                    },
                    "lines": {
                        "xarray/core/dataarray.py": [
                            [
                                "+",
                                "data_dict[k] = self.sel({variable_dim: k}, drop=True).squeeze(drop=True)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "pydata__xarray-4248": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/formatting.py": [
                            "def inline_variable_array_repr(var, max_width):"
                        ]
                    },
                    "lines": {
                        "xarray/core/formatting.py": [
                            [
                                "+",
                                "elif hasattr(var._data, \"_repr_inline_\"):"
                            ],
                            [
                                "+",
                                "return var._data._repr_inline_(max_width)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-4493": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "xarray/core/variable.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pydata__xarray-5131": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "xarray/core/groupby.py": [
                            "def __iter__(self):"
                        ]
                    },
                    "lines": {
                        "xarray/core/groupby.py": [
                            [
                                "-",
                                "return \"{}, grouped over {!r} \\n{!r} groups with labels {}.\".format("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "pylint-dev__pylint-5859": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "pylint/checkers/misc.py": [
                            "def open(self):"
                        ]
                    },
                    "lines": {
                        "pylint/checkers/misc.py": [
                            [
                                "+",
                                "regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})(?=(:|\\s|\\Z))\""
                            ],
                            [
                                "+",
                                "regex_string = rf\"#\\s*({notes})(?=(:|\\s|\\Z))\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "pylint-dev__pylint-6506": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "pylint/config/config_initialization.py": [
                            [
                                "+",
                                "linter._arg_parser.error(f\"Unrecognized option found: {msg}\")"
                            ],
                            [
                                "-",
                                "linter.add_message(\"unrecognized-option\", line=0, args=msg)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "pylint-dev__pylint-7080": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "pylint/lint/expand_modules.py": [
                            "def _is_ignored_file("
                        ]
                    },
                    "lines": {
                        "pylint/lint/expand_modules.py": [
                            [
                                "+",
                                "element = os.path.normpath(element)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-7114": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "pylint/lint/expand_modules.py": [
                            "def expand_modules("
                        ]
                    },
                    "lines": {
                        "pylint/lint/expand_modules.py": [
                            [
                                "+",
                                "os.path.join(something, \"__init__.py\")"
                            ],
                            [
                                "-",
                                "# The SyntaxError is a Python bug and should be"
                            ],
                            [
                                "+",
                                "if os.path.isfile(something) or os.path.exists("
                            ],
                            [
                                "+",
                                "# this is a file or a directory with an explicit __init__.py"
                            ],
                            [
                                "+",
                                "):"
                            ],
                            [
                                "-",
                                "if os.path.exists(something):"
                            ],
                            [
                                "-",
                                "# this is a file or a directory"
                            ],
                            [
                                "-",
                                "# removed once we move away from imp.find_module: https://bugs.python.org/issue10588"
                            ],
                            [
                                "+",
                                "except ImportError as ex:"
                            ],
                            [
                                "-",
                                "except (ImportError, SyntaxError) as ex:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pylint-dev__pylint-7228": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "pylint/config/argument.py": [
                            "def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:",
                            "def _py_version_transformer(value: str) -> tuple[int, ...]:"
                        ]
                    },
                    "lines": {
                        "pylint/config/argument.py": [
                            [
                                "+",
                                "\"regexp\": _regex_transformer,"
                            ],
                            [
                                "+",
                                "except re.error as e:"
                            ],
                            [
                                "+",
                                "return re.compile(value)"
                            ],
                            [
                                "+",
                                "\"\"\"Return `re.compile(value)`.\"\"\""
                            ],
                            [
                                "+",
                                "patterns.append(_regex_transformer(pattern))"
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "+",
                                "def _regex_transformer(value: str) -> Pattern[str]:"
                            ],
                            [
                                "-",
                                "\"regexp\": re.compile,"
                            ],
                            [
                                "+",
                                "msg = f\"Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}\""
                            ],
                            [
                                "+",
                                "raise argparse.ArgumentTypeError(msg)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 2,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "pylint-dev__pylint-7993": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "pylint/reporters/text.py": [
                            "def on_set_current_module(self, module: str, filepath: str | None) -> None:"
                        ]
                    },
                    "lines": {
                        "pylint/reporters/text.py": [
                            [
                                "+",
                                "arguments = re.findall(r\"\\{(\\w+?)(:.*)?\\}\", template)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "pytest-dev__pytest-11143": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/assertion/rewrite.py": [
                            "def run(self, mod: ast.Module) -> None:"
                        ]
                    },
                    "lines": {
                        "src/_pytest/assertion/rewrite.py": [
                            [
                                "+",
                                "and isinstance(item.value.value, str)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-11148": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "src/_pytest/pathlib.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-5103": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/assertion/rewrite.py": [
                            "def visit_Call_legacy(self, call):",
                            "def visit_Call_35(self, call):"
                        ]
                    },
                    "lines": {
                        "src/_pytest/assertion/rewrite.py": [
                            [
                                "+",
                                "return self._visit_all(call)"
                            ],
                            [
                                "+",
                                "self.statements.append(for_loop)"
                            ],
                            [
                                "+",
                                "assertion_module = ast.Module("
                            ],
                            [
                                "+",
                                "AssertionRewriter(module_path=None, config=None).run(assertion_module)"
                            ],
                            [
                                "+",
                                "\"\","
                            ],
                            [
                                "+",
                                "if isinstance(call.func, ast.Name) and call.func.id == \"all\":"
                            ],
                            [
                                "+",
                                ")  # Return an empty expression, all the asserts are in the for_loop"
                            ],
                            [
                                "+",
                                "iter=gen_exp.generators[0].iter,"
                            ],
                            [
                                "+",
                                "gen_exp = call.args[0]"
                            ],
                            [
                                "+",
                                "\"\"\"Special rewrite for the builtin all function, see #5062\"\"\""
                            ],
                            [
                                "+",
                                "body=[ast.Assert(test=gen_exp.elt, lineno=1, msg=\"\", col_offset=1)]"
                            ],
                            [
                                "+",
                                "def _visit_all(self, call):"
                            ],
                            [
                                "+",
                                "if not isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp)):"
                            ],
                            [
                                "+",
                                "for_loop = ast.For("
                            ],
                            [
                                "+",
                                "target=gen_exp.generators[0].target,"
                            ],
                            [
                                "+",
                                "orelse=[],"
                            ],
                            [
                                "+",
                                "ast.Num(n=1),"
                            ],
                            [
                                "+",
                                "return ("
                            ],
                            [
                                "+",
                                "return"
                            ],
                            [
                                "+",
                                "body=assertion_module.body,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 2,
                        "percentage": 9.090909090909092
                    }
                }
            }
        },
        "pytest-dev__pytest-5221": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "src/_pytest/python.py": [
                            [
                                "+",
                                "tw.line()"
                            ],
                            [
                                "-",
                                "tw.line(funcargspec, green=True)"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "+",
                                "tw.write(\" -- %s\" % bestrel, yellow=True)"
                            ],
                            [
                                "+",
                                "if fixturedef.scope != \"function\":"
                            ],
                            [
                                "+",
                                "tw.write(\" [%s scope]\" % fixturedef.scope, cyan=True)"
                            ],
                            [
                                "+",
                                "tw.write(\"\\n\")"
                            ],
                            [
                                "+",
                                "tw.write(argname, green=True)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "pytest-dev__pytest-5227": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 0,
                        "covered": 0,
                        "percentage": 100
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "pytest-dev__pytest-5413": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/_code/code.py": [
                            "def getrepr("
                        ]
                    },
                    "lines": {
                        "src/_pytest/_code/code.py": [
                            [
                                "-",
                                "if self._excinfo is None:"
                            ],
                            [
                                "-",
                                "return repr(self)"
                            ],
                            [
                                "-",
                                "def __str__(self):"
                            ],
                            [
                                "-",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 3,
                        "percentage": 42.857142857142854
                    }
                }
            }
        },
        "pytest-dev__pytest-5495": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/assertion/util.py": [
                            "def _compare_eq_iterable(left, right, verbose=0):"
                        ]
                    },
                    "lines": {
                        "src/_pytest/assertion/util.py": [
                            [
                                "-",
                                "len_diff = len_left - len_right"
                            ],
                            [
                                "+",
                                "right_value = right[i]"
                            ],
                            [
                                "+",
                                "# >>> s[0]"
                            ],
                            [
                                "+",
                                "# 102"
                            ],
                            [
                                "+",
                                "left_value = left[i]"
                            ],
                            [
                                "+",
                                "# using a slice gives us the ascii representation:"
                            ],
                            [
                                "+",
                                "# instead of their numeric values (#5260)"
                            ],
                            [
                                "+",
                                "right_value = right[i : i + 1]"
                            ],
                            [
                                "+",
                                "# when comparing bytes, it doesn't help to show the \"sides contain one or more items\""
                            ],
                            [
                                "+",
                                "len_diff = len_left - len_right"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "# b'f'"
                            ],
                            [
                                "+",
                                "# >>> s[0:1]"
                            ],
                            [
                                "+",
                                "# when comparing bytes, we want to see their ascii representation"
                            ],
                            [
                                "+",
                                "# >>> s = b'foo'"
                            ],
                            [
                                "+",
                                "if comparing_bytes:"
                            ],
                            [
                                "+",
                                "# longer explanation, so skip it"
                            ],
                            [
                                "+",
                                "\"At index {} diff: {!r} != {!r}\".format(i, left_value, right_value)"
                            ],
                            [
                                "+",
                                "return explanation"
                            ],
                            [
                                "+",
                                "comparing_bytes = isinstance(left, bytes) and isinstance(right, bytes)"
                            ],
                            [
                                "+",
                                "left_value = left[i : i + 1]"
                            ],
                            [
                                "-",
                                "\"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 23,
                        "covered": 1,
                        "percentage": 4.3478260869565215
                    }
                }
            }
        },
        "pytest-dev__pytest-5692": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/junitxml.py": [
                            "def pytest_sessionfinish(self):"
                        ]
                    },
                    "lines": {
                        "src/_pytest/junitxml.py": [
                            [
                                "+",
                                "hostname=platform.node(),"
                            ],
                            [
                                "+",
                                "timestamp=datetime.fromtimestamp(self.suite_start_time).isoformat(),"
                            ],
                            [
                                "+",
                                "from datetime import datetime"
                            ],
                            [
                                "+",
                                "import platform"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-6116": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "src/_pytest/main.py": [
                            [
                                "+",
                                "\"--co\","
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7168": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/_io/saferepr.py": [
                            "def _format_repr_exception(exc: BaseException, obj: Any) -> str:"
                        ]
                    },
                    "lines": {
                        "src/_pytest/_io/saferepr.py": [
                            [
                                "+",
                                "exc_info, type(obj).__name__, id(obj)"
                            ],
                            [
                                "-",
                                "exc_info, obj.__class__.__name__, id(obj)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7220": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "src/_pytest/nodes.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7373": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/mark/evaluate.py": [
                            "def _istrue(self) -> bool:"
                        ]
                    },
                    "lines": {
                        "src/_pytest/mark/evaluate.py": [
                            [
                                "+",
                                "def compiled_eval(expr: str, d: Dict[str, object]) -> Any:"
                            ],
                            [
                                "-",
                                "evalcache_key = StoreKey[Dict[str, Any]]()"
                            ],
                            [
                                "-",
                                "from _pytest.store import StoreKey"
                            ],
                            [
                                "-",
                                "from _pytest.config import Config"
                            ],
                            [
                                "-",
                                "def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:"
                            ],
                            [
                                "-",
                                "result = cached_eval(self.item.config, expr, d)"
                            ],
                            [
                                "+",
                                "result = compiled_eval(expr, d)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 13,
                        "percentage": 65.0
                    }
                }
            }
        },
        "pytest-dev__pytest-7432": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "src/_pytest/skipping.py": [
                            [
                                "-",
                                "elif ("
                            ],
                            [
                                "+",
                                "if ("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "pytest-dev__pytest-7490": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "src/_pytest/skipping.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-8365": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/tmpdir.py": [
                            "def getbasetemp(self) -> Path:"
                        ]
                    },
                    "lines": {
                        "src/_pytest/tmpdir.py": [
                            [
                                "+",
                                "rootdir.mkdir(exist_ok=True)"
                            ],
                            [
                                "+",
                                "except OSError:"
                            ],
                            [
                                "+",
                                "rootdir = temproot.joinpath(\"pytest-of-unknown\")"
                            ],
                            [
                                "-",
                                "rootdir.mkdir(exist_ok=True)"
                            ],
                            [
                                "+",
                                "# getuser() likely returned illegal characters for the platform, use unknown back off mechanism"
                            ],
                            [
                                "+",
                                "try:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-8906": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "src/_pytest/python.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "pytest-dev__pytest-9359": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "src/_pytest/_code/source.py": [
                            "def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[i"
                        ]
                    },
                    "lines": {
                        "src/_pytest/_code/source.py": [
                            [
                                "+",
                                "for d in x.decorator_list:"
                            ],
                            [
                                "+",
                                "# Since Python 3.8, the lineno points to the class/def, so need to include the decorators."
                            ],
                            [
                                "+",
                                "if isinstance(x, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):"
                            ],
                            [
                                "+",
                                "values.append(d.lineno - 1)"
                            ],
                            [
                                "+",
                                "# Before Python 3.8, the lineno of a decorated class or function pointed at the decorator."
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-10297": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/linear_model/ridge.py": [
                            "class RidgeCV(_BaseRidgeCV, RegressorMixin):"
                        ]
                    },
                    "lines": {
                        "sklearn/linear_model/ridge.py": [
                            [
                                "+",
                                "will contain the mean squared errors (by default) or the values \\"
                            ],
                            [
                                "+",
                                "Generalized Cross-Validation)."
                            ],
                            [
                                "-",
                                "shape = [n_samples, n_responses, n_alphas], optional"
                            ],
                            [
                                "+",
                                "contain the mean squared errors (by default) or the values of the"
                            ],
                            [
                                "+",
                                "and ``cv=None``). After ``fit()`` has been called, this attribute \\"
                            ],
                            [
                                "+",
                                "``{loss,score}_func`` function (if provided in the constructor)."
                            ],
                            [
                                "-",
                                "Cross-validation values for each alpha (if `store_cv_values=True` and \\"
                            ],
                            [
                                "+",
                                "store_cv_values : boolean, default=False"
                            ],
                            [
                                "-",
                                "the mean squared errors (by default) or the values of the \\"
                            ],
                            [
                                "-",
                                "`{loss,score}_func` function (if provided in the constructor)."
                            ],
                            [
                                "-",
                                "contain the mean squared errors (by default) or the values of the \\"
                            ],
                            [
                                "-",
                                "`cv=None`). After `fit()` has been called, this attribute will contain \\"
                            ],
                            [
                                "+",
                                "Cross-validation values for each alpha (if ``store_cv_values=True`` and"
                            ],
                            [
                                "+",
                                "each alpha should be stored in the ``cv_values_`` attribute (see"
                            ],
                            [
                                "+",
                                "``cv=None``). After ``fit()`` has been called, this attribute will"
                            ],
                            [
                                "-",
                                "cv_values_ : array, shape = [n_samples, n_alphas] or \\"
                            ],
                            [
                                "+",
                                "Cross-validation values for each alpha (if ``store_cv_values=True``\\"
                            ],
                            [
                                "+",
                                "cv_values_ : array, shape = [n_samples, n_targets, n_alphas], optional"
                            ],
                            [
                                "+",
                                "Flag indicating if the cross-validation values corresponding to"
                            ],
                            [
                                "-",
                                "below). This flag is only compatible with `cv=None` (i.e. using"
                            ],
                            [
                                "-",
                                "`cv=None`). After `fit()` has been called, this attribute will \\"
                            ],
                            [
                                "+",
                                "below). This flag is only compatible with ``cv=None`` (i.e. using"
                            ],
                            [
                                "-",
                                "each alpha should be stored in the `cv_values_` attribute (see"
                            ],
                            [
                                "+",
                                "of the ``{loss,score}_func`` function (if provided in the constructor)."
                            ],
                            [
                                "-",
                                "Cross-validation values for each alpha (if `store_cv_values=True` and"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 31,
                        "covered": 6,
                        "percentage": 19.35483870967742
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-10508": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/preprocessing/label.py": [
                            "def transform(self, y):",
                            "def inverse_transform(self, y):"
                        ]
                    },
                    "lines": {
                        "sklearn/preprocessing/label.py": [
                            [
                                "+",
                                "if _num_samples(y) == 0:"
                            ],
                            [
                                "+",
                                "# inverse transform of empty array is empty array"
                            ],
                            [
                                "+",
                                "# transform of empty array is empty array"
                            ],
                            [
                                "+",
                                "y = column_or_1d(y, warn=True)"
                            ],
                            [
                                "+",
                                "return np.array([])"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-10949": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sklearn/utils/validation.py": [
                            [
                                "+",
                                "context))"
                            ],
                            [
                                "+",
                                "if hasattr(array, \"dtypes\") and hasattr(array, \"__array__\"):"
                            ],
                            [
                                "+",
                                "{array.dtype} != set(dtypes_orig)):"
                            ],
                            [
                                "+",
                                "if (warn_on_dtype and dtypes_orig is not None and"
                            ],
                            [
                                "+",
                                "# DataFrame), and store them. If not, store None."
                            ],
                            [
                                "+",
                                "warnings.warn(msg, DataConversionWarning, stacklevel=3)"
                            ],
                            [
                                "+",
                                "dtypes_orig = np.array(array.dtypes)"
                            ],
                            [
                                "+",
                                "dtypes_orig = None"
                            ],
                            [
                                "+",
                                "# if there was at the beginning some other types than the final one"
                            ],
                            [
                                "+",
                                "% (', '.join(map(str, sorted(set(dtypes_orig)))), array.dtype,"
                            ],
                            [
                                "+",
                                "msg = (\"Data with input dtype %s were all converted to %s%s.\""
                            ],
                            [
                                "+",
                                "# some data must have been converted"
                            ],
                            [
                                "+",
                                "# (for instance in a DataFrame that can contain several dtypes) then"
                            ],
                            [
                                "+",
                                "# check if the object contains several dtypes (typically a pandas"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 1,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-11040": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sklearn/neighbors/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-11281": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/mixture/base.py": [
                            "def _initialize(self, X, resp):",
                            "def fit(self, X, y=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/mixture/base.py": [
                            [
                                "+",
                                "trial, the method iterates between E-step and M-step for `max_iter`"
                            ],
                            [
                                "+",
                                "Parameters"
                            ],
                            [
                                "+",
                                "Returns"
                            ],
                            [
                                "+",
                                "predicts the most probable label for the input data points."
                            ],
                            [
                                "+",
                                "corresponds to a single data point."
                            ],
                            [
                                "+",
                                ".. versionadded:: 0.20"
                            ],
                            [
                                "-",
                                "The method fit the model `n_init` times and set the parameters with"
                            ],
                            [
                                "+",
                                "\"\"\"Estimate model parameters using X and predict the labels for X."
                            ],
                            [
                                "+",
                                "`tol`, otherwise, a `ConvergenceWarning` is raised. After fitting, it"
                            ],
                            [
                                "+",
                                "self.fit_predict(X, y)"
                            ],
                            [
                                "+",
                                "List of n_features-dimensional data points. Each row"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "def fit_predict(self, X, y=None):"
                            ],
                            [
                                "+",
                                "return self"
                            ],
                            [
                                "+",
                                "which the model has the largest likelihood or lower bound. Within each"
                            ],
                            [
                                "+",
                                "The method fits the model n_init times and sets the parameters with"
                            ],
                            [
                                "+",
                                "X : array-like, shape (n_samples, n_features)"
                            ],
                            [
                                "+",
                                "-------"
                            ],
                            [
                                "+",
                                "Component labels."
                            ],
                            [
                                "+",
                                "The method fits the model `n_init` times and set the parameters with"
                            ],
                            [
                                "+",
                                "times until the change of likelihood or lower bound is less than"
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "+",
                                "labels : array, shape (n_samples,)"
                            ],
                            [
                                "+",
                                "----------"
                            ],
                            [
                                "+",
                                "return log_resp.argmax(axis=1)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 26,
                        "covered": 1,
                        "percentage": 3.8461538461538463
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-12471": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/preprocessing/_encoders.py": [
                            "def _transform(self, X, handle_unknown='error'):"
                        ]
                    },
                    "lines": {
                        "sklearn/preprocessing/_encoders.py": [
                            [
                                "+",
                                "Xi = Xi.astype(self.categories_[i].dtype)"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "# cast Xi into the largest string type necessary"
                            ],
                            [
                                "+",
                                "and self.categories_[i].itemsize > Xi.itemsize):"
                            ],
                            [
                                "+",
                                "Xi = Xi.copy()"
                            ],
                            [
                                "+",
                                "if (self.categories_[i].dtype.kind in ('U', 'S')"
                            ],
                            [
                                "+",
                                "# to handle different lengths of numpy strings"
                            ],
                            [
                                "-",
                                "Xi = Xi.copy()"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 1,
                        "percentage": 11.11111111111111
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13142": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sklearn/mixture/base.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13241": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/decomposition/kernel_pca.py": [
                            "def _fit_transform(self, K):"
                        ]
                    },
                    "lines": {
                        "sklearn/decomposition/kernel_pca.py": [
                            [
                                "+",
                                "from ..utils.extmath import svd_flip"
                            ],
                            [
                                "+",
                                "# flip eigenvectors' sign to enforce deterministic output"
                            ],
                            [
                                "+",
                                "np.empty_like(self.alphas_).T)"
                            ],
                            [
                                "+",
                                "self.alphas_, _ = svd_flip(self.alphas_,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 1,
                        "percentage": 20.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13439": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/pipeline.py": [
                            "def _iter(self, with_final=True):"
                        ]
                    },
                    "lines": {
                        "sklearn/pipeline.py": [
                            [
                                "+",
                                "Returns the length of the Pipeline"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 3,
                        "percentage": 60.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13496": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sklearn/ensemble/iforest.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13497": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sklearn/feature_selection/mutual_info_.py": [
                            [
                                "-",
                                "from ..utils.validation import check_X_y"
                            ],
                            [
                                "+",
                                "discrete_features = issparse(X)"
                            ],
                            [
                                "-",
                                "discrete_features = np.asarray(discrete_features)"
                            ],
                            [
                                "+",
                                "if discrete_features == 'auto':"
                            ],
                            [
                                "-",
                                "discrete_features = issparse(X)"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "if isinstance(discrete_features, (str, bool)):"
                            ],
                            [
                                "+",
                                "if isinstance(discrete_features, str):"
                            ],
                            [
                                "+",
                                "discrete_features = check_array(discrete_features, ensure_2d=False)"
                            ],
                            [
                                "+",
                                "from ..utils.validation import check_array, check_X_y"
                            ],
                            [
                                "-",
                                "if isinstance(discrete_features, bool):"
                            ],
                            [
                                "+",
                                "raise ValueError(\"Invalid string value for discrete_features.\")"
                            ],
                            [
                                "-",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 1,
                        "percentage": 7.142857142857142
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13584": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sklearn/utils/_pprint.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-13779": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/ensemble/voting.py": [
                            "def fit(self, X, y, sample_weight=None):"
                        ]
                    },
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14087": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/linear_model/logistic.py": [
                            "def fit(self, X, y, sample_weight=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/linear_model/logistic.py": [
                            [
                                "+",
                                "self.l1_ratio_.append(None)"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))"
                            ],
                            [
                                "+",
                                "if multi_class == 'ovr':"
                            ],
                            [
                                "+",
                                "best_indices_l1 = best_indices // len(self.Cs_)"
                            ],
                            [
                                "+",
                                "if self.penalty == 'elasticnet':"
                            ],
                            [
                                "-",
                                "self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))"
                            ],
                            [
                                "-",
                                "best_indices_l1 = best_indices // len(self.Cs_)"
                            ],
                            [
                                "-",
                                "if self.multi_class == 'ovr':"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14092": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/neighbors/nca.py": [
                            "def _validate_params(self, X, y):"
                        ]
                    },
                    "lines": {
                        "sklearn/neighbors/nca.py": [
                            [
                                "+",
                                "check_scalar(self.verbose, 'verbose', numbers.Integral, 0)"
                            ],
                            [
                                "+",
                                "check_scalar(self.max_iter, 'max_iter', numbers.Integral, 1)"
                            ],
                            [
                                "+",
                                "check_scalar("
                            ],
                            [
                                "+",
                                "import numbers"
                            ],
                            [
                                "-",
                                "check_scalar(self.max_iter, 'max_iter', int, 1)"
                            ],
                            [
                                "-",
                                "check_scalar(self.verbose, 'verbose', int, 0)"
                            ],
                            [
                                "+",
                                "self.n_components, 'n_components', numbers.Integral, 1)"
                            ],
                            [
                                "+",
                                "check_scalar(self.tol, 'tol', numbers.Real, 0.)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14894": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/svm/base.py": [
                            "def _sparse_fit(self, X, y, sample_weight, solver_type, kernel,"
                        ]
                    },
                    "lines": {
                        "sklearn/svm/base.py": [
                            [
                                "-",
                                "dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,"
                            ],
                            [
                                "-",
                                "self.dual_coef_ = sp.csr_matrix("
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "(dual_coef_data, dual_coef_indices, dual_coef_indptr),"
                            ],
                            [
                                "+",
                                "if not n_SV:"
                            ],
                            [
                                "+",
                                "(n_class, n_SV))"
                            ],
                            [
                                "+",
                                "dual_coef_indices.size / n_class)"
                            ],
                            [
                                "-",
                                "(dual_coef_data, dual_coef_indices, dual_coef_indptr),"
                            ],
                            [
                                "+",
                                "dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,"
                            ],
                            [
                                "-",
                                "(n_class, n_SV))"
                            ],
                            [
                                "+",
                                "self.dual_coef_ = sp.csr_matrix("
                            ],
                            [
                                "-",
                                "dual_coef_indices.size / n_class)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 1,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-14983": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/model_selection/_split.py": [
                            "def _build_repr(self):",
                            "def get_n_splits(self, X=None, y=None, groups=None):"
                        ]
                    },
                    "lines": {
                        "sklearn/model_selection/_split.py": [
                            [
                                "+",
                                "if value is None and hasattr(self, 'cvargs'):"
                            ],
                            [
                                "+",
                                "value = self.cvargs.get(key, None)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 3,
                        "percentage": 60.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-15512": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/cluster/_affinity_propagation.py": [
                            "def predict(self, X):"
                        ]
                    },
                    "lines": {
                        "sklearn/cluster/_affinity_propagation.py": [
                            [
                                "+",
                                "never_converged = False"
                            ],
                            [
                                "+",
                                "if K > 0 and not never_converged:"
                            ],
                            [
                                "-",
                                "if K > 0:"
                            ],
                            [
                                "+",
                                "X = check_array(X)"
                            ],
                            [
                                "+",
                                "never_converged = True"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-15535": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/metrics/cluster/_supervised.py": [
                            "def check_clusterings(labels_true, labels_pred):"
                        ]
                    },
                    "lines": {
                        "sklearn/metrics/cluster/_supervised.py": [
                            [
                                "+",
                                "labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None,"
                            ],
                            [
                                "-",
                                "labels_pred, ensure_2d=False, ensure_min_samples=0"
                            ],
                            [
                                "-",
                                "labels_true, ensure_2d=False, ensure_min_samples=0"
                            ],
                            [
                                "+",
                                "labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25500": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sklearn/isotonic.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 36,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25570": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/compose/_column_transformer.py": [
                            "def _hstack(self, Xs):"
                        ]
                    },
                    "lines": {
                        "sklearn/compose/_column_transformer.py": [
                            [
                                "+",
                                "feature_names_outs = [X.columns for X in Xs if X.shape[1] != 0]"
                            ],
                            [
                                "+",
                                "# Hence feature names are filtered for non-emptiness."
                            ],
                            [
                                "+",
                                "# Selection of columns might be empty."
                            ],
                            [
                                "-",
                                "feature_names_outs = [X.columns for X in Xs]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25638": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sklearn/utils/multiclass.py": [
                            "def is_multilabel(y):"
                        ]
                    },
                    "lines": {
                        "sklearn/utils/multiclass.py": [
                            [
                                "+",
                                "check_y_kwargs = dict("
                            ],
                            [
                                "+",
                                "y = check_array(y, dtype=object, **check_y_kwargs)"
                            ],
                            [
                                "-",
                                "y = xp.asarray(y)"
                            ],
                            [
                                "+",
                                "accept_sparse=True,"
                            ],
                            [
                                "+",
                                "ensure_min_features=0,"
                            ],
                            [
                                "+",
                                "if str(e).startswith(\"Complex data not supported\"):"
                            ],
                            [
                                "+",
                                "y = check_array(y, dtype=None, **check_y_kwargs)"
                            ],
                            [
                                "+",
                                "force_all_finite=False,"
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "-",
                                "except (np.VisibleDeprecationWarning, ValueError):"
                            ],
                            [
                                "-",
                                "y = xp.asarray(y, dtype=object)"
                            ],
                            [
                                "+",
                                "allow_nd=True,"
                            ],
                            [
                                "+",
                                "ensure_2d=False,"
                            ],
                            [
                                "+",
                                "raise"
                            ],
                            [
                                "+",
                                "ensure_min_samples=0,"
                            ],
                            [
                                "+",
                                "except (np.VisibleDeprecationWarning, ValueError) as e:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 17,
                        "covered": 1,
                        "percentage": 5.88235294117647
                    }
                }
            }
        },
        "scikit-learn__scikit-learn-25747": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sklearn/utils/_set_output.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10325": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-10451": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/autodoc/typehints.py": [
                            "def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],",
                            "def augment_descriptions_with_types("
                        ]
                    },
                    "lines": {
                        "sphinx/ext/autodoc/typehints.py": [
                            [
                                "-",
                                "arg = arguments.get(name, {})"
                            ],
                            [
                                "+",
                                "name = '**' + name"
                            ],
                            [
                                "+",
                                "elif '**' + name in arguments:"
                            ],
                            [
                                "+",
                                "for name, annotation in annotations.items():"
                            ],
                            [
                                "+",
                                "elif '**' + name in has_description:"
                            ],
                            [
                                "-",
                                "for name in annotations:"
                            ],
                            [
                                "+",
                                "name = '*' + name"
                            ],
                            [
                                "+",
                                "arguments.get(name)"
                            ],
                            [
                                "+",
                                "if '*' + name in has_description:"
                            ],
                            [
                                "-",
                                "field += nodes.field_body('', nodes.paragraph('', annotations[name]))"
                            ],
                            [
                                "+",
                                "arg = arguments.get(name, {})"
                            ],
                            [
                                "+",
                                "if '*' + name in arguments:"
                            ],
                            [
                                "+",
                                "field += nodes.field_body('', nodes.paragraph('', annotation))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 2,
                        "percentage": 13.333333333333334
                    }
                }
            }
        },
        "sphinx-doc__sphinx-11445": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sphinx/util/rst.py": [
                            [
                                "-",
                                "try:"
                            ],
                            [
                                "-",
                                "if docinfo_re.match(line):"
                            ],
                            [
                                "+",
                                "from jinja2 import Environment, pass_environment"
                            ],
                            [
                                "+",
                                "lineno = 0"
                            ],
                            [
                                "+",
                                "from docutils.parsers.rst.states import Body"
                            ],
                            [
                                "-",
                                "from jinja2 import Environment"
                            ],
                            [
                                "-",
                                "from jinja2 import environmentfilter as pass_environment"
                            ],
                            [
                                "-",
                                "docinfo_re = re.compile(':\\\\w+:.*?')"
                            ],
                            [
                                "+",
                                "FIELD_NAME_RE = re.compile(Body.patterns['field_marker'])"
                            ],
                            [
                                "+",
                                "if FIELD_NAME_RE.match(line):"
                            ],
                            [
                                "-",
                                "except ImportError:"
                            ],
                            [
                                "-",
                                "from jinja2.utils import pass_environment"
                            ],
                            [
                                "-",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7686": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/autosummary/generate.py": [
                            "def render(self, template_name: str, context: Dict) -> str:",
                            "def get_modules(obj: Any) -> Tuple[List[str], List[str]]:"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/autosummary/generate.py": [
                            [
                                "+",
                                "except AttributeError:"
                            ],
                            [
                                "+",
                                "self.object = obj"
                            ],
                            [
                                "+",
                                "ns['members'] = scanner.scan(imported_members)"
                            ],
                            [
                                "+",
                                "value = None"
                            ],
                            [
                                "+",
                                "imported = False"
                            ],
                            [
                                "+",
                                "elif safe_getattr(value, '__module__') != self.object.__name__:"
                            ],
                            [
                                "+",
                                "# list not-imported members up"
                            ],
                            [
                                "+",
                                "def __init__(self, app: Any, obj: Any) -> None:"
                            ],
                            [
                                "+",
                                "# list all members up"
                            ],
                            [
                                "+",
                                "elif imported is False:"
                            ],
                            [
                                "+",
                                "continue"
                            ],
                            [
                                "+",
                                "return members"
                            ],
                            [
                                "-",
                                "ns['members'] = dir(obj)"
                            ],
                            [
                                "+",
                                "return self.app.emit_firstresult('autodoc-skip-member', objtype,"
                            ],
                            [
                                "+",
                                "members = []"
                            ],
                            [
                                "+",
                                "if self.is_skipped(name, value, objtype):"
                            ],
                            [
                                "+",
                                "imported = True"
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "+",
                                "if inspect.ismodule(value):"
                            ],
                            [
                                "+",
                                "'the following exception was raised:\\n%s'),"
                            ],
                            [
                                "+",
                                "return False"
                            ],
                            [
                                "+",
                                "scanner = ModuleScanner(app, obj)"
                            ],
                            [
                                "+",
                                "def get_object_type(self, name: str, value: Any) -> str:"
                            ],
                            [
                                "+",
                                "logger.warning(__('autosummary: failed to determine %r to be documented, '"
                            ],
                            [
                                "+",
                                "objtype = self.get_object_type(name, value)"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "value = safe_getattr(self.object, name)"
                            ],
                            [
                                "+",
                                "self.app = app"
                            ],
                            [
                                "+",
                                "import inspect"
                            ],
                            [
                                "+",
                                "members.append(name)"
                            ],
                            [
                                "+",
                                "name, exc, type='autosummary')"
                            ],
                            [
                                "+",
                                "for name in dir(self.object):"
                            ],
                            [
                                "+",
                                "def scan(self, imported_members: bool) -> List[str]:"
                            ],
                            [
                                "+",
                                "if imported_members:"
                            ],
                            [
                                "+",
                                "def is_skipped(self, name: str, value: Any, objtype: str) -> bool:"
                            ],
                            [
                                "+",
                                "except Exception as exc:"
                            ],
                            [
                                "+",
                                "name, value, False, {})"
                            ],
                            [
                                "+",
                                "class ModuleScanner:"
                            ],
                            [
                                "+",
                                "return get_documenter(self.app, value, self.object).objtype"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 40,
                        "covered": 1,
                        "percentage": 2.5
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7738": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/napoleon/docstring.py": [
                            "def _dedent(self, lines: List[str], full: bool = False) -> List[str]:"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/napoleon/docstring.py": [
                            [
                                "+",
                                "if name.endswith('_') and getattr(self._config, 'strip_signature_backslash', False):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-7975": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/environment/adapters/indexentries.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8273": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/builders/manpage.py": [
                            "def setup(app: Sphinx) -> Dict[str, Any]:",
                            "def write(self, *ignored: Any) -> None:"
                        ]
                    },
                    "lines": {
                        "sphinx/builders/manpage.py": [
                            [
                                "+",
                                "from sphinx.util.osutil import ensuredir, make_filename_from_project"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "app.add_config_value('man_make_section_directory', False, None)"
                            ],
                            [
                                "+",
                                "targetname = '%s/%s.%s' % (section, name, section)"
                            ],
                            [
                                "+",
                                "targetname = '%s.%s' % (name, section)"
                            ],
                            [
                                "+",
                                "if self.config.man_make_section_directory:"
                            ],
                            [
                                "-",
                                "targetname = '%s.%s' % (name, section)"
                            ],
                            [
                                "-",
                                "from sphinx.util.osutil import make_filename_from_project"
                            ],
                            [
                                "+",
                                "ensuredir(path.join(self.outdir, str(section)))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 1,
                        "percentage": 10.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8282": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8435": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8474": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/domains/std.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8506": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/domains/std.py": [
                            "def handle_signature(self, sig: str, signode: desc_signature) -> str:"
                        ]
                    },
                    "lines": {
                        "sphinx/domains/std.py": [
                            [
                                "+",
                                "option_desc_re = re.compile(r'((?:/|--|-|\\+)?[^\\s=]+)(=?\\s*.*)')"
                            ],
                            [
                                "+",
                                "if optname.endswith('[') and args.endswith(']'):"
                            ],
                            [
                                "+",
                                "# optional value surrounded by brackets (ex. foo[=bar])"
                            ],
                            [
                                "+",
                                "args = '[' + args"
                            ],
                            [
                                "+",
                                "optname = optname[:-1]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8595": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/__init__.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8627": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/util/typing.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8713": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/napoleon/docstring.py": [
                            "def _parse_notes_section(self, section: str) -> List[str]:"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/napoleon/docstring.py": [
                            [
                                "+",
                                "fields = self._consume_fields(multiple=True)"
                            ],
                            [
                                "-",
                                "return self._format_fields(_('Other Parameters'), self._consume_fields())"
                            ],
                            [
                                "+",
                                "# Allow to declare multiple parameters at once (ex: x, y: int)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 5,
                        "percentage": 62.5
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8721": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sphinx/ext/viewcode.py": [
                            "def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non"
                        ]
                    },
                    "lines": {
                        "sphinx/ext/viewcode.py": [
                            [
                                "+",
                                "return"
                            ],
                            [
                                "+",
                                "if app.builder.name == \"singlehtml\":"
                            ],
                            [
                                "+",
                                "if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sphinx-doc__sphinx-8801": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sphinx/ext/autodoc/importer.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 25,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-11400": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/ccode.py": [
                            "def _print_Symbol(self, expr):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/ccode.py": [
                            [
                                "+",
                                "def _print_sinc(self, expr):"
                            ],
                            [
                                "+",
                                "from sympy.functions import Piecewise"
                            ],
                            [
                                "+",
                                "_piecewise = Piecewise("
                            ],
                            [
                                "+",
                                "lhs_code = self._print(expr.lhs)"
                            ],
                            [
                                "+",
                                "from sympy.functions.elementary.trigonometric import sin"
                            ],
                            [
                                "+",
                                "(sin(expr.args[0]) / expr.args[0], Ne(expr.args[0], 0)), (1, True))"
                            ],
                            [
                                "+",
                                "return (\"{0} {1} {2}\").format(lhs_code, op, rhs_code)"
                            ],
                            [
                                "+",
                                "op = expr.rel_op"
                            ],
                            [
                                "+",
                                "rhs_code = self._print(expr.rhs)"
                            ],
                            [
                                "+",
                                "from sympy.core.relational import Ne"
                            ],
                            [
                                "+",
                                "return self._print(_piecewise)"
                            ],
                            [
                                "+",
                                "def _print_Relational(self, expr):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 13,
                        "covered": 1,
                        "percentage": 7.6923076923076925
                    }
                }
            }
        },
        "sympy__sympy-11870": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/functions/elementary/trigonometric.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-11897": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/latex.py": [
                            "def _needs_mul_brackets(self, expr, first=False, last=False):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/latex.py": [
                            [
                                "+",
                                "if expr.is_Piecewise:"
                            ],
                            [
                                "+",
                                "any([expr.has(x) for x in (Integral, Product, Sum)])):"
                            ],
                            [
                                "+",
                                "return True"
                            ],
                            [
                                "-",
                                "any([expr.has(x) for x in (Integral, Piecewise, Product, Sum)])):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-12171": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/mathematica.py": [
                            [
                                "+",
                                "return \"Hold[D[\" + ', '.join(self.doprint(a) for a in expr.args) + \"]]\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 2,
                        "percentage": 66.66666666666666
                    }
                }
            }
        },
        "sympy__sympy-12236": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/polys/domains/polynomialring.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-12419": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/matrices/expressions/matexpr.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-12454": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/matrices/matrices.py": [
                            "def _eval_is_zero(self):"
                        ]
                    },
                    "lines": {
                        "sympy/matrices/matrices.py": [
                            [
                                "+",
                                "for j in range(min(self.cols, (i - 1))))"
                            ],
                            [
                                "-",
                                "for j in range(i))"
                            ],
                            [
                                "-",
                                "for j in range(i - 1))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "sympy__sympy-12481": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/combinatorics/permutations.py": [
                            [
                                "+",
                                "raise ValueError('there were repeated elements.')"
                            ],
                            [
                                "+",
                                "if has_dups(temp) and not is_cycle:"
                            ],
                            [
                                "-",
                                "raise ValueError('there were repeated elements.')"
                            ],
                            [
                                "-",
                                "else:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 4,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-13031": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/matrices/sparse.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13043": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/integrals/intpoly.py": [
                            [
                                "-",
                                "[x, y, x**2, y**5, x*y, x**3*y**2]"
                            ],
                            [
                                "+",
                                "return set(poly_dict.values())"
                            ],
                            [
                                "+",
                                "return {monom[1] for monom in degrees}"
                            ],
                            [
                                "-",
                                "return [monom[1] for monom in degrees]"
                            ],
                            [
                                "+",
                                "{x, x**2, y, y**5, x*y, x**3*y**2}"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "sympy__sympy-13146": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/operations.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13177": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/core/mod.py": [
                            [
                                "+",
                                "p.is_Pow and p.exp.is_integer and p.base == q and q.is_integer"
                            ],
                            [
                                "+",
                                "and p.exp.is_positive or"
                            ],
                            [
                                "-",
                                "p.is_Pow and p.exp.is_Integer and p.base == q or"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13437": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/functions/combinatorial/numbers.py": [
                            "def _bell_incomplete_poly(n, k, symbols):"
                        ]
                    },
                    "lines": {
                        "sympy/functions/combinatorial/numbers.py": [
                            [
                                "+",
                                "if n.is_negative or n.is_integer is False:"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "raise ValueError(\"Bell polynomial is not defined\")"
                            ],
                            [
                                "+",
                                "raise ValueError(\"a non-negative integer expected\")"
                            ],
                            [
                                "+",
                                "if k_sym is None:"
                            ],
                            [
                                "+",
                                "if n is S.Infinity:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 2,
                        "percentage": 25.0
                    }
                }
            }
        },
        "sympy__sympy-13471": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/core/numbers.py": [
                            [
                                "+",
                                "# Python 3, we may need to strip a tailing 'L' because"
                            ],
                            [
                                "+",
                                "if num[1].endswith('L'):"
                            ],
                            [
                                "+",
                                "# of a shim for int on Python 3, see issue #13470."
                            ],
                            [
                                "+",
                                "# If we're loading an object pickled in Python 2 into"
                            ],
                            [
                                "+",
                                "num[1] = num[1][:-1]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13480": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-13647": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-13773": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/matrices/common.py": [
                            "def __radd__(self, other):"
                        ]
                    },
                    "lines": {
                        "sympy/matrices/common.py": [
                            [
                                "+",
                                "other = _matrixify(other)"
                            ],
                            [
                                "+",
                                "return NotImplemented"
                            ],
                            [
                                "+",
                                "if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "sympy__sympy-13895": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/numbers.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13915": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/mul.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-13971": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/latex.py": [
                            [
                                "+",
                                "+ r\"\\right]\")"
                            ],
                            [
                                "+",
                                "return (r\"\\left[\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 2,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-14024": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/numbers.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-14308": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/pretty/pretty.py": [
                            [
                                "+",
                                "+ ' ' + vectstrs[i])"
                            ],
                            [
                                "+",
                                "flag[i] = 1"
                            ],
                            [
                                "+",
                                "flag.append(0)"
                            ],
                            [
                                "+",
                                "for i, parts in enumerate(o1):"
                            ],
                            [
                                "+",
                                "tempstr = tempstr[:paren] + u'\\N{right parenthesis extension}'\\"
                            ],
                            [
                                "+",
                                "for paren in range(len(tempstr)):"
                            ],
                            [
                                "+",
                                "parts.insert(0, ' ' * (len(parts[0])))"
                            ],
                            [
                                "+",
                                "flag = []"
                            ],
                            [
                                "+",
                                "tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS LOWER HOOK}',"
                            ],
                            [
                                "+",
                                "u'\\N{RIGHT PARENTHESIS UPPER HOOK}'"
                            ],
                            [
                                "+",
                                "elif u'\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:"
                            ],
                            [
                                "+",
                                "if u'\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction"
                            ],
                            [
                                "+",
                                "break"
                            ],
                            [
                                "+",
                                "if 1 in flag:                           # If there was a fractional scalar"
                            ],
                            [
                                "+",
                                "if tempstr[paren] == u'\\N{right parenthesis extension}':"
                            ],
                            [
                                "+",
                                "+ ' '  + vectstrs[i] + tempstr[paren + 1:]"
                            ],
                            [
                                "+",
                                "n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form"
                            ],
                            [
                                "+",
                                "u'\\N{RIGHT PARENTHESIS LOWER HOOK}'"
                            ],
                            [
                                "+",
                                "if len(parts) == 1:             # If part has no newline"
                            ],
                            [
                                "+",
                                "if j == flag[i]:"
                            ],
                            [
                                "+",
                                "lengths.append(len(parts[flag[i]]))"
                            ],
                            [
                                "+",
                                "strs[flag[i]] += parts[flag[i]] + ' + '"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 33,
                        "covered": 11,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "sympy__sympy-14317": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/latex.py": [
                            "def _print_PolynomialRingBase(self, expr):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/latex.py": [
                            [
                                "+",
                                "s_monom = ''"
                            ],
                            [
                                "+",
                                "expr = ' '.join(terms)"
                            ],
                            [
                                "+",
                                "terms[0] = '-' + terms[0]"
                            ],
                            [
                                "+",
                                "for monom, coeff in poly.terms():"
                            ],
                            [
                                "+",
                                "s_coeff = self._print(coeff)"
                            ],
                            [
                                "+",
                                "if exp > 0:"
                            ],
                            [
                                "+",
                                "if coeff.is_Add:"
                            ],
                            [
                                "+",
                                "continue"
                            ],
                            [
                                "+",
                                "for i, exp in enumerate(monom):"
                            ],
                            [
                                "+",
                                "if terms[0] in ['-', '+']:"
                            ],
                            [
                                "+",
                                "terms.extend(['+', s_term])"
                            ],
                            [
                                "+",
                                "s_term = s_coeff"
                            ],
                            [
                                "+",
                                "if coeff is S.One:"
                            ],
                            [
                                "+",
                                "s_coeff = r\"\\left(%s\\right)\" % self._print(coeff)"
                            ],
                            [
                                "+",
                                "s_monom += self._print(poly.gens[i])"
                            ],
                            [
                                "+",
                                "if coeff is S.NegativeOne:"
                            ],
                            [
                                "+",
                                "if not s_monom:"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "if exp == 1:"
                            ],
                            [
                                "+",
                                "if s_term.startswith('-'):"
                            ],
                            [
                                "+",
                                "if modifier == '-':"
                            ],
                            [
                                "+",
                                "terms = []"
                            ],
                            [
                                "+",
                                "terms.extend(['-', s_monom])"
                            ],
                            [
                                "+",
                                "modifier = terms.pop(0)"
                            ],
                            [
                                "-",
                                "expr = self._print(poly.as_expr())"
                            ],
                            [
                                "+",
                                "terms.extend(['+', s_monom])"
                            ],
                            [
                                "+",
                                "terms.extend(['-', s_term[1:]])"
                            ],
                            [
                                "+",
                                "s_term = s_coeff + \" \" + s_monom"
                            ],
                            [
                                "+",
                                "if s_monom:"
                            ],
                            [
                                "+",
                                "s_monom += self._print(pow(poly.gens[i], exp))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 31,
                        "covered": 1,
                        "percentage": 3.225806451612903
                    }
                }
            }
        },
        "sympy__sympy-14396": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/polys/polyoptions.py": [
                            "class Domain(with_metaclass(OptionType, Option)):"
                        ]
                    },
                    "lines": {
                        "sympy/polys/polyoptions.py": [
                            [
                                "+",
                                "elif ground in ['Q', 'QQ']:"
                            ],
                            [
                                "-",
                                "_re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")"
                            ],
                            [
                                "+",
                                "elif ground in ['R', 'RR']:"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "return sympy.polys.domains.RR.poly_ring(*gens)"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "+",
                                "_re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ|R|RR|C|CC)\\[(.+)\\]$\")"
                            ],
                            [
                                "+",
                                "return sympy.polys.domains.CC.poly_ring(*gens)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-14774": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-14817": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/pretty/pretty.py": [
                            [
                                "+",
                                "if _coeff_isneg(S(coeff)):"
                            ],
                            [
                                "+",
                                "coeff = item.as_coeff_mmul()[0]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "sympy__sympy-15011": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/utilities/lambdify.py": [
                            "def _is_safe_ident(cls, ident):"
                        ]
                    },
                    "lines": {
                        "sympy/utilities/lambdify.py": [
                            [
                                "+",
                                "elif isinstance(arg, Symbol) or isinstance(arg, MatrixSymbol):"
                            ],
                            [
                                "+",
                                "argstrs.append(str(arg))"
                            ],
                            [
                                "+",
                                "argrep = self._argrepr(arg)"
                            ],
                            [
                                "-",
                                "elif isinstance(arg, Symbol):"
                            ],
                            [
                                "+",
                                "from sympy import Dummy, Symbol, MatrixSymbol, Function, flatten"
                            ],
                            [
                                "-",
                                "argstrs.append(str(arg))"
                            ],
                            [
                                "+",
                                "if dummify:"
                            ],
                            [
                                "-",
                                "from sympy import Dummy, Symbol, Function, flatten"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 6,
                        "percentage": 42.857142857142854
                    }
                }
            }
        },
        "sympy__sympy-15308": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/latex.py": [
                            "def _do_exponent(self, expr, exp):",
                            "def _print_Transpose(self, expr):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/latex.py": [
                            [
                                "+",
                                "def _print_Basic(self, expr):"
                            ],
                            [
                                "+",
                                "return r\"\\mathrm{tr}\\left (%s \\right )\" % self._print(mat)"
                            ],
                            [
                                "+",
                                "return self._deal_with_super_sub(expr.__class__.__name__) + r\"\\left(%s\\right)\" % \", \".join(l)"
                            ],
                            [
                                "+",
                                "mat = expr.arg"
                            ],
                            [
                                "+",
                                "l = [self._print(o) for o in expr.args]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 2,
                        "percentage": 28.57142857142857
                    }
                }
            }
        },
        "sympy__sympy-15345": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/mathematica.py": [
                            "def _print_Function(self, expr):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/mathematica.py": [
                            [
                                "+",
                                "\"Max\": [(lambda *x: True, \"Max\")],"
                            ],
                            [
                                "+",
                                "_print_MinMaxBase = _print_Function"
                            ],
                            [
                                "+",
                                "\"Min\": [(lambda *x: True, \"Min\")],"
                            ],
                            [
                                "+",
                                ""
                            ],
                            [
                                "-",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-15346": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/simplify/trigsimp.py": [
                            "def _futrig(e, **kwargs):"
                        ]
                    },
                    "lines": {
                        "sympy/simplify/trigsimp.py": [
                            [
                                "-",
                                "TRmorrie,"
                            ],
                            [
                                "+",
                                "TRmorrie,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-15609": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/latex.py": [
                            "def _print_MatrixBase(self, expr):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/latex.py": [
                            [
                                "+",
                                "self._print(expr.i),"
                            ],
                            [
                                "-",
                                "+ '_{%s, %s}' % (expr.i, expr.j)"
                            ],
                            [
                                "+",
                                "+ '_{%s, %s}' % ("
                            ],
                            [
                                "+",
                                ")"
                            ],
                            [
                                "+",
                                "self._print(expr.j)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-15678": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/geometry/util.py": [
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "dydx = y.diff(x)"
                            ],
                            [
                                "+",
                                "elif isinstance(y, Function):"
                            ],
                            [
                                "+",
                                "dydx = Function(y.name)(x).diff(x)"
                            ],
                            [
                                "+",
                                "if isinstance(y, Symbol):"
                            ],
                            [
                                "+",
                                "raise ValueError(\"expecting x-dependent symbol(s) or function(s) but got: %s\" % y)"
                            ],
                            [
                                "+",
                                "pass"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 3,
                        "percentage": 30.0
                    }
                }
            }
        },
        "sympy__sympy-16106": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/mathml.py": [
                            "def _print_Lambda(self, e):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/mathml.py": [
                            [
                                "+",
                                "return self._print(e.label)"
                            ],
                            [
                                "+",
                                "x.appendChild(self._print(e.indices))"
                            ],
                            [
                                "+",
                                "x.appendChild(self._print(e.indices[0]))"
                            ],
                            [
                                "+",
                                "x.appendChild(self._print(i))"
                            ],
                            [
                                "+",
                                "for i in e:"
                            ],
                            [
                                "+",
                                "def _print_tuple(self, e):"
                            ],
                            [
                                "+",
                                "x = self.dom.createElement('mfenced')"
                            ],
                            [
                                "+",
                                "def _print_IndexedBase(self, e):"
                            ],
                            [
                                "+",
                                "x = self.dom.createElement('msub')"
                            ],
                            [
                                "+",
                                "x.appendChild(self._print(e.base))"
                            ],
                            [
                                "+",
                                "if len(e.indices) == 1:"
                            ],
                            [
                                "+",
                                "def _print_Indexed(self, e):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 2,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "sympy__sympy-16281": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/pretty/pretty.py": [
                            [
                                "-",
                                "sign_lines = []"
                            ],
                            [
                                "+",
                                "for _ in range(func_height + 1):"
                            ],
                            [
                                "+",
                                "sign_lines = [horizontal_chr + corner_chr + (horizontal_chr * (width-2)) + corner_chr + horizontal_chr]"
                            ],
                            [
                                "-",
                                "sign_lines.append(vertical_chr + (' '*width) + vertical_chr)"
                            ],
                            [
                                "+",
                                "sign_lines.append(' ' + vertical_chr + (' ' * (width-2)) + vertical_chr + ' ')"
                            ],
                            [
                                "-",
                                "for i in range(func_height + 1):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "sympy__sympy-16503": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/printing/pretty/pretty.py": [
                            [
                                "-",
                                "return d, h + more, lines, 0"
                            ],
                            [
                                "-",
                                "prettyF.baseline = max_upper + sign_height//2"
                            ],
                            [
                                "+",
                                "ascii_adjustment = ascii_mode if not adjustment else 0"
                            ],
                            [
                                "+",
                                "# exactly through the center"
                            ],
                            [
                                "+",
                                "prettyF.baseline = max_upper + sign_height//2 + ascii_adjustment"
                            ],
                            [
                                "+",
                                "return d, h + more, lines, more"
                            ],
                            [
                                "+",
                                "# adjust baseline of ascii mode sigma with an odd height so that it is"
                            ],
                            [
                                "+",
                                "prettyF.baseline)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 10,
                        "covered": 2,
                        "percentage": 20.0
                    }
                }
            }
        },
        "sympy__sympy-16792": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/utilities/codegen.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-16988": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/sets/sets.py": [
                            "def __new__(cls, *args, **kwargs):"
                        ]
                    },
                    "lines": {
                        "sympy/sets/sets.py": [
                            [
                                "-",
                                "args = _sympify(args)"
                            ],
                            [
                                "+",
                                "args = list(ordered(set(_sympify(args))))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-17022": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/printing/pycode.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-17139": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-17630": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/matrices/expressions/matexpr.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-17655": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/geometry/point.py": [
                            "def __mul__(self, factor):"
                        ]
                    },
                    "lines": {
                        "sympy/geometry/point.py": [
                            [
                                "+",
                                "return self.__mul__(factor)"
                            ],
                            [
                                "+",
                                "def __rmul__(self, factor):"
                            ],
                            [
                                "+",
                                "\"\"\"Multiply a factor by point's coordinates.\"\"\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 1,
                        "percentage": 25.0
                    }
                }
            }
        },
        "sympy__sympy-18057": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/expr.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18087": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/exprtools.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18189": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/solvers/diophantine.py": [
                            [
                                "-",
                                "for t in diophantine(eq, param)}"
                            ],
                            [
                                "+",
                                "for t in diophantine(eq, param, permute=permute)}"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18199": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/ntheory/residue_ntheory.py": [
                            "def _nthroot_mod1(s, q, p, all_roots):"
                        ]
                    },
                    "lines": {
                        "sympy/ntheory/residue_ntheory.py": [
                            [
                                "+",
                                "dd = {}"
                            ],
                            [
                                "+",
                                "while k not in new_roots:"
                            ],
                            [
                                "-",
                                "if not isprime(p):"
                            ],
                            [
                                "+",
                                "roots_in_base = {root}"
                            ],
                            [
                                "+",
                                "dd[pow(p, e)] = tot_roots"
                            ],
                            [
                                "+",
                                "if diff != 0:"
                            ],
                            [
                                "+",
                                "return [0]"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "+",
                                "rootn = pow(root, n)"
                            ],
                            [
                                "+",
                                "roots_in_base = new_roots"
                            ],
                            [
                                "+",
                                "continue"
                            ],
                            [
                                "+",
                                "for k in roots_in_base:"
                            ],
                            [
                                "-",
                                "raise NotImplementedError(\"Not implemented for composite p\")"
                            ],
                            [
                                "+",
                                "for root in nthroot_mod(a, n, p, True) or []:"
                            ],
                            [
                                "+",
                                "def _nthroot_mod_composite(a, n, m):"
                            ],
                            [
                                "+",
                                "root = (root - (rootn - a) * mod_inverse(diff, p)) % ppow"
                            ],
                            [
                                "+",
                                "new_roots.add(k)"
                            ],
                            [
                                "+",
                                "return sorted(set(crt(m, list(i))[0] for i in cartes(*a)))"
                            ],
                            [
                                "+",
                                "from sympy.utilities.iterables import cartes"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "tot_roots.update(nthroot_mod(a, n, p, True) or [])"
                            ],
                            [
                                "+",
                                "new_base *= p"
                            ],
                            [
                                "+",
                                "for x, y in dd.items():"
                            ],
                            [
                                "+",
                                "a.append(list(y))"
                            ],
                            [
                                "+",
                                "if not isprime(p):"
                            ],
                            [
                                "+",
                                "for p, e in f.items():"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "Find the solutions to ``x**n = a mod m`` when m is not prime."
                            ],
                            [
                                "+",
                                "m = []"
                            ],
                            [
                                "+",
                                "for j in range(1, e):"
                            ],
                            [
                                "+",
                                "f = factorint(m)"
                            ],
                            [
                                "+",
                                "tot_roots.add(root)"
                            ],
                            [
                                "+",
                                "new_roots = set()"
                            ],
                            [
                                "+",
                                "k = (k + (new_base // p)) % new_base"
                            ],
                            [
                                "+",
                                "tot_roots = set()"
                            ],
                            [
                                "+",
                                "ppow *= p"
                            ],
                            [
                                "+",
                                "m.append(x)"
                            ],
                            [
                                "+",
                                "tot_roots = tot_roots | roots_in_base"
                            ],
                            [
                                "+",
                                "diff = (rootn // (root or 1) * n) % p"
                            ],
                            [
                                "+",
                                "if (pow(k, n) - a) % (new_base) != 0:"
                            ],
                            [
                                "+",
                                "a = []"
                            ],
                            [
                                "+",
                                "new_base = p"
                            ],
                            [
                                "+",
                                "return _nthroot_mod_composite(a, n, p)"
                            ],
                            [
                                "+",
                                "from sympy.ntheory.modular import crt"
                            ],
                            [
                                "+",
                                "while new_base < pow(p, e):"
                            ],
                            [
                                "+",
                                "if e == 1:"
                            ],
                            [
                                "+",
                                "ppow = p"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 48,
                        "covered": 1,
                        "percentage": 2.083333333333333
                    }
                }
            }
        },
        "sympy__sympy-18532": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/core/basic.py": [
                            [
                                "+",
                                "result = {node for node in nodes if not node.args}"
                            ],
                            [
                                "-",
                                "for expr in preorder_traversal(self):"
                            ],
                            [
                                "+",
                                "if types:"
                            ],
                            [
                                "+",
                                "result = {node for node in nodes if isinstance(node, types)}"
                            ],
                            [
                                "+",
                                "nodes = preorder_traversal(self)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 4,
                        "percentage": 44.44444444444444
                    }
                }
            }
        },
        "sympy__sympy-18621": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/matrices/expressions/blockmatrix.py": [
                            "def blocks(self):"
                        ]
                    },
                    "lines": {
                        "sympy/matrices/expressions/blockmatrix.py": [
                            [
                                "-",
                                "return ImmutableDenseMatrix(data)"
                            ],
                            [
                                "+",
                                "return ImmutableDenseMatrix(data, evaluate=False)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18698": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/polys/polytools.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 11,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-18835": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/utilities/iterables.py": [
                            "def has_variety(seq):"
                        ]
                    },
                    "lines": {
                        "sympy/utilities/iterables.py": [
                            [
                                "+",
                                "raise RuntimeError('sequence changed size during iteration')"
                            ],
                            [
                                "+",
                                "to pass anything for this."
                            ],
                            [
                                "+",
                                "n = None"
                            ],
                            [
                                "+",
                                "if n is not None and len(seq) != n:"
                            ],
                            [
                                "+",
                                "an iterator and advance the iterator you will change the"
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "-",
                                "anything for this."
                            ],
                            [
                                "+",
                                "parameter ``result``  is used internally; it is not necessary"
                            ],
                            [
                                "+",
                                "def check():"
                            ],
                            [
                                "+",
                                "RuntimeError if the size of the sequence is known; if you pass"
                            ],
                            [
                                "+",
                                "# check that size of seq did not change during iteration;"
                            ],
                            [
                                "+",
                                "check()"
                            ],
                            [
                                "+",
                                "# if n == None the object won't support size changing, e.g."
                            ],
                            [
                                "+",
                                "output of this routine but there will be no warning."
                            ],
                            [
                                "-",
                                "parameter ``result``  is used internally; it is not necessary to pass"
                            ],
                            [
                                "+",
                                "Note: changing the sequence during iteration will raise a"
                            ],
                            [
                                "+",
                                "# an iterator can't be changed"
                            ],
                            [
                                "+",
                                "except TypeError:"
                            ],
                            [
                                "+",
                                "n = len(seq)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 1,
                        "percentage": 5.0
                    }
                }
            }
        },
        "sympy__sympy-19007": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/matrices/expressions/blockmatrix.py": [
                            [
                                "+",
                                "# Can't tell which block and it's not the last one, return unevaluated"
                            ],
                            [
                                "+",
                                "cmp = i < numrows"
                            ],
                            [
                                "+",
                                "if cmp == True:"
                            ],
                            [
                                "-",
                                "from sympy.matrices.expressions.matexpr import MatrixExpr, ZeroMatrix, Identity"
                            ],
                            [
                                "+",
                                "return MatrixElement(self, orig_i, orig_j)"
                            ],
                            [
                                "+",
                                "cmp = j < numcols"
                            ],
                            [
                                "+",
                                "orig_i, orig_j = i, j"
                            ],
                            [
                                "+",
                                "elif col_block < self.blockshape[1] - 1:"
                            ],
                            [
                                "+",
                                "from sympy.matrices.expressions.matexpr import MatrixExpr, ZeroMatrix, Identity, MatrixElement"
                            ],
                            [
                                "+",
                                "elif cmp == False:"
                            ],
                            [
                                "+",
                                "elif row_block < self.blockshape[0] - 1:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 14,
                        "covered": 3,
                        "percentage": 21.428571428571427
                    }
                }
            }
        },
        "sympy__sympy-19254": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/polys/factortools.py": [
                            [
                                "+",
                                ">>> from sympy.polys import ring, ZZ"
                            ],
                            [
                                "+",
                                "Also consider a case that `f` is irreducible for example `f = 2*x**2 + 3*x + 4`"
                            ],
                            [
                                "-",
                                "n = dup_degree(f)"
                            ],
                            [
                                "+",
                                "t1 = binomial(delta - 1, delta2)"
                            ],
                            [
                                "+",
                                "The new Mignotte bound is 744 whereas the old one (SymPy 1.5.1) is 1937664."
                            ],
                            [
                                "+",
                                "consider the irreducible polynomial::"
                            ],
                            [
                                "+",
                                "6"
                            ],
                            [
                                "+",
                                "lc = K.abs(dup_LC(f, K))   # leading coefficient"
                            ],
                            [
                                "+",
                                "delta = _ceil(d / 2)"
                            ],
                            [
                                "+",
                                ">>> f = 87*x**7 + 4*x**6 + 80*x**5 + 17*x**4 + 9*x**3 + 12*x**2 + 49*x + 26"
                            ],
                            [
                                "+",
                                ">>> R.dup_zz_mignotte_bound(f)"
                            ],
                            [
                                "+",
                                "from sympy import binomial"
                            ],
                            [
                                "-",
                                "a = dup_max_norm(f, K)"
                            ],
                            [
                                "+",
                                "\"\"\""
                            ],
                            [
                                "+",
                                "eucl_norm = K.sqrt( sum( [cf**2 for cf in f] ) )"
                            ],
                            [
                                "+",
                                "========"
                            ],
                            [
                                "+",
                                "bound = t1 * eucl_norm + t2 * lc   # (p. 538 of reference)"
                            ],
                            [
                                "+",
                                "d = dup_degree(f)"
                            ],
                            [
                                "+",
                                "The Knuth-Cohen variant of Mignotte bound for"
                            ],
                            [
                                "+",
                                ">>> R, x = ring(\"x\", ZZ)"
                            ],
                            [
                                "+",
                                "bound = _ceil(bound / 2) * 2   # round up to even integer"
                            ],
                            [
                                "+",
                                "744"
                            ],
                            [
                                "+",
                                "152"
                            ],
                            [
                                "+",
                                "t2 = binomial(delta - 1, delta2 - 1)"
                            ],
                            [
                                "+",
                                "By checking `factor(f)` we can see that max coeff is 8"
                            ],
                            [
                                "+",
                                "To avoid a bug for these cases, we return the bound plus the max coefficient of `f`"
                            ],
                            [
                                "+",
                                "univariate polynomials in `K[x]`."
                            ],
                            [
                                "+",
                                ">>> f = 2*x**2 + 3*x + 4"
                            ],
                            [
                                "+",
                                "References"
                            ],
                            [
                                "+",
                                "# euclidean-norm"
                            ],
                            [
                                "+",
                                "=========="
                            ],
                            [
                                "+",
                                "bound += dup_max_norm(f, K) # add max coeff for irreducible polys"
                            ],
                            [
                                "+",
                                "delta2 = _ceil(delta / 2)"
                            ],
                            [
                                "+",
                                "# biggest values of binomial coefficients (p. 538 of reference)"
                            ],
                            [
                                "-",
                                "b = abs(dup_LC(f, K))"
                            ],
                            [
                                "+",
                                "Lastly,To see the difference between the new and the old Mignotte bound"
                            ],
                            [
                                "+",
                                "return bound"
                            ],
                            [
                                "+",
                                "..[1] [Abbott2013]_"
                            ],
                            [
                                "+",
                                ">>> f = x**3 + 14*x**2 + 56*x + 64"
                            ],
                            [
                                "+",
                                "Examples"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 43,
                        "covered": 3,
                        "percentage": 6.976744186046512
                    }
                }
            }
        },
        "sympy__sympy-19487": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/functions/elementary/complexes.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20049": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/physics/vector/point.py": [
                            [
                                "+",
                                "if node not in visited:"
                            ],
                            [
                                "+",
                                "return self._vel_dict[frame]"
                            ],
                            [
                                "+",
                                ">>> p2 = Point('p2')"
                            ],
                            [
                                "+",
                                ">>> p2.set_pos(p, q*N.x)"
                            ],
                            [
                                "+",
                                "continue"
                            ],
                            [
                                "+",
                                "raise ValueError('Velocity of point ' + self.name + ' has not been'"
                            ],
                            [
                                "+",
                                "except KeyError:"
                            ],
                            [
                                "+",
                                ">>> from sympy.physics.vector import Point, ReferenceFrame, dynamicsymbols"
                            ],
                            [
                                "+",
                                "for neighbor, neighbor_pos in node._pos_dict.items():"
                            ],
                            [
                                "-",
                                ">>> from sympy.physics.vector import Point, ReferenceFrame"
                            ],
                            [
                                "+",
                                "self.set_vel(frame, self.pos_from(neighbor).dt(frame) + neighbor_velocity)"
                            ],
                            [
                                "+",
                                "else:"
                            ],
                            [
                                "+",
                                "visited = []"
                            ],
                            [
                                "+",
                                "Velocities will be automatically calculated if possible, otherwise a ``ValueError`` will be returned. If it is possible to calculate multiple different velocities from the relative points, the points defined most directly relative to this point will be used. In the case of inconsistent relative positions of points, incorrect velocities may be returned. It is up to the user to define prior relative positions and velocities of points in a self-consistent way."
                            ],
                            [
                                "+",
                                ">>> p = Point('p')"
                            ],
                            [
                                "+",
                                "neighbor_velocity = neighbor._vel_dict[frame] #Checks if point has its vel defined in req frame"
                            ],
                            [
                                "+",
                                "while queue: #BFS to find nearest point"
                            ],
                            [
                                "+",
                                ">>> p2.vel(N)"
                            ],
                            [
                                "+",
                                "except ValueError:"
                            ],
                            [
                                "+",
                                "visited.append(node)"
                            ],
                            [
                                "+",
                                "try :"
                            ],
                            [
                                "+",
                                "queue.append(neighbor)"
                            ],
                            [
                                "-",
                                "raise ValueError('Velocity of point ' + self.name + ' has not been'"
                            ],
                            [
                                "+",
                                "queue = [self]"
                            ],
                            [
                                "+",
                                ">>> p.set_vel(N, 10 * N.x)"
                            ],
                            [
                                "+",
                                "(Derivative(q(t), t) + 10)*N.x"
                            ],
                            [
                                "+",
                                "node = queue.pop(0)"
                            ],
                            [
                                "+",
                                ">>> q = dynamicsymbols('q')"
                            ],
                            [
                                "+",
                                "neighbor_pos.express(frame) #Checks if pos vector is valid"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 31,
                        "covered": 2,
                        "percentage": 6.451612903225806
                    }
                }
            }
        },
        "sympy__sympy-20154": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/utilities/iterables.py": [
                            [
                                "-",
                                ">>> [p for p in partitions(6, k=2)]"
                            ],
                            [
                                "-",
                                "[(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]"
                            ],
                            [
                                "-",
                                "yield ms"
                            ],
                            [
                                "-",
                                "If you want to build a list of the returned dictionaries then"
                            ],
                            [
                                "-",
                                "[{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]"
                            ],
                            [
                                "-",
                                "[{1: 6}, {1: 6}, {1: 6}, {1: 6}]"
                            ],
                            [
                                "-",
                                "Note that the _same_ dictionary object is returned each time."
                            ],
                            [
                                "-",
                                "taking constant time, independent of n."
                            ],
                            [
                                "+",
                                "yield ms.copy()"
                            ],
                            [
                                "-",
                                ">>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP"
                            ],
                            [
                                "-",
                                "make a copy of them:"
                            ],
                            [
                                "-",
                                ""
                            ],
                            [
                                "-",
                                ">>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP"
                            ],
                            [
                                "-",
                                "This is for speed:  generating each partition goes quickly,"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 16,
                        "covered": 2,
                        "percentage": 12.5
                    }
                }
            }
        },
        "sympy__sympy-20212": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/power.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20322": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/mul.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 50,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20442": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/physics/units/util.py": [
                            "def _get_conversion_matrix_for_expr(expr, target_units, unit_system):"
                        ]
                    },
                    "lines": {
                        "sympy/physics/units/util.py": [
                            [
                                "+",
                                "from sympy.matrices.common import NonInvertibleMatrixError"
                            ],
                            [
                                "+",
                                "res_exponents = camat.solve(exprmat)"
                            ],
                            [
                                "+",
                                "return None"
                            ],
                            [
                                "-",
                                "res_exponents = camat.solve_least_squares(exprmat, method=None)"
                            ],
                            [
                                "+",
                                "try:"
                            ],
                            [
                                "+",
                                "except NonInvertibleMatrixError:"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 1,
                        "percentage": 14.285714285714285
                    }
                }
            }
        },
        "sympy__sympy-20590": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/_print_helpers.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 5,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-20639": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/pretty/pretty.py": [
                            "def _print_nth_root(self, base, expt):",
                            "def _print_Mul(self, product):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/pretty/pretty.py": [
                            [
                                "-",
                                "exp = exp.ljust(2)"
                            ],
                            [
                                "+",
                                "return self._print(base)**self._print(1/root)"
                            ],
                            [
                                "+",
                                "and self._settings['root_notation']:"
                            ],
                            [
                                "-",
                                "else:"
                            ],
                            [
                                "+",
                                "# Constructing the number to put on root"
                            ],
                            [
                                "+",
                                "if rpretty.height() != 1:"
                            ],
                            [
                                "+",
                                "rpretty = self._print(root)"
                            ],
                            [
                                "-",
                                "exp = ''"
                            ],
                            [
                                "-",
                                "# Make exponent number to put above it"
                            ],
                            [
                                "-",
                                "if isinstance(expt, Rational):"
                            ],
                            [
                                "-",
                                "exp = str(expt.q)"
                            ],
                            [
                                "+",
                                "exp = '' if root == 2 else str(rpretty).ljust(2)"
                            ],
                            [
                                "-",
                                "if exp == '2':"
                            ],
                            [
                                "-",
                                "exp = str(expt.args[0])"
                            ],
                            [
                                "+",
                                "# If power is half, no number should appear on top of root sign"
                            ],
                            [
                                "+",
                                "if n is S.One and d.is_Atom and not e.is_Integer and (e.is_Rational or d.is_Symbol) \\"
                            ],
                            [
                                "+",
                                "# roots look bad if they are not a single line"
                            ],
                            [
                                "+",
                                "def _print_nth_root(self, base, root):"
                            ],
                            [
                                "-",
                                "def _print_nth_root(self, base, expt):"
                            ],
                            [
                                "+",
                                "and root == 2 and bpretty.height() == 1"
                            ],
                            [
                                "+",
                                "return self._print_nth_root(b, d)"
                            ],
                            [
                                "-",
                                "and expt is S.Half and bpretty.height() == 1"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 1,
                        "percentage": 33.33333333333333
                    },
                    "lines": {
                        "total": 24,
                        "covered": 2,
                        "percentage": 8.333333333333332
                    }
                }
            }
        },
        "sympy__sympy-21055": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/assumptions/refine.py": [
                            "def refine_im(expr, assumptions):"
                        ]
                    },
                    "lines": {
                        "sympy/assumptions/refine.py": [
                            [
                                "+",
                                ">>> from sympy.abc import x"
                            ],
                            [
                                "+",
                                ">>> refine_arg(arg(x), Q.positive(x))"
                            ],
                            [
                                "+",
                                ">>> refine_arg(arg(x), Q.negative(x))"
                            ],
                            [
                                "+",
                                "rg = expr.args[0]"
                            ],
                            [
                                "+",
                                ">>> from sympy import Q, arg"
                            ],
                            [
                                "+",
                                "return None"
                            ],
                            [
                                "+",
                                "if ask(Q.positive(rg), assumptions):"
                            ],
                            [
                                "+",
                                "Explanation"
                            ],
                            [
                                "+",
                                "return S.Pi"
                            ],
                            [
                                "+",
                                "==========="
                            ],
                            [
                                "+",
                                "Handler for complex argument"
                            ],
                            [
                                "+",
                                "if ask(Q.negative(rg), assumptions):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 20,
                        "covered": 8,
                        "percentage": 40.0
                    }
                }
            }
        },
        "sympy__sympy-21171": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/printing/latex.py": [
                            "def _print_DiracDelta(self, expr, exp=None):"
                        ]
                    },
                    "lines": {
                        "sympy/printing/latex.py": [
                            [
                                "+",
                                "if exp is not None:"
                            ],
                            [
                                "+",
                                "tex = r\"{\\left({\\langle %s \\rangle}^{%s}\\right)}^{%s}\" % (shift, power, exp)"
                            ],
                            [
                                "+",
                                "def _print_SingularityFunction(self, expr, exp=None):"
                            ],
                            [
                                "-",
                                "def _print_SingularityFunction(self, expr):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21379": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/core/mod.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 12,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21612": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/printing/str.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21614": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/core/function.py": [
                            "def free_symbols(self):"
                        ]
                    },
                    "lines": {
                        "sympy/core/function.py": [
                            [
                                "+",
                                "return self.args[0].kind"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 3,
                        "percentage": 75.0
                    }
                }
            }
        },
        "sympy__sympy-21627": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/functions/elementary/complexes.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-21847": {
            "is_covered": true,
            "coverage_info": {
                "complete_coverage": true,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 2,
                        "percentage": 100.0
                    }
                }
            }
        },
        "sympy__sympy-22005": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/solvers/polysys.py": [
                            [
                                "+",
                                "'''))"
                            ],
                            [
                                "+",
                                "raise NotImplementedError(filldedent('''"
                            ],
                            [
                                "+",
                                "if len(basis) < len(gens):"
                            ],
                            [
                                "+",
                                "only zero-dimensional systems supported"
                            ],
                            [
                                "+",
                                "(finite number of solutions)"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 1,
                        "percentage": 16.666666666666664
                    }
                }
            }
        },
        "sympy__sympy-22714": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/geometry/point.py": [
                            [
                                "+",
                                "if any(a.is_number and im(a).is_zero is False for a in coords):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-22840": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/simplify/cse_main.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 6,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-23117": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/tensor/array/ndim_array.py": [
                            "def f(pointer):",
                            "def __new__(cls, iterable, shape=None, **kwargs):",
                            "def _check_special_bounds(cls, flat_list, shape):"
                        ]
                    },
                    "lines": {
                        "sympy/tensor/array/ndim_array.py": [
                            [
                                "+",
                                "if index >= self._loop_size:"
                            ],
                            [
                                "-",
                                "raise ValueError(\"Index not valide with an empty array\")"
                            ],
                            [
                                "-",
                                "index = tuple([i for i in index] + \\"
                            ],
                            [
                                "+",
                                "if len(pointer) == 0:"
                            ],
                            [
                                "+",
                                "index = (index,)"
                            ],
                            [
                                "+",
                                "raise ValueError(\"Index not valid with an empty array\")"
                            ],
                            [
                                "+",
                                "index = tuple(index) + \\"
                            ],
                            [
                                "+",
                                "raise ValueError(\"Only a tuple index is accepted\")"
                            ],
                            [
                                "-",
                                "[slice(None) for i in range(len(index), self.rank())])"
                            ],
                            [
                                "-",
                                "index = (index, )"
                            ],
                            [
                                "+",
                                "return index"
                            ],
                            [
                                "+",
                                "return [], (0,)"
                            ],
                            [
                                "+",
                                "tuple(slice(None) for i in range(len(index), self.rank()))"
                            ],
                            [
                                "-",
                                "raise ValueError(\"Only a tuple index is accepted\")"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 3,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 15,
                        "covered": 1,
                        "percentage": 6.666666666666667
                    }
                }
            }
        },
        "sympy__sympy-23191": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [
                        "sympy/printing/pretty/pretty.py"
                    ],
                    "functions": {},
                    "lines": {}
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 22,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-23262": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/utilities/lambdify.py": [
                            "def _recursive_to_string(doprint, arg):"
                        ]
                    },
                    "lines": {
                        "sympy/utilities/lambdify.py": [
                            [
                                "+",
                                "left, right = \"(\", \",)\""
                            ],
                            [
                                "-",
                                "left, right = \"()\""
                            ],
                            [
                                "-",
                                "left, right = \"[]\""
                            ],
                            [
                                "+",
                                "left, right = \"[\", \"]\""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 4,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-24066": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/physics/units/unitsystem.py": [
                            [
                                "+",
                                "return (expr.func(*(f[0] for f in fds)), *dims)"
                            ],
                            [
                                "-",
                                "*(d[1] for d in fds))"
                            ],
                            [
                                "+",
                                "fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]"
                            ],
                            [
                                "+",
                                "dims = [Dimension(1) if self.get_dimension_system().is_dimensionless(d[1]) else d[1] for d in fds]"
                            ],
                            [
                                "-",
                                "arg) for arg in expr.args]"
                            ],
                            [
                                "-",
                                "return (expr.func(*(f[0] for f in fds)),"
                            ],
                            [
                                "-",
                                "fds = [self._collect_factor_and_dimension("
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 7,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-24102": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/parsing/mathematica.py": [
                            "def _from_mathematica_to_tokens(self, code: str):"
                        ]
                    },
                    "lines": {
                        "sympy/parsing/mathematica.py": [
                            [
                                "+",
                                "token_lists = [tokenizer.findall(i) if isinstance(i, str) and i.isascii() else [i] for i in code_splits]"
                            ],
                            [
                                "-",
                                "token_lists = [tokenizer.findall(i) if isinstance(i, str) else [i] for i in code_splits]"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 0,
                        "percentage": 0.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 0,
                        "percentage": 0.0
                    }
                }
            }
        },
        "sympy__sympy-24152": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/physics/quantum/tensorproduct.py": [
                            [
                                "+",
                                "nc_part = (nc_part[0]._eval_expand_tensorproduct(), )"
                            ],
                            [
                                "+",
                                "c_part, nc_part = tp.args_cnc()"
                            ],
                            [
                                "+",
                                "if len(nc_part) == 1 and isinstance(nc_part[0], TensorProduct):"
                            ],
                            [
                                "+",
                                "# (Note: any other object type to be expanded must be added here)"
                            ],
                            [
                                "+",
                                "# Check for TensorProduct object: is the one object in nc_part, if any:"
                            ],
                            [
                                "+",
                                "add_args.append(Mul(*c_part)*Mul(*nc_part))"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 9,
                        "covered": 3,
                        "percentage": 33.33333333333333
                    }
                }
            }
        },
        "sympy__sympy-24213": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {},
                    "lines": {
                        "sympy/physics/units/unitsystem.py": [
                            [
                                "+",
                                "if not self.get_dimension_system().equivalent_dims(dim, addend_dim):"
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "lines": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    }
                }
            }
        },
        "sympy__sympy-24909": {
            "is_covered": false,
            "coverage_info": {
                "complete_coverage": false,
                "missing": {
                    "files": [],
                    "functions": {
                        "sympy/physics/units/prefixes.py": [
                            "def __truediv__(self, other):"
                        ]
                    },
                    "lines": {
                        "sympy/physics/units/prefixes.py": [
                            [
                                "+",
                                "from sympy.core.singleton import S"
                            ],
                            [
                                "+",
                                "return S.One"
                            ],
                            [
                                "-",
                                "elif isinstance(other, Prefix):"
                            ],
                            [
                                "+",
                                "if fact == 1:"
                            ],
                            [
                                "+",
                                "if isinstance(other, Prefix):"
                            ],
                            [
                                "-",
                                "if fact == 1:"
                            ],
                            [
                                "-",
                                ""
                            ]
                        ]
                    }
                },
                "coverage": {
                    "files": {
                        "total": 1,
                        "covered": 1,
                        "percentage": 100.0
                    },
                    "functions": {
                        "total": 2,
                        "covered": 1,
                        "percentage": 50.0
                    },
                    "lines": {
                        "total": 8,
                        "covered": 1,
                        "percentage": 12.5
                    }
                }
            }
        }
    },
    "average_coverage": {
        "file_coverage": 65.33333333333333,
        "function_coverage": 18.61111111111111,
        "line_coverage": 14.274969901666928
    }
}